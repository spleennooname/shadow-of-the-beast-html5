{"version":3,"mappings":"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","names":["idHash","Object","create","_TextureStyle","EventEmitter","constructor","options","super","this","_resourceType","_touched","_maxAnisotropy","destroyed","defaultOptions","addressMode","addressModeU","addressModeV","addressModeW","scaleMode","magFilter","minFilter","mipmapFilter","lodMinClamp","lodMaxClamp","compare","maxAnisotropy","value","wrapMode","deprecation","v8_0_0","Math","min","_resourceId","_sharedResourceId","_generateResourceId","update","emit","bigKey","id","uid","createResourceIdFromString","destroy","removeAllListeners","TextureStyle","_TextureSource","uploadMethodId","_resolution","pixelWidth","pixelHeight","width","height","sampleCount","mipLevelCount","autoGenerateMipmaps","format","dimension","antialias","_batchTick","_textureBindLocation","label","resource","autoGarbageCollect","resolution","resourceWidth","resourceHeight","dimensions","alphaMode","style","definedProps","_refreshPOT","source","_style","off","_onStyleChange","on","repeatMode","resize","unload","naturalWidth","videoWidth","displayWidth","naturalHeight","videoHeight","displayHeight","newPixelWidth","round","newPixelHeight","updateMipmaps","isPowerOfTwo","isPow2","test","_resource","Error","TextureSource","BufferImageSource","buffer","Float32Array","Int32Array","Uint32Array","Int16Array","Uint16Array","Int8Array","Uint8Array","Uint8ClampedArray","extension","ExtensionType","tempMat","Matrix","TextureMatrix","texture","clampMargin","mapCoord","uClampFrame","uClampOffset","_textureID","_updateID","clampOffset","isSimple","_texture","removeListener","addListener","multiplyUvs","uvs","out","mat","i","length","x","y","a","c","tx","b","d","ty","tex","set","x1","x0","y1","y0","x3","y3","orig","trim","append","texBase","frame","margin","offset","rotate","Texture","defaultAnchor","defaultBorders","dynamic","x2","y2","Rectangle","noFrame","isTexture","copyFrom","_source","updateUvs","textureMatrix","_textureMatrix","nX","nY","nW","nH","w2","h2","cX","cY","groupD8","add","NW","uX","uY","destroySource","baseTexture","EMPTY","NOOP","WHITE","InstructionSet","instructions","instructionSize","renderables","gcTick","reset","renderPipes","instruction","log","count","TexturePool","textureOptions","_poolKeyHash","_texturePool","enableFullScreen","textureStyle","createTexture","textureSource","getOptimalTexture","frameWidth","frameHeight","po2Width","ceil","po2Height","nextPow2","key","pop","getSameSizeTexture","returnTexture","renderTexture","resetStyle","push","clear","destroyTextures","textures","j","GlobalResourceRegistry","register","CanvasSource","DOMAdapter","get","createCanvas","autoDensity","resizeCanvas","transparent","didResize","globalThis","HTMLCanvasElement","OffscreenCanvas","context2D","_context2D","getContext","ImageSource","HTMLImageElement","ImageBitmap","VideoFrame","_VideoSource","isReady","_autoUpdate","_isConnectedToTicker","_updateFPS","updateFPS","_msToNextUpdate","autoPlay","_videoFrameRequestCallback","bind","_videoFrameRequestCallbackHandle","_load","_resolve","_reject","_onCanPlay","_onCanPlayThrough","_onError","_onPlayStart","_onPlayStop","_onSeeked","autoLoad","load","updateFrame","elapsedMS","Ticker","shared","playbackRate","floor","isValid","requestVideoFrameCallback","readyState","HAVE_ENOUGH_DATA","HAVE_FUTURE_DATA","complete","addEventListener","_isSourceReady","_mediaReady","preload","detectVideoAlphaMode","Promise","resolve","reject","preloadTimeoutMs","_preloadTimeout","setTimeout","ErrorEvent","event","removeEventListener","_isSourcePlaying","paused","ended","_configureAutoUpdate","clearTimeout","play","pause","src","autoUpdate","remove","cancelVideoFrameCallback","HTMLVideoElement","crossorigin","loop","muted","playsinline","MIME_TYPES","ogv","mov","m4v","VideoSource","sources","textureSourceFrom","hasResource","res","opts","Source","extensions","handleByList","from","skipCache","Cache","has","resourceToTexture","idCounts","createIdFromString","groupId","context","maxFragmentPrecision","getTestContext","isContextLost","canvas","getMaxFragmentPrecision","gl","getShaderPrecisionFormat","shaderFragment","FRAGMENT_SHADER","HIGH_FLOAT","precision","fragmentNameCache","VertexNameCache","processes","stripVersion","isES300","replace","ensurePrecision","isFragment","maxSupportedPrecision","maxSupportedFragmentPrecision","maxSupportedVertexPrecision","substring","requestedFragmentPrecision","requestedVertexPrecision","addProgramDefines","setProgramName","name","nameCache","indexOf","insertVersion","programCache","_GlProgram","fragment","preprocessorOptions","preferredFragmentPrecision","preferredVertexPrecision","vertex","keys","forEach","processKey","processOptions","transformFeedbackVaryings","_key","_attributeData","_uniformData","_uniformBlockData","_cacheKey","GlProgram","attributeFormatData","uint8x2","size","stride","normalised","uint8x4","sint8x2","sint8x4","unorm8x2","unorm8x4","snorm8x2","snorm8x4","uint16x2","uint16x4","sint16x2","sint16x4","unorm16x2","unorm16x4","snorm16x2","snorm16x4","float16x2","float16x4","float32","float32x2","float32x3","float32x4","uint32","uint32x2","uint32x3","uint32x4","sint32","sint32x2","sint32x3","sint32x4","getAttributeInfoFromFormat","WGSL_TO_VERTEX_TYPES","f32","vec2f","vec3f","vec4f","i32","u32","bool","extractStructAndGroups","wgsl","groupPattern","bindingPattern","namePattern","typePattern","structMemberPattern","structName","groups","match","map","item","group","parseInt","binding","isUniform","type","structs","struct","members","reduce","acc","member","name2","split","filter","some","ShaderStage","ShaderStage2","GpuProgram","_layoutKey","_attributeLocationsKey","layout","gpuLayout","structsAndGroups","vertexStructsAndGroups","fragmentStructsAndGroups","structNameSet","Set","dupeGroupKeySet","removeStructAndGroupDuplicates","generateLayoutHash","visibility","VERTEX","FRAGMENT","sampler","sampleType","viewDimension","multisampled","generateGpuLayoutGroups","autoAssignGlobalUniforms","globalUniforms","autoAssignLocalUniforms","localUniforms","_generateProgramKey","entryPoint","attributeData","results","mainVertStart","arrowFunctionStart","functionArgsSubstring","inputsRegex","exec","location","instance","start","extractAttributesFromGpuProgram","UNIFORM_TYPES_VALUES","UNIFORM_TYPES_MAP","getDefaultUniformValue","_UniformGroup","uniformStructures","isUniformGroup","_dirtyId","uniforms","uniformData","arrayMatch","innerType","join","ubo","isStatic","_signature","UniformGroup","BindGroup","resources","_dirty","index","setResource","_updateKey","keyParts","currentResource","onResourceChange","getResource","_touch","tick","RendererType","RendererType2","Shader","_uniformBindMap","_ownedBindGroups","gpuProgram","glProgram","compatibleRenderers","groupMap","WEBGPU","WEBGL","nameHash","uniformName","groupData","data","bindTick","_buildResourceAccessor","addResource","groupIndex","bindIndex","_a","_b","uniformsOut","defineProperty","destroyPrograms","bindGroup","gpu","rest","blendModeIds","normal","multiply","screen","overlay","erase","max","_State","blendMode","polygonOffset","blend","depthMask","offsets","cullMode","culling","clockwiseFrontFace","depthTest","_blendMode","_blendModeId","_polygonOffset","toString","for2d","state","default2d","State","CLEAR","CLEAR2","SystemRunner","items","_name","a0","a1","a2","a3","a4","a5","a6","a7","len","splice","contains","removeAll","empty","defaultRunners","_AbstractRenderer","config","runners","_initOptions","_systemsHash","combinedRunners","_addRunners","_unsafeEvalCheck","init","skip","skipExtensionImports","manageImports","loadEnvironmentExtensions","_addSystems","systems","_addPipes","renderPipeAdaptors","systemName","_roundPixels","roundPixels","render","args","deprecated","Container","container","target","view","renderTarget","_lastObjectRendered","clearColor","background","colorRgba","clearBeforeRender","isRGBAArray","Array","isArray","Color","setValue","toArray","transform","updateLocalTransform","localTransform","visible","enableRenderGroup","prerender","renderStart","renderEnd","postrender","desiredScreenWidth","desiredScreenHeight","previousResolution","resolutionChange","ALL","lastObjectRendered","renderingToScreen","runnerIds","runnerId","val","_addSystem","ClassRef","system","pipes","pipeAdaptors","adaptors","adaptor","pipe","PipeClass","Adaptor","reverse","values","runner","releaseGlobalResources","release","generateTexture","textureGenerator","unsafeEvalSupported","resetState","failIfMajorPerformanceCaveat","AbstractRenderer","renderPriority","async","autoDetectRenderer","RendererClass","preferredOrder","preference","slice","finalOptions","rendererType","isWebGPUSupported","WebGPURenderer","__vitePreload","then","WebGPURenderer$1","webgpu","isWebGLSupported","WebGLRenderer","WebGLRenderer$1","webgl","renderer","fastCopy","sourceBuffer","destinationBuffer","lengthDouble","byteLength","sourceFloat64View","Float64Array","remainingBytes","sourceUint8View","BLEND_TO_NPM","STENCIL_MODES","STENCIL_MODES2","getAdjustedBlendModeBlend","BufferUsage","BufferUsage2","Buffer","usage","shrinkToFit","_dataInt32","_data","mappedAtCreation","descriptor","setDataWithSize","dataInt32","static","STATIC","syncGPU","_updateSize","BYTES_PER_ELEMENT","oldData","sizeInBytes","ensureIsBuffer","INDEX","COPY_DST","Geometry","instanceCount","_bounds","Bounds","_boundsDirty","attributes","indexBuffer","topology","buffers","addAttribute","addIndex","onBufferUpdate","getAttribute","getIndex","getBuffer","getSize","attribute","attributeOption","ensureIsAttribute","bounds","geometry","attributeId","minX","minY","maxX","maxY","Infinity","byteSize","getGeometryBounds","destroyBuffers","batchSamplersUniformGroupHash","getBatchSamplersUniformGroup","maxTextures","batchSamplersUniformGroup","sampleValues","uTextures","buildUvs","vertices","verticesStride","verticesOffset","uvsOffset","uvsStride","matrix","buildSimpleUvs","transformVertices","m","CanvasPool","canvasOptions","_canvasPool","_createCanvasAndContext","getOptimalCanvasAndContext","minWidth","minHeight","canvasAndContext","returnCanvasAndContext","resetTransform","clearRect","BUFFER_TYPE","BUFFER_TYPE2","GlBuffer","_lastBindBaseLocation","_lastBindCallId","updateID","GlBufferSystem","_gpuBuffers","_boundBufferBases","_minBaseLocation","_nextBindBaseIndex","_bindCallId","_renderer","renderableGC","addManagedHash","_gl","contextChange","_maxBindings","limits","maxUniformBindings","getGlBuffer","createGLBuffer","glBuffer","bindBuffer","bindBufferBase","UNIFORM_BUFFER","nextBindBase","hasTransformFeedback","freeLocationForBufferBase","freeIndex","getLastBindBaseLocation","nextIndex","curBuf","bindBufferRange","updateBuffer","drawType","STATIC_DRAW","DYNAMIC_DRAW","bufferSubData","bufferData","destroyAll","deleteBuffer","onBufferDestroy","contextLost","ARRAY_BUFFER","ELEMENT_ARRAY_BUFFER","UNIFORM","createBuffer","WebGLSystem","_GlContextSystem","supports","uint32Indices","uniformBufferObject","vertexArrayObject","srgbTextures","nonPowOf2wrapping","msaa","nonPowOf2mipmaps","handleContextLost","handleContextRestored","isLost","multiView","warn","initFromContext","alpha","premultipliedAlpha","backBuffer","useBackBuffer","createContext","preferWebGLVersion","stencil","preserveDrawingBuffer","powerPreference","ensureCanvasSize","targetCanvas","webGLVersion","getWebGLRenderingContext","getExtensions","validateContext","element","common","anisotropicFiltering","getExtension","floatTextureLinear","s3tc","s3tc_sRGB","etc","etc1","pvrtc","atc","astc","bptc","rgtc","loseContext","drawBuffers","depthTexture","uint32ElementIndex","floatTexture","textureHalfFloat","textureHalfFloatLinear","vertexAttribDivisorANGLE","srgb","colorBufferFloat","provokeExt","provokingVertexWEBGL","FIRST_VERTEX_CONVENTION_WEBGL","preventDefault","_contextLossForced","restoreContext","useProgram","forceContextLoss","getContextAttributes","isWebGl2","GlContextSystem","ensureAttributes","extractedData","tempStride","tempStart","ensureStartAndStride","GL_FORMATS","GL_FORMATS2","GL_TARGETS","GL_TARGETS2","GL_TYPES","GL_TYPES2","infoMap","UNSIGNED_BYTE","BYTE","UNSIGNED_SHORT","SHORT","HALF_FLOAT","FLOAT","UNSIGNED_INT","INT","getGlTypeFromFormat","topologyToGlMap","GlGeometrySystem","_geometryVaoHash","_activeGeometry","_activeVao","hasVao","hasInstance","nativeVaoExtension","createVertexArray","createVertexArrayOES","bindVertexArray","vao","bindVertexArrayOES","deleteVertexArray","deleteVertexArrayOES","nativeInstancedExtension","drawArraysInstanced","drawArraysInstancedANGLE","drawElementsInstanced","e","drawElementsInstancedANGLE","vertexAttribDivisor","program","getVao","updateBuffers","unbind","bufferSystem","checkCompatibility","geometryAttributes","shaderAttributes","getSignature","attribs","strings","initGeometryVao","_incRefCount","shader","_getProgramData","signature","onGeometryDestroy","vaoObjectHash","activateVao","lastBuffer","programAttrib","enableVertexAttribArray","attributeInfo","vertexAttribIPointer","vertexAttribPointer","divisor","draw","glTopology","glType","drawElements","drawArrays","bigTriangleGeometry","aPosition","_GlBackBufferSystem","_useBackBufferThisRender","_antialias","_state","bigTriangleProgram","_bigTriangleShader","uTexture","getRenderTarget","isRoot","renderTarget2","_targetTexture","colorTexture","_getBackBufferTexture","_presentBackBuffer","finishRenderPass","_backBufferTexture","encoder","targetSourceTexture","priority","GlBackBufferSystem","GlColorMaskSystem","_colorMaskCache","setMask","colorMask","GlEncoderSystem","commandFinished","setGeometry","skipSync","_activeProgram","GlLimitsSystem","getParameter","MAX_TEXTURE_IMAGE_UNITS","maxBatchableTextures","checkMaxIfStatementsInShader","MAX_UNIFORM_BUFFER_BINDINGS","GlRenderTarget","msaaRenderBuffer","GpuStencilModesToPixi","NONE","DISABLED","stencilWriteMask","stencilReadMask","RENDERING_MASK_ADD","stencilFront","passOp","stencilBack","RENDERING_MASK_REMOVE","MASK_ACTIVE","INVERSE_MASK_ACTIVE","GlStencilSystem","_stencilCache","enabled","stencilReference","stencilMode","_renderTargetStencilState","onRenderTargetChange","_comparisonFuncMapping","always","ALWAYS","never","NEVER","equal","EQUAL","NOTEQUAL","less","LESS","LEQUAL","greater","GREATER","GEQUAL","_stencilOpsMapping","keep","KEEP","zero","ZERO","REPLACE","invert","INVERT","INCR","DECR","INCR_WRAP","DECR_WRAP","_activeRenderTarget","stencilState","setStencilMode","mode","enable","STENCIL_TEST","stencilFunc","stencilOp","disable","UboSystem","_syncFunctionHash","_adaptor","_systemCheck","ensureUniformGroup","uniformGroup","getUniformGroupData","_initUniformGroup","uniformGroupSignature","elements","createUboElements","syncFunction","_generateUboSync","uboElements","generateUboSync","syncUniformGroup","uniformGroupData","updateUniformGroup","synced","WGSL_TO_STD40_SIZE","createUboElementsSTD40","uboElement","boundary","curOffset","uniformParsers","uniform","red","createUboSyncFunction","parserCode","arrayGenerationFunction","singleSettersMap","funcFragments","prev","parsed","template","fragmentSrc","Function","loopMatrix","col","row","uboSyncFunctionsSTD40","uboSyncFunctionsWGSL","generateArraySyncSTD40","offsetToAdd","rowSize","elementSize","remainder","createUboSyncFunctionSTD40","GlUboSystem","GlRenderTargetAdaptor","_clearColorCache","_viewPortCache","renderTargetSystem","_renderTargetSystem","copyToTexture","sourceRenderSurfaceTexture","destinationTexture","originSrc","originDest","glRenderTarget","getGpuRenderTarget","bindFramebuffer","FRAMEBUFFER","resolveTargetFramebuffer","copyTexSubImage2D","TEXTURE_2D","startRenderPass","viewport","gpuRenderTarget","viewPortY","colorTextures","framebuffer","viewPortCache","depthStencilRenderBuffer","depth","_initStencil","READ_FRAMEBUFFER","blitFramebuffer","COLOR_BUFFER_BIT","NEAREST","initGpuRenderTarget","_initColor","destroyGpuRenderTarget","deleteFramebuffer","deleteRenderbuffer","renderBuffer","_renderTarget","COLOR","defaultClearColor","clearColorCache","clearColorArray","resizeGpuRenderTarget","_resizeColor","_resizeStencil","createFramebuffer","bindSource","glTexture","getGlSource","framebufferTexture2D","COLOR_ATTACHMENT0","viewFramebuffer","_","createRenderbuffer","source2","glInternalFormat","internalFormat","bindRenderbuffer","RENDERBUFFER","renderbufferStorageMultisample","framebufferRenderbuffer","DEPTH_STENCIL_ATTACHMENT","DEPTH24_STENCIL8","renderbufferStorage","DEPTH_STENCIL","contextCanvas","canvasSource","drawImage","canvasCache","Map","getCanvasTexture","onDestroy","delete","once","_RenderTarget","dirtyId","_size","_managedColorTextures","colorSource","onSourceResize","depthStencilTexture","ensureDepthStencilTexture","skipColorTexture","RenderTarget","RenderTargetSystem","rootViewPort","projectionMatrix","_renderSurfaceToRenderTargetHash","_gpuRenderTargetHash","_renderTargetStack","rootRenderTarget","document","body","isRenderingToScreen","renderSurface","didChange","pm","flipY","sign","identity","calculateProjection","currentRenderTargetData","_initRenderTarget","ensureDepthStencil","GlRenderTargetSystem","BufferResource","_bufferResource","onBufferChange","destroyBuffer","GlProgramData","uniformGroups","uniformDirtyGroups","uniformBlockBindings","compileShader","createShader","shaderSource","booleanArray","array","defaultValue","GL_TABLE","GL_TO_GLSL_TYPES","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT_VEC2","INT_VEC3","INT_VEC4","UNSIGNED_INT_VEC2","UNSIGNED_INT_VEC3","UNSIGNED_INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","INT_SAMPLER_2D","UNSIGNED_INT_SAMPLER_2D","SAMPLER_CUBE","INT_SAMPLER_CUBE","UNSIGNED_INT_SAMPLER_CUBE","SAMPLER_2D_ARRAY","INT_SAMPLER_2D_ARRAY","UNSIGNED_INT_SAMPLER_2D_ARRAY","GLSL_TO_VERTEX_TYPES","float","vec2","vec3","vec4","int","ivec2","ivec3","ivec4","uint","uvec2","uvec3","uvec4","bvec2","bvec3","bvec4","mapType","typeNames","tn","mapGlToVertexFormat","typeValue","logPrettyShaderError","shaderSrc","getShaderSource","line","splitShader","getShaderInfoLog","dedupe","lineNumbers","parseFloat","n","logArgs","number","fragmentSourceToLog","generateProgram","glVertShader","VERTEX_SHADER","glFragShader","webGLProgram","createProgram","attachShader","names","bufferMode","SEPARATE_ATTRIBS","INTERLEAVED_ATTRIBS","linkProgram","getProgramParameter","LINK_STATUS","vertexShader","fragmentShader","getShaderParameter","COMPILE_STATUS","getProgramInfoLog","logProgramError","sortAttributes","totalAttributes","ACTIVE_ATTRIBUTES","attribData","getActiveAttrib","startsWith","sort","bindAttribLocation","getAttribLocation","extractAttributesFromGlProgram","totalUniforms","ACTIVE_UNIFORMS","getActiveUniform","getUniformData","ACTIVE_UNIFORM_BLOCKS","uniformBlocks","totalUniformsBlocks","getActiveUniformBlockName","uniformBlockIndex","getUniformBlockIndex","getActiveUniformBlockParameter","UNIFORM_BLOCK_DATA_SIZE","getUboData","deleteShader","getUniformLocation","defaultSyncData","textureCount","blockIndex","GlShaderSystem","_programDataHash","_shaderSyncFunctions","_setProgram","_generateShaderSync","bindUniformBlock","programData","isBufferResource","boundLocation","uniformBlockBinding","_createProgramData","shaderSystem","headerFragments","addedTextreSystem","resName","Number","uniform1i","functionSource","generateShaderSyncCode","UNIFORM_TO_SINGLE_SETTERS","UNIFORM_TO_ARRAY_SETTERS","GlUniformGroupSystem","_cache","_uniformGroupSyncHash","syncData","_getUniformSyncFunction","syncFunc","_createUniformSyncFunction","uniformGroupSyncHash","_getSignature","_generateUniformsSync","parser","generateUniformsSync","preFix","_GlStateSystem","_invertFrontFace","stateId","_blendEq","setBlend","setOffset","setCullFace","setDepthTest","setFrontFace","setDepthMask","checks","defaultState","_cullFace","_frontFace","_frontFaceDirty","blendModesMap","blendMap","ONE","ONE_MINUS_SRC_ALPHA","DST_COLOR","ONE_MINUS_SRC_COLOR","none","SRC_ALPHA","ext","MIN_EXT","MAX_EXT","MIN","MAX","mapWebGLBlendModesToPixi","diff","call","forceState","_updateCheck","_checkBlendMode","BLEND","_checkPolygonOffset","POLYGON_OFFSET_FILL","DEPTH_TEST","CULL_FACE","faceMode","_glFrontFace","frontFace","setBlendMode","blendFunc","blendFuncSeparate","blendEquationSeparate","FUNC_ADD","setPolygonOffset","scale","CCW","pixelStorei","UNPACK_FLIP_Y_WEBGL","func","GlStateSystem","GlTexture","RGBA","samplerType","glUploadBufferImageResource","upload","texSubImage2D","texImage2D","compressedFormatMap","glUploadCompressedTextureResource","UNPACK_ALIGNMENT","mipWidth","mipHeight","compressed","levelBuffer","compressedTexImage2D","glUploadImageResource","glWidth","glHeight","textureWidth","textureHeight","glUploadVideoResource","scaleModeToGlFilter","linear","nearest","mipmapScaleModeToGlFilter","wrapModeToGlAddress","repeat","compareModeToGlCompare","applyStyleParams","mipmaps","anisotropicExt","glFunctionName","firstParam","forceClamp","firstCreation","castParam","wrapModeS","wrapModeT","wrapModeR","TEXTURE_WRAP_S","TEXTURE_WRAP_T","TEXTURE_WRAP_R","TEXTURE_MAG_FILTER","glFilterMode","TEXTURE_MIN_FILTER","level","MAX_TEXTURE_MAX_ANISOTROPY_EXT","TEXTURE_MAX_ANISOTROPY_EXT","TEXTURE_COMPARE_FUNC","GlTextureSystem","managedTextures","_glTextures","_glSamplers","_boundTextures","_activeTextureLocation","_boundSamplers","_uploads","image","video","_premultiplyAlpha","_useSeparateSamplers","_mapFormatToInternalFormat","bgra8unorm","SRGB8_ALPHA8_EXT","SRGB8_ALPHA8","RGBA8","r8unorm","R8","r8snorm","R8_SNORM","r8uint","R8UI","r8sint","R8I","r16uint","R16UI","r16sint","R16I","r16float","R16F","rg8unorm","RG8","rg8snorm","RG8_SNORM","rg8uint","RG8UI","rg8sint","RG8I","r32uint","R32UI","r32sint","R32I","r32float","R32F","rg16uint","RG16UI","rg16sint","RG16I","rg16float","RG16F","rgba8unorm","rgba8snorm","RGBA8_SNORM","rgba8uint","RGBA8UI","rgba8sint","RGBA8I","rgb9e5ufloat","RGB9_E5","rgb10a2unorm","RGB10_A2","rg11b10ufloat","R11F_G11F_B10F","rg32uint","RG32UI","rg32sint","RG32I","rg32float","RG32F","rgba16uint","RGBA16UI","rgba16sint","RGBA16I","rgba16float","RGBA16F","rgba32uint","RGBA32UI","rgba32sint","RGBA32I","rgba32float","RGBA32F","stencil8","STENCIL_INDEX8","depth16unorm","DEPTH_COMPONENT16","depth24plus","DEPTH_COMPONENT24","depth32float","DEPTH_COMPONENT32F","DEPTH32F_STENCIL8","COMPRESSED_RGBA_S3TC_DXT1_EXT","COMPRESSED_RGBA_S3TC_DXT3_EXT","COMPRESSED_RGBA_S3TC_DXT5_EXT","COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT","COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT","COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT","COMPRESSED_RED_RGTC1_EXT","COMPRESSED_SIGNED_RED_RGTC1_EXT","COMPRESSED_RED_GREEN_RGTC2_EXT","COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT","COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT","COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT","COMPRESSED_RGBA_BPTC_UNORM_EXT","COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT","COMPRESSED_RGB8_ETC2","COMPRESSED_SRGB8_ETC2","COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2","COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2","COMPRESSED_RGBA8_ETC2_EAC","COMPRESSED_SRGB8_ALPHA8_ETC2_EAC","COMPRESSED_R11_EAC","COMPRESSED_SIGNED_RG11_EAC","COMPRESSED_RGBA_ASTC_4x4_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR","COMPRESSED_RGBA_ASTC_5x4_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR","COMPRESSED_RGBA_ASTC_5x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR","COMPRESSED_RGBA_ASTC_6x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR","COMPRESSED_RGBA_ASTC_6x6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR","COMPRESSED_RGBA_ASTC_8x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR","COMPRESSED_RGBA_ASTC_8x6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR","COMPRESSED_RGBA_ASTC_8x8_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR","COMPRESSED_RGBA_ASTC_10x5_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR","COMPRESSED_RGBA_ASTC_10x6_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR","COMPRESSED_RGBA_ASTC_10x8_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR","COMPRESSED_RGBA_ASTC_10x10_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR","COMPRESSED_RGBA_ASTC_12x10_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR","COMPRESSED_RGBA_ASTC_12x12_KHR","COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR","mapFormatToGlInternalFormat","_mapFormatToType","UNSIGNED_INT_5_9_9_9_REV","UNSIGNED_INT_2_10_10_10_REV","UNSIGNED_INT_10F_11F_11F_REV","UNSIGNED_INT_24_8","FLOAT_32_UNSIGNED_INT_24_8_REV","mapFormatToGlType","_mapFormatToFormat","RED","RG","RGB","DEPTH_COMPONENT","mapFormatToGlFormat","initSource","_bindSampler","textureGC","_activateLocation","bindTexture","bindSampler","_getGlSampler","boundTextures","activeTexture","TEXTURE0","_initSource","biggestDimension","log2","includes","onSourceUpdate","onStyleChange","onSourceDestroy","onSourceUnload","onUpdateMipmaps","updateStyle","deleteTexture","UNPACK_PREMULTIPLY_ALPHA_WEBGL","generateMipmap","_initSampler","glSampler","createSampler","generateCanvas","pixels","getPixels","ctx","imageData","createImageData","putImageData","glRenterTarget","readPixels","fill","_BackgroundSystem","_backgroundColor","color","backgroundColor","backgroundAlpha","setAlpha","WebGPUSystem","CanvasSystem","BackgroundSystem","BLEND_MODE_FILTERS","handle","BlendMode","ref","BlendModePipe","_blendModeStack","_isAdvanced","_filterHash","_activeBlendMode","pushBlendMode","renderable","instructionSet","popBlendMode","isRenderGroup","RenderGroup","_endAdvancedBlendMode","_beginAdvancedBlendMode","_renderableList","batch","break","filterEffect","_ensureFilterEffect","renderPipeId","action","root","canBundle","FilterEffect","filters","buildStart","buildEnd","WebGLPipes","WebGPUPipes","CanvasPipes","imageTypes","png","jpg","webp","_ExtractSystem","_normalizeOptions","defaults","createImage","base64","defaultImageOptions","quality","toBlob","blob","reader","FileReader","onload","result","onerror","readAsDataURL","toDataURL","convertToBlob","pixelInfo","download","link","createElement","filename","href","appendChild","click","removeChild","ExtractSystem","RenderTexture","tempRect","tempBounds","noColor","GenerateTextureSystem","textureSourceOptions","region","copyTo","getLocalBounds","rectangle","translate","GlobalUniformSystem","_stackIndex","_globalUniformDataStack","_uniformsPool","_activeUniforms","_bindGroupPool","_activeBindGroups","worldTransformMatrix","worldColor","currentGlobalUniformData","Point","globalUniformData","_createUniforms","uProjectionMatrix","uResolution","uWorldTransformMatrix","color32BitToUniform","uWorldColorAlpha","uniformBatch","getUniformBindGroup","_currentGlobalUniformData","SchedulerSystem","_tasks","_offset","_update","duration","useOffset","performance","now","last","cancel","task","elapsed","HelloSystem","hello","sayHello","renderableGCTick","_RenderableGCSystem","_managedRenderables","_managedHashes","_managedArrays","maxUnusedTime","renderableGCMaxUnusedTime","_frequency","renderableGCFrequency","renderableGCActive","_handler","scheduler","run","_hashHandler","hash","cleanHash","_arrayHandler","cleanArray","addManagedArray","_now","renderGroup","_updateInstructionGCTick","addRenderable","_lastUsed","_removeRenderable","managedRenderables","parentRenderGroup","currentTick","rp","structureDidChange","destroyRenderable","child","renderGroupChildren","RenderableGCSystem","_TextureGCSystem","checkCount","checkCountMax","textureGCCheckCountMax","maxIdle","textureGCAMaxIdle","textureGCMaxIdle","active","textureGCActive","TextureGCSystem","_ViewSystem","removeView","parentNode","ViewSystem","SharedSystems","RenderGroupSystem","RendererInitHook","SharedRenderPipes","BatcherPipe","SpritePipe","RenderGroupPipe","AlphaMaskPipe","StencilMaskPipe","ColorMaskPipe","CustomRenderPipe","DefaultWebGLSystems","DefaultWebGLPipes","DefaultWebGLAdapters","GlBatchAdaptor","GlMeshAdaptor","GlGraphicsAdaptor","handleByNamedList","WebGLPipesAdaptor","BindGroupSystem","_hash","_gpu","getBindGroup","_createBindGroup","device","groupLayout","entries","gpuResource","getGPUBuffer","bufferResource","getGpuSampler","getGpuSource","createView","getProgramData","bindGroups","gpuBindGroup","createBindGroup","GpuBufferSystem","_managedBuffers","createGPUBuffer","gpuBuffer","queue","writeBuffer","getMappedRange","unmap","_destroyBuffer","UboBatch","minUniformOffsetAlignment","_minUniformOffsetAlignment","byteIndex","addEmptyGroup","newSize","addGroup","GpuColorMaskSystem","pipeline","setColorMask","GpuDeviceSystem","_initPromise","_createDeviceAndAdaptor","adapter","getNavigator","requestAdapter","forceFallbackAdapter","requiredFeatures","feature","features","requestDevice","GpuEncoderSystem","_boundBindGroup","_boundVertexBuffer","_resolveCommandFinished","commandEncoder","createCommandEncoder","beginRenderPass","endRenderPass","_clearCache","renderPassEncoder","end","setViewport","setPipelineFromGeometryProgramAndState","getPipeline","setPipeline","_boundPipeline","_setVertexBuffer","setVertexBuffer","_setIndexBuffer","_boundIndexBuffer","indexFormat","setIndexBuffer","resetBindGroup","setBindGroup","buffersToBind","getBufferNamesToBind","_setShaderBindGroups","_syncBindGroup","drawIndexed","submit","finish","restoreRenderPass","getDescriptor","boundPipeline","boundVertexBuffer","boundIndexBuffer","boundBindGroup","GpuLimitsSystem","maxSampledTexturesPerShaderStage","GpuStencilSystem","setStencilReference","WGSL_ALIGN_SIZE_DATA","align","f16","createUboElementsWGSL","generateArraySyncWGSL","createUboSyncFunctionWGSL","GpuUboSystem","GpuUniformBatchPipe","_bindGroupHash","_buffers","_bindGroups","_bufferResources","_batchBuffer","COPY_SRC","_uploadBindGroups","_resetBindGroups","duplicate","_getBindGroup","getUboResource","_getBufferResource","getArrayBindGroup","getArrayBufferResource","firstBuffer","copyBufferToBuffer","topologyStringToId","PipelineSystem","_moduleCache","_bufferLayoutsCache","_bindingNamesCache","_pipeCache","_pipeStateCaches","_colorMask","_multisampleCount","_updatePipeHash","setMultisampleCount","multisampleCount","setRenderTarget","msaaSamples","_depthStencilAttachment","depthStencilAttachment","_stencilMode","_stencilState","passEncoder","_generateBufferKey","geometryLayout","shaderKey","getGraphicsStateKey","_createPipeline","_createVertexBufferLayouts","blendModes","getColorTargets","writeMask","module","_getModule","targets","primitive","multisample","depthStencil","depthWriteEnabled","depthCompare","createRenderPipeline","code","_createModule","createShaderModule","keyGen","attributeKeys","stringKey","_generateAttributeLocationsKey","bufferNamesToBind","shaderLocation","vertexBuffersLayout","bufferEntry","arrayStride","stepMode","bufferEntryAttributes","stencilStateId","multiSampleCount","GpuRenderTarget","contexts","msaaTextures","GpuRenderTargetAdaptor","baseGpuTexture","_getGpuColorTexture","backGpuTexture","copyTextureToTexture","origin","getCurrentTexture","clearValue","colorAttachments","resolveTarget","getTextureView","loadOp","storeOp","stencilLoadOp","STENCIL","depthLoadOp","DEPTH","stencilStoreOp","depthClearValue","depthStoreOp","renderPassDescriptor","gpuCommands","configure","GPUTextureUsage","TEXTURE_BINDING","RENDER_ATTACHMENT","msaaTexture","unconfigure","GpuRenderTargetSystem","GpuShaderSystem","_gpuProgramData","_createGPUProgramData","createBindGroupLayout","pipelineLayoutDesc","bindGroupLayouts","createPipelineLayout","GpuBlendModesToPixi","srcFactor","dstFactor","operation","GpuStateSystem","gpuUploadBufferImageResource","gpuTexture","total","bytesPerPixel","writeTexture","rowsPerImage","bytesPerRow","depthOrArrayLayers","blockDataMap","blockBytes","blockWidth","blockHeight","defaultBlockData","gpuUploadCompressedTextureResource","blockData","mipLevel","gpuUploadImageResource","copyExternalImageToTexture","gpuUploadVideoResource","GpuMipmapGenerator","pipelines","_getMipmapPipeline","mipmapShaderModule","mipTexture","arrayLayerCount","renderToSource","mipTextureDescriptor","bindGroupLayout","getBindGroupLayout","arrayLayer","srcView","baseMipLevel","baseArrayLayer","dstMipLevel","dstView","r","g","mipLevelSize","GpuTextureSystem","_gpuSources","_gpuSamplers","_textureViewHash","textureDescriptor","_mipmapGenerator","getTextureBindGroup","_createTextureBindGroup","uTextureMatrix","_createTextureView","getPreferredCanvasFormat","webGPUCanvas","getImageData","k","DefaultWebGPUSystems","DefaultWebGPUPipes","DefaultWebGPUAdapters","GpuBatchAdaptor","GpuMeshAdapter","GpuGraphicsAdaptor","WebGPUPipesAdaptor"],"ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148],"sources":["../../node_modules/pixi.js/lib/rendering/renderers/shared/texture/TextureStyle.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/texture/sources/TextureSource.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/texture/sources/BufferImageSource.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/texture/TextureMatrix.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/texture/Texture.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/instructions/InstructionSet.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/texture/TexturePool.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/texture/sources/CanvasSource.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/texture/sources/ImageSource.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/texture/sources/VideoSource.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/texture/utils/textureFrom.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/utils/createIdFromString.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/getTestContext.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/getMaxFragmentPrecision.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/preprocessors/setProgramName.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/GlProgram.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/preprocessors/stripVersion.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/preprocessors/ensurePrecision.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/preprocessors/addProgramDefines.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/preprocessors/insertVersion.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/shader/utils/extractAttributesFromGpuProgram.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/shader/utils/extractStructAndGroups.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/shader/const.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/shader/GpuProgram.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/shader/utils/removeStructAndGroupDuplicates.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/shader/utils/generateLayoutHash.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/shader/utils/generateGpuLayoutGroups.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/shader/types.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/shader/utils/getDefaultUniformValue.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/shader/UniformGroup.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/shader/BindGroup.mjs","../../node_modules/pixi.js/lib/rendering/renderers/types.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/shader/Shader.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/state/State.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/const.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/system/SystemRunner.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/system/AbstractRenderer.mjs","../../node_modules/pixi.js/lib/rendering/renderers/autoDetectRenderer.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/buffer/utils/fastCopy.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/state/const.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/buffer/const.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/buffer/Buffer.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/geometry/utils/ensureIsBuffer.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/geometry/Geometry.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/geometry/utils/getGeometryBounds.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/getBatchSamplersUniformGroup.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/geometry/utils/buildUvs.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/geometry/utils/transformVertices.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/texture/CanvasPool.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/buffer/const.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/buffer/GlBuffer.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/buffer/GlBufferSystem.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/context/GlContextSystem.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/ensureAttributes.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/texture/const.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/geometry/utils/getGlTypeFromFormat.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/geometry/GlGeometrySystem.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/GlBackBufferSystem.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/GlColorMaskSystem.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/GlEncoderSystem.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/GlLimitsSystem.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/GlRenderTarget.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/state/GpuStencilModesToPixi.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/GlStencilSystem.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/shader/UboSystem.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/utils/createUboElementsSTD40.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/shader/utils/uniformParsers.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/shader/utils/createUboSyncFunction.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/shader/utils/uboSyncFunctions.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/utils/generateArraySyncSTD40.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/utils/createUboSyncSTD40.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/GlUboSystem.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/renderTarget/GlRenderTargetAdaptor.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/texture/utils/getCanvasTexture.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/RenderTarget.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/RenderTargetSystem.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/isRenderingToScreen.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/renderTarget/calculateProjection.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/renderTarget/GlRenderTargetSystem.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/buffer/BufferResource.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/GlProgramData.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/compileShader.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/defaultValue.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/mapType.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/logProgramError.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/generateProgram.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/extractAttributesFromGlProgram.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/getUniformData.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/program/getUboData.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/GlShaderSystem.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/GenerateShaderSyncCode.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/utils/generateUniformsSyncTypes.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/GlUniformGroupSystem.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/shader/utils/generateUniformsSync.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/state/GlStateSystem.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/state/mapWebGLBlendModesToPixi.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/texture/GlTexture.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/texture/uploaders/glUploadBufferImageResource.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/texture/uploaders/glUploadCompressedTextureResource.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/texture/uploaders/glUploadImageResource.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/texture/uploaders/glUploadVideoResource.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/texture/utils/pixiToGlMaps.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/texture/utils/applyStyleParams.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/texture/GlTextureSystem.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/texture/utils/mapFormatToGlInternalFormat.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/texture/utils/mapFormatToGlType.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/texture/utils/mapFormatToGlFormat.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/background/BackgroundSystem.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/blendModes/BlendModePipe.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/extract/ExtractSystem.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/texture/RenderTexture.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/extract/GenerateTextureSystem.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/GlobalUniformSystem.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/SchedulerSystem.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/startup/HelloSystem.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/texture/RenderableGCSystem.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/texture/TextureGCSystem.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/view/ViewSystem.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/system/SharedSystems.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gl/WebGLRenderer.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/BindGroupSystem.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/buffer/GpuBufferSystem.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/buffer/UboBatch.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/GpuColorMaskSystem.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/GpuDeviceSystem.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/GpuEncoderSystem.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/GpuLimitsSystem.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/GpuStencilSystem.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/shader/utils/createUboElementsWGSL.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/shader/utils/generateArraySyncWGSL.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/shader/utils/createUboSyncFunctionWGSL.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/GpuUboSystem.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/GpuUniformBatchPipe.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/pipeline/PipelineSystem.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/renderTarget/GpuRenderTarget.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/renderTarget/GpuRenderTargetAdaptor.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/renderTarget/GpuRenderTargetSystem.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/shader/GpuShaderSystem.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/state/GpuBlendModesToPixi.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/state/GpuStateSystem.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/texture/uploaders/gpuUploadBufferImageResource.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/texture/uploaders/gpuUploadCompressedTextureResource.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/texture/uploaders/gpuUploadImageSource.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/texture/uploaders/gpuUploadVideoSource.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/texture/utils/GpuMipmapGenerator.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/texture/GpuTextureSystem.mjs","../../node_modules/pixi.js/lib/rendering/renderers/gpu/WebGPURenderer.mjs"],"sourcesContent":["import EventEmitter from 'eventemitter3';\nimport { uid } from '../../../../utils/data/uid.mjs';\nimport { deprecation, v8_0_0 } from '../../../../utils/logging/deprecation.mjs';\n\n\"use strict\";\nconst idHash = /* @__PURE__ */ Object.create(null);\nfunction createResourceIdFromString(value) {\n  const id = idHash[value];\n  if (id === void 0) {\n    idHash[value] = uid(\"resource\");\n  }\n  return id;\n}\nconst _TextureStyle = class _TextureStyle extends EventEmitter {\n  /**\n   * @param options - options for the style\n   */\n  constructor(options = {}) {\n    super();\n    /** @internal */\n    this._resourceType = \"textureSampler\";\n    /** @internal */\n    this._touched = 0;\n    /**\n     * Specifies the maximum anisotropy value clamp used by the sampler.\n     * Note: Most implementations support {@link TextureStyle#maxAnisotropy} values in range\n     * between 1 and 16, inclusive. The used value of {@link TextureStyle#maxAnisotropy} will\n     * be clamped to the maximum value that the platform supports.\n     * @internal\n     */\n    this._maxAnisotropy = 1;\n    /**\n     * Has the style been destroyed?\n     * @readonly\n     */\n    this.destroyed = false;\n    options = { ..._TextureStyle.defaultOptions, ...options };\n    this.addressMode = options.addressMode;\n    this.addressModeU = options.addressModeU ?? this.addressModeU;\n    this.addressModeV = options.addressModeV ?? this.addressModeV;\n    this.addressModeW = options.addressModeW ?? this.addressModeW;\n    this.scaleMode = options.scaleMode;\n    this.magFilter = options.magFilter ?? this.magFilter;\n    this.minFilter = options.minFilter ?? this.minFilter;\n    this.mipmapFilter = options.mipmapFilter ?? this.mipmapFilter;\n    this.lodMinClamp = options.lodMinClamp;\n    this.lodMaxClamp = options.lodMaxClamp;\n    this.compare = options.compare;\n    this.maxAnisotropy = options.maxAnisotropy ?? 1;\n  }\n  set addressMode(value) {\n    this.addressModeU = value;\n    this.addressModeV = value;\n    this.addressModeW = value;\n  }\n  /** setting this will set wrapModeU,wrapModeV and wrapModeW all at once! */\n  get addressMode() {\n    return this.addressModeU;\n  }\n  set wrapMode(value) {\n    deprecation(v8_0_0, \"TextureStyle.wrapMode is now TextureStyle.addressMode\");\n    this.addressMode = value;\n  }\n  get wrapMode() {\n    return this.addressMode;\n  }\n  set scaleMode(value) {\n    this.magFilter = value;\n    this.minFilter = value;\n    this.mipmapFilter = value;\n  }\n  /** setting this will set magFilter,minFilter and mipmapFilter all at once!  */\n  get scaleMode() {\n    return this.magFilter;\n  }\n  /** Specifies the maximum anisotropy value clamp used by the sampler. */\n  set maxAnisotropy(value) {\n    this._maxAnisotropy = Math.min(value, 16);\n    if (this._maxAnisotropy > 1) {\n      this.scaleMode = \"linear\";\n    }\n  }\n  get maxAnisotropy() {\n    return this._maxAnisotropy;\n  }\n  // TODO - move this to WebGL?\n  get _resourceId() {\n    return this._sharedResourceId || this._generateResourceId();\n  }\n  update() {\n    this.emit(\"change\", this);\n    this._sharedResourceId = null;\n  }\n  _generateResourceId() {\n    const bigKey = `${this.addressModeU}-${this.addressModeV}-${this.addressModeW}-${this.magFilter}-${this.minFilter}-${this.mipmapFilter}-${this.lodMinClamp}-${this.lodMaxClamp}-${this.compare}-${this._maxAnisotropy}`;\n    this._sharedResourceId = createResourceIdFromString(bigKey);\n    return this._resourceId;\n  }\n  /** Destroys the style */\n  destroy() {\n    this.destroyed = true;\n    this.emit(\"destroy\", this);\n    this.emit(\"change\", this);\n    this.removeAllListeners();\n  }\n};\n/** default options for the style */\n_TextureStyle.defaultOptions = {\n  addressMode: \"clamp-to-edge\",\n  scaleMode: \"linear\"\n};\nlet TextureStyle = _TextureStyle;\n\nexport { TextureStyle };\n//# sourceMappingURL=TextureStyle.mjs.map\n","import EventEmitter from 'eventemitter3';\nimport { isPow2 } from '../../../../../maths/misc/pow2.mjs';\nimport { definedProps } from '../../../../../scene/container/utils/definedProps.mjs';\nimport { uid } from '../../../../../utils/data/uid.mjs';\nimport { TextureStyle } from '../TextureStyle.mjs';\n\n\"use strict\";\nconst _TextureSource = class _TextureSource extends EventEmitter {\n  /**\n   * @param options - options for creating a new TextureSource\n   */\n  constructor(options = {}) {\n    super();\n    this.options = options;\n    /** unique id for this Texture source */\n    this.uid = uid(\"textureSource\");\n    /**\n     * The resource type used by this TextureSource. This is used by the bind groups to determine\n     * how to handle this resource.\n     * @internal\n     */\n    this._resourceType = \"textureSource\";\n    /**\n     * i unique resource id, used by the bind group systems.\n     * This can change if the texture is resized or its resource changes\n     * @internal\n     */\n    this._resourceId = uid(\"resource\");\n    /**\n     * this is how the backends know how to upload this texture to the GPU\n     * It changes depending on the resource type. Classes that extend TextureSource\n     * should override this property.\n     * @internal\n     */\n    this.uploadMethodId = \"unknown\";\n    /** @internal */\n    this._resolution = 1;\n    /** the pixel width of this texture source. This is the REAL pure number, not accounting resolution */\n    this.pixelWidth = 1;\n    /** the pixel height of this texture source. This is the REAL pure number, not accounting resolution */\n    this.pixelHeight = 1;\n    /**\n     * the width of this texture source, accounting for resolution\n     * eg pixelWidth 200, resolution 2, then width will be 100\n     */\n    this.width = 1;\n    /**\n     * the height of this texture source, accounting for resolution\n     * eg pixelHeight 200, resolution 2, then height will be 100\n     */\n    this.height = 1;\n    /**\n     * The number of samples of a multisample texture. This is always 1 for non-multisample textures.\n     * To enable multisample for a texture, set antialias to true\n     * @internal\n     */\n    this.sampleCount = 1;\n    /** The number of mip levels to generate for this texture. this is  overridden if autoGenerateMipmaps is true */\n    this.mipLevelCount = 1;\n    /**\n     * Should we auto generate mipmaps for this texture? This will automatically generate mipmaps\n     * for this texture when uploading to the GPU. Mipmapped textures take up more memory, but\n     * can look better when scaled down.\n     *\n     * For performance reasons, it is recommended to NOT use this with RenderTextures, as they are often updated every frame.\n     * If you do, make sure to call `updateMipmaps` after you update the texture.\n     */\n    this.autoGenerateMipmaps = false;\n    /** the format that the texture data has */\n    this.format = \"rgba8unorm\";\n    /** how many dimensions does this texture have? currently v8 only supports 2d */\n    this.dimension = \"2d\";\n    /**\n     * Only really affects RenderTextures.\n     * Should we use antialiasing for this texture. It will look better, but may impact performance as a\n     * Blit operation will be required to resolve the texture.\n     */\n    this.antialias = false;\n    /**\n     * Used by automatic texture Garbage Collection, stores last GC tick when it was bound\n     * @protected\n     */\n    this._touched = 0;\n    /**\n     * Used by the batcher to build texture batches. faster to have the variable here!\n     * @protected\n     */\n    this._batchTick = -1;\n    /**\n     * A temporary batch location for the texture batching. Here for performance reasons only!\n     * @protected\n     */\n    this._textureBindLocation = -1;\n    options = { ..._TextureSource.defaultOptions, ...options };\n    this.label = options.label ?? \"\";\n    this.resource = options.resource;\n    this.autoGarbageCollect = options.autoGarbageCollect;\n    this._resolution = options.resolution;\n    if (options.width) {\n      this.pixelWidth = options.width * this._resolution;\n    } else {\n      this.pixelWidth = this.resource ? this.resourceWidth ?? 1 : 1;\n    }\n    if (options.height) {\n      this.pixelHeight = options.height * this._resolution;\n    } else {\n      this.pixelHeight = this.resource ? this.resourceHeight ?? 1 : 1;\n    }\n    this.width = this.pixelWidth / this._resolution;\n    this.height = this.pixelHeight / this._resolution;\n    this.format = options.format;\n    this.dimension = options.dimensions;\n    this.mipLevelCount = options.mipLevelCount;\n    this.autoGenerateMipmaps = options.autoGenerateMipmaps;\n    this.sampleCount = options.sampleCount;\n    this.antialias = options.antialias;\n    this.alphaMode = options.alphaMode;\n    this.style = new TextureStyle(definedProps(options));\n    this.destroyed = false;\n    this._refreshPOT();\n  }\n  /** returns itself */\n  get source() {\n    return this;\n  }\n  /** the style of the texture */\n  get style() {\n    return this._style;\n  }\n  set style(value) {\n    if (this.style === value)\n      return;\n    this._style?.off(\"change\", this._onStyleChange, this);\n    this._style = value;\n    this._style?.on(\"change\", this._onStyleChange, this);\n    this._onStyleChange();\n  }\n  /** Specifies the maximum anisotropy value clamp used by the sampler. */\n  set maxAnisotropy(value) {\n    this._style.maxAnisotropy = value;\n  }\n  get maxAnisotropy() {\n    return this._style.maxAnisotropy;\n  }\n  /** setting this will set wrapModeU, wrapModeV and wrapModeW all at once! */\n  get addressMode() {\n    return this._style.addressMode;\n  }\n  set addressMode(value) {\n    this._style.addressMode = value;\n  }\n  /** setting this will set wrapModeU, wrapModeV and wrapModeW all at once! */\n  get repeatMode() {\n    return this._style.addressMode;\n  }\n  set repeatMode(value) {\n    this._style.addressMode = value;\n  }\n  /** Specifies the sampling behavior when the sample footprint is smaller than or equal to one texel. */\n  get magFilter() {\n    return this._style.magFilter;\n  }\n  set magFilter(value) {\n    this._style.magFilter = value;\n  }\n  /** Specifies the sampling behavior when the sample footprint is larger than one texel. */\n  get minFilter() {\n    return this._style.minFilter;\n  }\n  set minFilter(value) {\n    this._style.minFilter = value;\n  }\n  /** Specifies behavior for sampling between mipmap levels. */\n  get mipmapFilter() {\n    return this._style.mipmapFilter;\n  }\n  set mipmapFilter(value) {\n    this._style.mipmapFilter = value;\n  }\n  /** Specifies the minimum and maximum levels of detail, respectively, used internally when sampling a texture. */\n  get lodMinClamp() {\n    return this._style.lodMinClamp;\n  }\n  set lodMinClamp(value) {\n    this._style.lodMinClamp = value;\n  }\n  /** Specifies the minimum and maximum levels of detail, respectively, used internally when sampling a texture. */\n  get lodMaxClamp() {\n    return this._style.lodMaxClamp;\n  }\n  set lodMaxClamp(value) {\n    this._style.lodMaxClamp = value;\n  }\n  _onStyleChange() {\n    this.emit(\"styleChange\", this);\n  }\n  /** call this if you have modified the texture outside of the constructor */\n  update() {\n    if (this.resource) {\n      const resolution = this._resolution;\n      const didResize = this.resize(this.resourceWidth / resolution, this.resourceHeight / resolution);\n      if (didResize)\n        return;\n    }\n    this.emit(\"update\", this);\n  }\n  /** Destroys this texture source */\n  destroy() {\n    this.destroyed = true;\n    this.emit(\"destroy\", this);\n    this.emit(\"change\", this);\n    if (this._style) {\n      this._style.destroy();\n      this._style = null;\n    }\n    this.uploadMethodId = null;\n    this.resource = null;\n    this.removeAllListeners();\n  }\n  /**\n   * This will unload the Texture source from the GPU. This will free up the GPU memory\n   * As soon as it is required fore rendering, it will be re-uploaded.\n   */\n  unload() {\n    this._resourceId = uid(\"resource\");\n    this.emit(\"change\", this);\n    this.emit(\"unload\", this);\n  }\n  /** the width of the resource. This is the REAL pure number, not accounting resolution   */\n  get resourceWidth() {\n    const { resource } = this;\n    return resource.naturalWidth || resource.videoWidth || resource.displayWidth || resource.width;\n  }\n  /** the height of the resource. This is the REAL pure number, not accounting resolution */\n  get resourceHeight() {\n    const { resource } = this;\n    return resource.naturalHeight || resource.videoHeight || resource.displayHeight || resource.height;\n  }\n  /**\n   * the resolution of the texture. Changing this number, will not change the number of pixels in the actual texture\n   * but will the size of the texture when rendered.\n   *\n   * changing the resolution of this texture to 2 for example will make it appear twice as small when rendered (as pixel\n   * density will have increased)\n   */\n  get resolution() {\n    return this._resolution;\n  }\n  set resolution(resolution) {\n    if (this._resolution === resolution)\n      return;\n    this._resolution = resolution;\n    this.width = this.pixelWidth / resolution;\n    this.height = this.pixelHeight / resolution;\n  }\n  /**\n   * Resize the texture, this is handy if you want to use the texture as a render texture\n   * @param width - the new width of the texture\n   * @param height - the new height of the texture\n   * @param resolution - the new resolution of the texture\n   * @returns - if the texture was resized\n   */\n  resize(width, height, resolution) {\n    resolution || (resolution = this._resolution);\n    width || (width = this.width);\n    height || (height = this.height);\n    const newPixelWidth = Math.round(width * resolution);\n    const newPixelHeight = Math.round(height * resolution);\n    this.width = newPixelWidth / resolution;\n    this.height = newPixelHeight / resolution;\n    this._resolution = resolution;\n    if (this.pixelWidth === newPixelWidth && this.pixelHeight === newPixelHeight) {\n      return false;\n    }\n    this._refreshPOT();\n    this.pixelWidth = newPixelWidth;\n    this.pixelHeight = newPixelHeight;\n    this.emit(\"resize\", this);\n    this._resourceId = uid(\"resource\");\n    this.emit(\"change\", this);\n    return true;\n  }\n  /**\n   * Lets the renderer know that this texture has been updated and its mipmaps should be re-generated.\n   * This is only important for RenderTexture instances, as standard Texture instances will have their\n   * mipmaps generated on upload. You should call this method after you make any change to the texture\n   *\n   * The reason for this is is can be quite expensive to update mipmaps for a texture. So by default,\n   * We want you, the developer to specify when this action should happen.\n   *\n   * Generally you don't want to have mipmaps generated on Render targets that are changed every frame,\n   */\n  updateMipmaps() {\n    if (this.autoGenerateMipmaps && this.mipLevelCount > 1) {\n      this.emit(\"updateMipmaps\", this);\n    }\n  }\n  set wrapMode(value) {\n    this._style.wrapMode = value;\n  }\n  get wrapMode() {\n    return this._style.wrapMode;\n  }\n  set scaleMode(value) {\n    this._style.scaleMode = value;\n  }\n  /** setting this will set magFilter,minFilter and mipmapFilter all at once!  */\n  get scaleMode() {\n    return this._style.scaleMode;\n  }\n  /**\n   * Refresh check for isPowerOfTwo texture based on size\n   * @private\n   */\n  _refreshPOT() {\n    this.isPowerOfTwo = isPow2(this.pixelWidth) && isPow2(this.pixelHeight);\n  }\n  static test(_resource) {\n    throw new Error(\"Unimplemented\");\n  }\n};\n/** The default options used when creating a new TextureSource. override these to add your own defaults */\n_TextureSource.defaultOptions = {\n  resolution: 1,\n  format: \"bgra8unorm\",\n  alphaMode: \"premultiply-alpha-on-upload\",\n  dimensions: \"2d\",\n  mipLevelCount: 1,\n  autoGenerateMipmaps: false,\n  sampleCount: 1,\n  antialias: false,\n  autoGarbageCollect: false\n};\nlet TextureSource = _TextureSource;\n\nexport { TextureSource };\n//# sourceMappingURL=TextureSource.mjs.map\n","import { ExtensionType } from '../../../../../extensions/Extensions.mjs';\nimport { TextureSource } from './TextureSource.mjs';\n\n\"use strict\";\nclass BufferImageSource extends TextureSource {\n  constructor(options) {\n    const buffer = options.resource || new Float32Array(options.width * options.height * 4);\n    let format = options.format;\n    if (!format) {\n      if (buffer instanceof Float32Array) {\n        format = \"rgba32float\";\n      } else if (buffer instanceof Int32Array) {\n        format = \"rgba32uint\";\n      } else if (buffer instanceof Uint32Array) {\n        format = \"rgba32uint\";\n      } else if (buffer instanceof Int16Array) {\n        format = \"rgba16uint\";\n      } else if (buffer instanceof Uint16Array) {\n        format = \"rgba16uint\";\n      } else if (buffer instanceof Int8Array) {\n        format = \"bgra8unorm\";\n      } else {\n        format = \"bgra8unorm\";\n      }\n    }\n    super({\n      ...options,\n      resource: buffer,\n      format\n    });\n    this.uploadMethodId = \"buffer\";\n  }\n  static test(resource) {\n    return resource instanceof Int8Array || resource instanceof Uint8Array || resource instanceof Uint8ClampedArray || resource instanceof Int16Array || resource instanceof Uint16Array || resource instanceof Int32Array || resource instanceof Uint32Array || resource instanceof Float32Array;\n  }\n}\nBufferImageSource.extension = ExtensionType.TextureSource;\n\nexport { BufferImageSource };\n//# sourceMappingURL=BufferImageSource.mjs.map\n","import { Matrix } from '../../../../maths/matrix/Matrix.mjs';\n\n\"use strict\";\nconst tempMat = new Matrix();\nclass TextureMatrix {\n  /**\n   * @param texture - observed texture\n   * @param clampMargin - Changes frame clamping, 0.5 by default. Use -0.5 for extra border.\n   */\n  constructor(texture, clampMargin) {\n    this.mapCoord = new Matrix();\n    this.uClampFrame = new Float32Array(4);\n    this.uClampOffset = new Float32Array(2);\n    this._textureID = -1;\n    this._updateID = 0;\n    this.clampOffset = 0;\n    if (typeof clampMargin === \"undefined\") {\n      this.clampMargin = texture.width < 10 ? 0 : 0.5;\n    } else {\n      this.clampMargin = clampMargin;\n    }\n    this.isSimple = false;\n    this.texture = texture;\n  }\n  /** Texture property. */\n  get texture() {\n    return this._texture;\n  }\n  set texture(value) {\n    if (this.texture === value)\n      return;\n    this._texture?.removeListener(\"update\", this.update, this);\n    this._texture = value;\n    this._texture.addListener(\"update\", this.update, this);\n    this.update();\n  }\n  /**\n   * Multiplies uvs array to transform\n   * @param uvs - mesh uvs\n   * @param [out=uvs] - output\n   * @returns - output\n   */\n  multiplyUvs(uvs, out) {\n    if (out === void 0) {\n      out = uvs;\n    }\n    const mat = this.mapCoord;\n    for (let i = 0; i < uvs.length; i += 2) {\n      const x = uvs[i];\n      const y = uvs[i + 1];\n      out[i] = x * mat.a + y * mat.c + mat.tx;\n      out[i + 1] = x * mat.b + y * mat.d + mat.ty;\n    }\n    return out;\n  }\n  /**\n   * Updates matrices if texture was changed\n   * @returns - whether or not it was updated\n   */\n  update() {\n    const tex = this._texture;\n    this._updateID++;\n    const uvs = tex.uvs;\n    this.mapCoord.set(uvs.x1 - uvs.x0, uvs.y1 - uvs.y0, uvs.x3 - uvs.x0, uvs.y3 - uvs.y0, uvs.x0, uvs.y0);\n    const orig = tex.orig;\n    const trim = tex.trim;\n    if (trim) {\n      tempMat.set(\n        orig.width / trim.width,\n        0,\n        0,\n        orig.height / trim.height,\n        -trim.x / trim.width,\n        -trim.y / trim.height\n      );\n      this.mapCoord.append(tempMat);\n    }\n    const texBase = tex.source;\n    const frame = this.uClampFrame;\n    const margin = this.clampMargin / texBase._resolution;\n    const offset = this.clampOffset / texBase._resolution;\n    frame[0] = (tex.frame.x + margin + offset) / texBase.width;\n    frame[1] = (tex.frame.y + margin + offset) / texBase.height;\n    frame[2] = (tex.frame.x + tex.frame.width - margin + offset) / texBase.width;\n    frame[3] = (tex.frame.y + tex.frame.height - margin + offset) / texBase.height;\n    this.uClampOffset[0] = this.clampOffset / texBase.pixelWidth;\n    this.uClampOffset[1] = this.clampOffset / texBase.pixelHeight;\n    this.isSimple = tex.frame.width === texBase.width && tex.frame.height === texBase.height && tex.rotate === 0;\n    return true;\n  }\n}\n\nexport { TextureMatrix };\n//# sourceMappingURL=TextureMatrix.mjs.map\n","import EventEmitter from 'eventemitter3';\nimport { groupD8 } from '../../../../maths/matrix/groupD8.mjs';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle.mjs';\nimport { uid } from '../../../../utils/data/uid.mjs';\nimport { deprecation, v8_0_0 } from '../../../../utils/logging/deprecation.mjs';\nimport { NOOP } from '../../../../utils/misc/NOOP.mjs';\nimport { BufferImageSource } from './sources/BufferImageSource.mjs';\nimport { TextureSource } from './sources/TextureSource.mjs';\nimport { TextureMatrix } from './TextureMatrix.mjs';\n\n\"use strict\";\nclass Texture extends EventEmitter {\n  /**\n   * @param {TextureOptions} options - Options for the texture\n   */\n  constructor({\n    source,\n    label,\n    frame,\n    orig,\n    trim,\n    defaultAnchor,\n    defaultBorders,\n    rotate,\n    dynamic\n  } = {}) {\n    super();\n    /** unique id for this texture */\n    this.uid = uid(\"texture\");\n    /** A uvs object based on the given frame and the texture source */\n    this.uvs = { x0: 0, y0: 0, x1: 0, y1: 0, x2: 0, y2: 0, x3: 0, y3: 0 };\n    /**\n     * This is the area of the BaseTexture image to actually copy to the Canvas / WebGL when rendering,\n     * irrespective of the actual frame size or placement (which can be influenced by trimmed texture atlases)\n     */\n    this.frame = new Rectangle();\n    /**\n     * Does this Texture have any frame data assigned to it?\n     *\n     * This mode is enabled automatically if no frame was passed inside constructor.\n     *\n     * In this mode texture is subscribed to baseTexture events, and fires `update` on any change.\n     *\n     * Beware, after loading or resize of baseTexture event can fired two times!\n     * If you want more control, subscribe on baseTexture itself.\n     * @example\n     * texture.on('update', () => {});\n     */\n    this.noFrame = false;\n    /**\n     * Set to true if you plan on modifying the uvs of this texture.\n     * When this is the case, sprites and other objects using the texture will\n     * make sure to listen for changes to the uvs and update their vertices accordingly.\n     */\n    this.dynamic = false;\n    /** is it a texture? yes! used for type checking */\n    this.isTexture = true;\n    this.label = label;\n    this.source = source?.source ?? new TextureSource();\n    this.noFrame = !frame;\n    if (frame) {\n      this.frame.copyFrom(frame);\n    } else {\n      const { width, height } = this._source;\n      this.frame.width = width;\n      this.frame.height = height;\n    }\n    this.orig = orig || this.frame;\n    this.trim = trim;\n    this.rotate = rotate ?? 0;\n    this.defaultAnchor = defaultAnchor;\n    this.defaultBorders = defaultBorders;\n    this.destroyed = false;\n    this.dynamic = dynamic || false;\n    this.updateUvs();\n  }\n  set source(value) {\n    if (this._source) {\n      this._source.off(\"resize\", this.update, this);\n    }\n    this._source = value;\n    value.on(\"resize\", this.update, this);\n    this.emit(\"update\", this);\n  }\n  /** the underlying source of the texture (equivalent of baseTexture in v7) */\n  get source() {\n    return this._source;\n  }\n  /** returns a TextureMatrix instance for this texture. By default, that object is not created because its heavy. */\n  get textureMatrix() {\n    if (!this._textureMatrix) {\n      this._textureMatrix = new TextureMatrix(this);\n    }\n    return this._textureMatrix;\n  }\n  /** The width of the Texture in pixels. */\n  get width() {\n    return this.orig.width;\n  }\n  /** The height of the Texture in pixels. */\n  get height() {\n    return this.orig.height;\n  }\n  /** Call this function when you have modified the frame of this texture. */\n  updateUvs() {\n    const { uvs, frame } = this;\n    const { width, height } = this._source;\n    const nX = frame.x / width;\n    const nY = frame.y / height;\n    const nW = frame.width / width;\n    const nH = frame.height / height;\n    let rotate = this.rotate;\n    if (rotate) {\n      const w2 = nW / 2;\n      const h2 = nH / 2;\n      const cX = nX + w2;\n      const cY = nY + h2;\n      rotate = groupD8.add(rotate, groupD8.NW);\n      uvs.x0 = cX + w2 * groupD8.uX(rotate);\n      uvs.y0 = cY + h2 * groupD8.uY(rotate);\n      rotate = groupD8.add(rotate, 2);\n      uvs.x1 = cX + w2 * groupD8.uX(rotate);\n      uvs.y1 = cY + h2 * groupD8.uY(rotate);\n      rotate = groupD8.add(rotate, 2);\n      uvs.x2 = cX + w2 * groupD8.uX(rotate);\n      uvs.y2 = cY + h2 * groupD8.uY(rotate);\n      rotate = groupD8.add(rotate, 2);\n      uvs.x3 = cX + w2 * groupD8.uX(rotate);\n      uvs.y3 = cY + h2 * groupD8.uY(rotate);\n    } else {\n      uvs.x0 = nX;\n      uvs.y0 = nY;\n      uvs.x1 = nX + nW;\n      uvs.y1 = nY;\n      uvs.x2 = nX + nW;\n      uvs.y2 = nY + nH;\n      uvs.x3 = nX;\n      uvs.y3 = nY + nH;\n    }\n  }\n  /**\n   * Destroys this texture\n   * @param destroySource - Destroy the source when the texture is destroyed.\n   */\n  destroy(destroySource = false) {\n    if (this._source) {\n      if (destroySource) {\n        this._source.destroy();\n        this._source = null;\n      }\n    }\n    this._textureMatrix = null;\n    this.destroyed = true;\n    this.emit(\"destroy\", this);\n    this.removeAllListeners();\n  }\n  /**\n   * Call this if you have modified the `texture outside` of the constructor.\n   *\n   * If you have modified this texture's source, you must separately call `texture.source.update()` to see those changes.\n   */\n  update() {\n    if (this.noFrame) {\n      this.frame.width = this._source.width;\n      this.frame.height = this._source.height;\n    }\n    this.updateUvs();\n    this.emit(\"update\", this);\n  }\n  /** @deprecated since 8.0.0 */\n  get baseTexture() {\n    deprecation(v8_0_0, \"Texture.baseTexture is now Texture.source\");\n    return this._source;\n  }\n}\nTexture.EMPTY = new Texture({\n  label: \"EMPTY\",\n  source: new TextureSource({\n    label: \"EMPTY\"\n  })\n});\nTexture.EMPTY.destroy = NOOP;\nTexture.WHITE = new Texture({\n  source: new BufferImageSource({\n    resource: new Uint8Array([255, 255, 255, 255]),\n    width: 1,\n    height: 1,\n    alphaMode: \"premultiply-alpha-on-upload\",\n    label: \"WHITE\"\n  }),\n  label: \"WHITE\"\n});\nTexture.WHITE.destroy = NOOP;\n\nexport { Texture };\n//# sourceMappingURL=Texture.mjs.map\n","import { uid } from '../../../../utils/data/uid.mjs';\n\n\"use strict\";\nclass InstructionSet {\n  constructor() {\n    /** a unique id for this instruction set used through the renderer */\n    this.uid = uid(\"instructionSet\");\n    /** the array of instructions */\n    this.instructions = [];\n    /** the actual size of the array (any instructions passed this should be ignored) */\n    this.instructionSize = 0;\n    this.renderables = [];\n    /** used by the garbage collector to track when the instruction set was last used */\n    this.gcTick = 0;\n  }\n  /** reset the instruction set so it can be reused set size back to 0 */\n  reset() {\n    this.instructionSize = 0;\n  }\n  /**\n   * Destroy the instruction set, clearing the instructions and renderables.\n   * @internal\n   */\n  destroy() {\n    this.instructions.length = 0;\n    this.renderables.length = 0;\n    this.renderPipes = null;\n    this.gcTick = 0;\n  }\n  /**\n   * Add an instruction to the set\n   * @param instruction - add an instruction to the set\n   */\n  add(instruction) {\n    this.instructions[this.instructionSize++] = instruction;\n  }\n  /**\n   * Log the instructions to the console (for debugging)\n   * @internal\n   */\n  log() {\n    this.instructions.length = this.instructionSize;\n    console.table(this.instructions, [\"type\", \"action\"]);\n  }\n}\n\nexport { InstructionSet };\n//# sourceMappingURL=InstructionSet.mjs.map\n","import { nextPow2 } from '../../../../maths/misc/pow2.mjs';\nimport { GlobalResourceRegistry } from '../../../../utils/pool/GlobalResourceRegistry.mjs';\nimport { TextureSource } from './sources/TextureSource.mjs';\nimport { Texture } from './Texture.mjs';\nimport { TextureStyle } from './TextureStyle.mjs';\n\n\"use strict\";\nlet count = 0;\nclass TexturePoolClass {\n  /**\n   * @param textureOptions - options that will be passed to BaseRenderTexture constructor\n   * @param {SCALE_MODE} [textureOptions.scaleMode] - See {@link SCALE_MODE} for possible values.\n   */\n  constructor(textureOptions) {\n    this._poolKeyHash = /* @__PURE__ */ Object.create(null);\n    this._texturePool = {};\n    this.textureOptions = textureOptions || {};\n    this.enableFullScreen = false;\n    this.textureStyle = new TextureStyle(this.textureOptions);\n  }\n  /**\n   * Creates texture with params that were specified in pool constructor.\n   * @param pixelWidth - Width of texture in pixels.\n   * @param pixelHeight - Height of texture in pixels.\n   * @param antialias\n   */\n  createTexture(pixelWidth, pixelHeight, antialias) {\n    const textureSource = new TextureSource({\n      ...this.textureOptions,\n      width: pixelWidth,\n      height: pixelHeight,\n      resolution: 1,\n      antialias,\n      autoGarbageCollect: false\n    });\n    return new Texture({\n      source: textureSource,\n      label: `texturePool_${count++}`\n    });\n  }\n  /**\n   * Gets a Power-of-Two render texture or fullScreen texture\n   * @param frameWidth - The minimum width of the render texture.\n   * @param frameHeight - The minimum height of the render texture.\n   * @param resolution - The resolution of the render texture.\n   * @param antialias\n   * @returns The new render texture.\n   */\n  getOptimalTexture(frameWidth, frameHeight, resolution = 1, antialias) {\n    let po2Width = Math.ceil(frameWidth * resolution - 1e-6);\n    let po2Height = Math.ceil(frameHeight * resolution - 1e-6);\n    po2Width = nextPow2(po2Width);\n    po2Height = nextPow2(po2Height);\n    const key = (po2Width << 17) + (po2Height << 1) + (antialias ? 1 : 0);\n    if (!this._texturePool[key]) {\n      this._texturePool[key] = [];\n    }\n    let texture = this._texturePool[key].pop();\n    if (!texture) {\n      texture = this.createTexture(po2Width, po2Height, antialias);\n    }\n    texture.source._resolution = resolution;\n    texture.source.width = po2Width / resolution;\n    texture.source.height = po2Height / resolution;\n    texture.source.pixelWidth = po2Width;\n    texture.source.pixelHeight = po2Height;\n    texture.frame.x = 0;\n    texture.frame.y = 0;\n    texture.frame.width = frameWidth;\n    texture.frame.height = frameHeight;\n    texture.updateUvs();\n    this._poolKeyHash[texture.uid] = key;\n    return texture;\n  }\n  /**\n   * Gets extra texture of the same size as input renderTexture\n   * @param texture - The texture to check what size it is.\n   * @param antialias - Whether to use antialias.\n   * @returns A texture that is a power of two\n   */\n  getSameSizeTexture(texture, antialias = false) {\n    const source = texture.source;\n    return this.getOptimalTexture(texture.width, texture.height, source._resolution, antialias);\n  }\n  /**\n   * Place a render texture back into the pool. Optionally reset the style of the texture to the default texture style.\n   * useful if you modified the style of the texture after getting it from the pool.\n   * @param renderTexture - The renderTexture to free\n   * @param resetStyle - Whether to reset the style of the texture to the default texture style\n   */\n  returnTexture(renderTexture, resetStyle = false) {\n    const key = this._poolKeyHash[renderTexture.uid];\n    if (resetStyle) {\n      renderTexture.source.style = this.textureStyle;\n    }\n    this._texturePool[key].push(renderTexture);\n  }\n  /**\n   * Clears the pool.\n   * @param destroyTextures - Destroy all stored textures.\n   */\n  clear(destroyTextures) {\n    destroyTextures = destroyTextures !== false;\n    if (destroyTextures) {\n      for (const i in this._texturePool) {\n        const textures = this._texturePool[i];\n        if (textures) {\n          for (let j = 0; j < textures.length; j++) {\n            textures[j].destroy(true);\n          }\n        }\n      }\n    }\n    this._texturePool = {};\n  }\n}\nconst TexturePool = new TexturePoolClass();\nGlobalResourceRegistry.register(TexturePool);\n\nexport { TexturePool, TexturePoolClass };\n//# sourceMappingURL=TexturePool.mjs.map\n","import { DOMAdapter } from '../../../../../environment/adapter.mjs';\nimport { ExtensionType } from '../../../../../extensions/Extensions.mjs';\nimport { TextureSource } from './TextureSource.mjs';\n\n\"use strict\";\nclass CanvasSource extends TextureSource {\n  constructor(options) {\n    if (!options.resource) {\n      options.resource = DOMAdapter.get().createCanvas();\n    }\n    if (!options.width) {\n      options.width = options.resource.width;\n      if (!options.autoDensity) {\n        options.width /= options.resolution;\n      }\n    }\n    if (!options.height) {\n      options.height = options.resource.height;\n      if (!options.autoDensity) {\n        options.height /= options.resolution;\n      }\n    }\n    super(options);\n    this.uploadMethodId = \"image\";\n    this.autoDensity = options.autoDensity;\n    this.resizeCanvas();\n    this.transparent = !!options.transparent;\n  }\n  resizeCanvas() {\n    if (this.autoDensity && \"style\" in this.resource) {\n      this.resource.style.width = `${this.width}px`;\n      this.resource.style.height = `${this.height}px`;\n    }\n    if (this.resource.width !== this.pixelWidth || this.resource.height !== this.pixelHeight) {\n      this.resource.width = this.pixelWidth;\n      this.resource.height = this.pixelHeight;\n    }\n  }\n  resize(width = this.width, height = this.height, resolution = this._resolution) {\n    const didResize = super.resize(width, height, resolution);\n    if (didResize) {\n      this.resizeCanvas();\n    }\n    return didResize;\n  }\n  static test(resource) {\n    return globalThis.HTMLCanvasElement && resource instanceof HTMLCanvasElement || globalThis.OffscreenCanvas && resource instanceof OffscreenCanvas;\n  }\n  /**\n   * Returns the 2D rendering context for the canvas.\n   * Caches the context after creating it.\n   * @returns The 2D rendering context of the canvas.\n   */\n  get context2D() {\n    return this._context2D || (this._context2D = this.resource.getContext(\"2d\"));\n  }\n}\nCanvasSource.extension = ExtensionType.TextureSource;\n\nexport { CanvasSource };\n//# sourceMappingURL=CanvasSource.mjs.map\n","import { ExtensionType } from '../../../../../extensions/Extensions.mjs';\nimport { TextureSource } from './TextureSource.mjs';\n\n\"use strict\";\nclass ImageSource extends TextureSource {\n  constructor(options) {\n    super(options);\n    this.uploadMethodId = \"image\";\n    this.autoGarbageCollect = true;\n  }\n  static test(resource) {\n    return globalThis.HTMLImageElement && resource instanceof HTMLImageElement || typeof ImageBitmap !== \"undefined\" && resource instanceof ImageBitmap || globalThis.VideoFrame && resource instanceof VideoFrame;\n  }\n}\nImageSource.extension = ExtensionType.TextureSource;\n\nexport { ImageSource };\n//# sourceMappingURL=ImageSource.mjs.map\n","import { ExtensionType } from '../../../../../extensions/Extensions.mjs';\nimport { Ticker } from '../../../../../ticker/Ticker.mjs';\nimport { detectVideoAlphaMode } from '../../../../../utils/browser/detectVideoAlphaMode.mjs';\nimport { TextureSource } from './TextureSource.mjs';\n\n\"use strict\";\nconst _VideoSource = class _VideoSource extends TextureSource {\n  constructor(options) {\n    super(options);\n    // Public\n    /** Whether or not the video is ready to play. */\n    this.isReady = false;\n    /** The upload method for this texture. */\n    this.uploadMethodId = \"video\";\n    options = {\n      ..._VideoSource.defaultOptions,\n      ...options\n    };\n    this._autoUpdate = true;\n    this._isConnectedToTicker = false;\n    this._updateFPS = options.updateFPS || 0;\n    this._msToNextUpdate = 0;\n    this.autoPlay = options.autoPlay !== false;\n    this.alphaMode = options.alphaMode ?? \"premultiply-alpha-on-upload\";\n    this._videoFrameRequestCallback = this._videoFrameRequestCallback.bind(this);\n    this._videoFrameRequestCallbackHandle = null;\n    this._load = null;\n    this._resolve = null;\n    this._reject = null;\n    this._onCanPlay = this._onCanPlay.bind(this);\n    this._onCanPlayThrough = this._onCanPlayThrough.bind(this);\n    this._onError = this._onError.bind(this);\n    this._onPlayStart = this._onPlayStart.bind(this);\n    this._onPlayStop = this._onPlayStop.bind(this);\n    this._onSeeked = this._onSeeked.bind(this);\n    if (options.autoLoad !== false) {\n      void this.load();\n    }\n  }\n  /** Update the video frame if the source is not destroyed and meets certain conditions. */\n  updateFrame() {\n    if (this.destroyed) {\n      return;\n    }\n    if (this._updateFPS) {\n      const elapsedMS = Ticker.shared.elapsedMS * this.resource.playbackRate;\n      this._msToNextUpdate = Math.floor(this._msToNextUpdate - elapsedMS);\n    }\n    if (!this._updateFPS || this._msToNextUpdate <= 0) {\n      this._msToNextUpdate = this._updateFPS ? Math.floor(1e3 / this._updateFPS) : 0;\n    }\n    if (this.isValid) {\n      this.update();\n    }\n  }\n  /** Callback to update the video frame and potentially request the next frame update. */\n  _videoFrameRequestCallback() {\n    this.updateFrame();\n    if (this.destroyed) {\n      this._videoFrameRequestCallbackHandle = null;\n    } else {\n      this._videoFrameRequestCallbackHandle = this.resource.requestVideoFrameCallback(\n        this._videoFrameRequestCallback\n      );\n    }\n  }\n  /**\n   * Checks if the resource has valid dimensions.\n   * @returns {boolean} True if width and height are set, otherwise false.\n   */\n  get isValid() {\n    return !!this.resource.videoWidth && !!this.resource.videoHeight;\n  }\n  /**\n   * Start preloading the video resource.\n   * @returns {Promise<this>} Handle the validate event\n   */\n  async load() {\n    if (this._load) {\n      return this._load;\n    }\n    const source = this.resource;\n    const options = this.options;\n    if ((source.readyState === source.HAVE_ENOUGH_DATA || source.readyState === source.HAVE_FUTURE_DATA) && source.width && source.height) {\n      source.complete = true;\n    }\n    source.addEventListener(\"play\", this._onPlayStart);\n    source.addEventListener(\"pause\", this._onPlayStop);\n    source.addEventListener(\"seeked\", this._onSeeked);\n    if (!this._isSourceReady()) {\n      if (!options.preload) {\n        source.addEventListener(\"canplay\", this._onCanPlay);\n      }\n      source.addEventListener(\"canplaythrough\", this._onCanPlayThrough);\n      source.addEventListener(\"error\", this._onError, true);\n    } else {\n      this._mediaReady();\n    }\n    this.alphaMode = await detectVideoAlphaMode();\n    this._load = new Promise((resolve, reject) => {\n      if (this.isValid) {\n        resolve(this);\n      } else {\n        this._resolve = resolve;\n        this._reject = reject;\n        if (options.preloadTimeoutMs !== void 0) {\n          this._preloadTimeout = setTimeout(() => {\n            this._onError(new ErrorEvent(`Preload exceeded timeout of ${options.preloadTimeoutMs}ms`));\n          });\n        }\n        source.load();\n      }\n    });\n    return this._load;\n  }\n  /**\n   * Handle video error events.\n   * @param event - The error event\n   */\n  _onError(event) {\n    this.resource.removeEventListener(\"error\", this._onError, true);\n    this.emit(\"error\", event);\n    if (this._reject) {\n      this._reject(event);\n      this._reject = null;\n      this._resolve = null;\n    }\n  }\n  /**\n   * Checks if the underlying source is playing.\n   * @returns True if playing.\n   */\n  _isSourcePlaying() {\n    const source = this.resource;\n    return !source.paused && !source.ended;\n  }\n  /**\n   * Checks if the underlying source is ready for playing.\n   * @returns True if ready.\n   */\n  _isSourceReady() {\n    const source = this.resource;\n    return source.readyState > 2;\n  }\n  /** Runs the update loop when the video is ready to play. */\n  _onPlayStart() {\n    if (!this.isValid) {\n      this._mediaReady();\n    }\n    this._configureAutoUpdate();\n  }\n  /** Stops the update loop when a pause event is triggered. */\n  _onPlayStop() {\n    this._configureAutoUpdate();\n  }\n  /** Handles behavior when the video completes seeking to the current playback position. */\n  _onSeeked() {\n    if (this._autoUpdate && !this._isSourcePlaying()) {\n      this._msToNextUpdate = 0;\n      this.updateFrame();\n      this._msToNextUpdate = 0;\n    }\n  }\n  _onCanPlay() {\n    const source = this.resource;\n    source.removeEventListener(\"canplay\", this._onCanPlay);\n    this._mediaReady();\n  }\n  _onCanPlayThrough() {\n    const source = this.resource;\n    source.removeEventListener(\"canplaythrough\", this._onCanPlay);\n    if (this._preloadTimeout) {\n      clearTimeout(this._preloadTimeout);\n      this._preloadTimeout = void 0;\n    }\n    this._mediaReady();\n  }\n  /** Fired when the video is loaded and ready to play. */\n  _mediaReady() {\n    const source = this.resource;\n    if (this.isValid) {\n      this.isReady = true;\n      this.resize(source.videoWidth, source.videoHeight);\n    }\n    this._msToNextUpdate = 0;\n    this.updateFrame();\n    this._msToNextUpdate = 0;\n    if (this._resolve) {\n      this._resolve(this);\n      this._resolve = null;\n      this._reject = null;\n    }\n    if (this._isSourcePlaying()) {\n      this._onPlayStart();\n    } else if (this.autoPlay) {\n      void this.resource.play();\n    }\n  }\n  /** Cleans up resources and event listeners associated with this texture. */\n  destroy() {\n    this._configureAutoUpdate();\n    const source = this.resource;\n    if (source) {\n      source.removeEventListener(\"play\", this._onPlayStart);\n      source.removeEventListener(\"pause\", this._onPlayStop);\n      source.removeEventListener(\"seeked\", this._onSeeked);\n      source.removeEventListener(\"canplay\", this._onCanPlay);\n      source.removeEventListener(\"canplaythrough\", this._onCanPlayThrough);\n      source.removeEventListener(\"error\", this._onError, true);\n      source.pause();\n      source.src = \"\";\n      source.load();\n    }\n    super.destroy();\n  }\n  /** Should the base texture automatically update itself, set to true by default. */\n  get autoUpdate() {\n    return this._autoUpdate;\n  }\n  set autoUpdate(value) {\n    if (value !== this._autoUpdate) {\n      this._autoUpdate = value;\n      this._configureAutoUpdate();\n    }\n  }\n  /**\n   * How many times a second to update the texture from the video.\n   * Leave at 0 to update at every render.\n   * A lower fps can help performance, as updating the texture at 60fps on a 30ps video may not be efficient.\n   */\n  get updateFPS() {\n    return this._updateFPS;\n  }\n  set updateFPS(value) {\n    if (value !== this._updateFPS) {\n      this._updateFPS = value;\n      this._configureAutoUpdate();\n    }\n  }\n  /**\n   * Configures the updating mechanism based on the current state and settings.\n   *\n   * This method decides between using the browser's native video frame callback or a custom ticker\n   * for updating the video frame. It ensures optimal performance and responsiveness\n   * based on the video's state, playback status, and the desired frames-per-second setting.\n   *\n   * - If `_autoUpdate` is enabled and the video source is playing:\n   *   - It will prefer the native video frame callback if available and no specific FPS is set.\n   *   - Otherwise, it will use a custom ticker for manual updates.\n   * - If `_autoUpdate` is disabled or the video isn't playing, any active update mechanisms are halted.\n   */\n  _configureAutoUpdate() {\n    if (this._autoUpdate && this._isSourcePlaying()) {\n      if (!this._updateFPS && this.resource.requestVideoFrameCallback) {\n        if (this._isConnectedToTicker) {\n          Ticker.shared.remove(this.updateFrame, this);\n          this._isConnectedToTicker = false;\n          this._msToNextUpdate = 0;\n        }\n        if (this._videoFrameRequestCallbackHandle === null) {\n          this._videoFrameRequestCallbackHandle = this.resource.requestVideoFrameCallback(\n            this._videoFrameRequestCallback\n          );\n        }\n      } else {\n        if (this._videoFrameRequestCallbackHandle !== null) {\n          this.resource.cancelVideoFrameCallback(this._videoFrameRequestCallbackHandle);\n          this._videoFrameRequestCallbackHandle = null;\n        }\n        if (!this._isConnectedToTicker) {\n          Ticker.shared.add(this.updateFrame, this);\n          this._isConnectedToTicker = true;\n          this._msToNextUpdate = 0;\n        }\n      }\n    } else {\n      if (this._videoFrameRequestCallbackHandle !== null) {\n        this.resource.cancelVideoFrameCallback(this._videoFrameRequestCallbackHandle);\n        this._videoFrameRequestCallbackHandle = null;\n      }\n      if (this._isConnectedToTicker) {\n        Ticker.shared.remove(this.updateFrame, this);\n        this._isConnectedToTicker = false;\n        this._msToNextUpdate = 0;\n      }\n    }\n  }\n  static test(resource) {\n    return globalThis.HTMLVideoElement && resource instanceof HTMLVideoElement;\n  }\n};\n_VideoSource.extension = ExtensionType.TextureSource;\n/** The default options for video sources. */\n_VideoSource.defaultOptions = {\n  ...TextureSource.defaultOptions,\n  /** If true, the video will start loading immediately. */\n  autoLoad: true,\n  /** If true, the video will start playing as soon as it is loaded. */\n  autoPlay: true,\n  /** The number of times a second to update the texture from the video. Leave at 0 to update at every render. */\n  updateFPS: 0,\n  /** If true, the video will be loaded with the `crossorigin` attribute. */\n  crossorigin: true,\n  /** If true, the video will loop when it ends. */\n  loop: false,\n  /** If true, the video will be muted. */\n  muted: true,\n  /** If true, the video will play inline. */\n  playsinline: true,\n  /** If true, the video will be preloaded. */\n  preload: false\n};\n/**\n * Map of video MIME types that can't be directly derived from file extensions.\n * @readonly\n */\n_VideoSource.MIME_TYPES = {\n  ogv: \"video/ogg\",\n  mov: \"video/quicktime\",\n  m4v: \"video/mp4\"\n};\nlet VideoSource = _VideoSource;\n\nexport { VideoSource };\n//# sourceMappingURL=VideoSource.mjs.map\n","import { Cache } from '../../../../../assets/cache/Cache.mjs';\nimport { extensions, ExtensionType } from '../../../../../extensions/Extensions.mjs';\nimport { TextureSource } from '../sources/TextureSource.mjs';\nimport { Texture } from '../Texture.mjs';\n\n\"use strict\";\nconst sources = [];\nextensions.handleByList(ExtensionType.TextureSource, sources);\nfunction autoDetectSource(options = {}) {\n  return textureSourceFrom(options);\n}\nfunction textureSourceFrom(options = {}) {\n  const hasResource = options && options.resource;\n  const res = hasResource ? options.resource : options;\n  const opts = hasResource ? options : { resource: options };\n  for (let i = 0; i < sources.length; i++) {\n    const Source = sources[i];\n    if (Source.test(res)) {\n      return new Source(opts);\n    }\n  }\n  throw new Error(`Could not find a source type for resource: ${opts.resource}`);\n}\nfunction resourceToTexture(options = {}, skipCache = false) {\n  const hasResource = options && options.resource;\n  const resource = hasResource ? options.resource : options;\n  const opts = hasResource ? options : { resource: options };\n  if (!skipCache && Cache.has(resource)) {\n    return Cache.get(resource);\n  }\n  const texture = new Texture({ source: textureSourceFrom(opts) });\n  texture.on(\"destroy\", () => {\n    if (Cache.has(resource)) {\n      Cache.remove(resource);\n    }\n  });\n  if (!skipCache) {\n    Cache.set(resource, texture);\n  }\n  return texture;\n}\nfunction textureFrom(id, skipCache = false) {\n  if (typeof id === \"string\") {\n    return Cache.get(id);\n  } else if (id instanceof TextureSource) {\n    return new Texture({ source: id });\n  }\n  return resourceToTexture(id, skipCache);\n}\nTexture.from = textureFrom;\nTextureSource.from = textureSourceFrom;\n\nexport { autoDetectSource, resourceToTexture, textureFrom };\n//# sourceMappingURL=textureFrom.mjs.map\n","\"use strict\";\nconst idCounts = /* @__PURE__ */ Object.create(null);\nconst idHash = /* @__PURE__ */ Object.create(null);\nfunction createIdFromString(value, groupId) {\n  let id = idHash[value];\n  if (id === void 0) {\n    if (idCounts[groupId] === void 0) {\n      idCounts[groupId] = 1;\n    }\n    idHash[value] = id = idCounts[groupId]++;\n  }\n  return id;\n}\n\nexport { createIdFromString };\n//# sourceMappingURL=createIdFromString.mjs.map\n","import { DOMAdapter } from '../../../../../environment/adapter.mjs';\n\n\"use strict\";\nlet context;\nfunction getTestContext() {\n  if (!context || context?.isContextLost()) {\n    const canvas = DOMAdapter.get().createCanvas();\n    context = canvas.getContext(\"webgl\", {});\n  }\n  return context;\n}\n\nexport { getTestContext };\n//# sourceMappingURL=getTestContext.mjs.map\n","import { getTestContext } from './getTestContext.mjs';\n\n\"use strict\";\nlet maxFragmentPrecision;\nfunction getMaxFragmentPrecision() {\n  if (!maxFragmentPrecision) {\n    maxFragmentPrecision = \"mediump\";\n    const gl = getTestContext();\n    if (gl) {\n      if (gl.getShaderPrecisionFormat) {\n        const shaderFragment = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT);\n        maxFragmentPrecision = shaderFragment.precision ? \"highp\" : \"mediump\";\n      }\n    }\n  }\n  return maxFragmentPrecision;\n}\n\nexport { getMaxFragmentPrecision };\n//# sourceMappingURL=getMaxFragmentPrecision.mjs.map\n","\"use strict\";\nconst fragmentNameCache = {};\nconst VertexNameCache = {};\nfunction setProgramName(src, { name = `pixi-program` }, isFragment = true) {\n  name = name.replace(/\\s+/g, \"-\");\n  name += isFragment ? \"-fragment\" : \"-vertex\";\n  const nameCache = isFragment ? fragmentNameCache : VertexNameCache;\n  if (nameCache[name]) {\n    nameCache[name]++;\n    name += `-${nameCache[name]}`;\n  } else {\n    nameCache[name] = 1;\n  }\n  if (src.indexOf(\"#define SHADER_NAME\") !== -1)\n    return src;\n  const shaderName = `#define SHADER_NAME ${name}`;\n  return `${shaderName}\n${src}`;\n}\n\nexport { setProgramName };\n//# sourceMappingURL=setProgramName.mjs.map\n","import { createIdFromString } from '../../shared/utils/createIdFromString.mjs';\nimport { getMaxFragmentPrecision } from './program/getMaxFragmentPrecision.mjs';\nimport { addProgramDefines } from './program/preprocessors/addProgramDefines.mjs';\nimport { ensurePrecision } from './program/preprocessors/ensurePrecision.mjs';\nimport { insertVersion } from './program/preprocessors/insertVersion.mjs';\nimport { setProgramName } from './program/preprocessors/setProgramName.mjs';\nimport { stripVersion } from './program/preprocessors/stripVersion.mjs';\n\n\"use strict\";\nconst processes = {\n  // strips any version headers..\n  stripVersion,\n  // adds precision string if not already present\n  ensurePrecision,\n  // add some defines if WebGL1 to make it more compatible with WebGL2 shaders\n  addProgramDefines,\n  // add the program name to the shader\n  setProgramName,\n  // add the version string to the shader header\n  insertVersion\n};\nconst programCache = /* @__PURE__ */ Object.create(null);\nconst _GlProgram = class _GlProgram {\n  /**\n   * Creates a shiny new GlProgram. Used by WebGL renderer.\n   * @param options - The options for the program.\n   */\n  constructor(options) {\n    options = { ..._GlProgram.defaultOptions, ...options };\n    const isES300 = options.fragment.indexOf(\"#version 300 es\") !== -1;\n    const preprocessorOptions = {\n      stripVersion: isES300,\n      ensurePrecision: {\n        requestedFragmentPrecision: options.preferredFragmentPrecision,\n        requestedVertexPrecision: options.preferredVertexPrecision,\n        maxSupportedVertexPrecision: \"highp\",\n        maxSupportedFragmentPrecision: getMaxFragmentPrecision()\n      },\n      setProgramName: {\n        name: options.name\n      },\n      addProgramDefines: isES300,\n      insertVersion: isES300\n    };\n    let fragment = options.fragment;\n    let vertex = options.vertex;\n    Object.keys(processes).forEach((processKey) => {\n      const processOptions = preprocessorOptions[processKey];\n      fragment = processes[processKey](fragment, processOptions, true);\n      vertex = processes[processKey](vertex, processOptions, false);\n    });\n    this.fragment = fragment;\n    this.vertex = vertex;\n    this.transformFeedbackVaryings = options.transformFeedbackVaryings;\n    this._key = createIdFromString(`${this.vertex}:${this.fragment}`, \"gl-program\");\n  }\n  /** destroys the program */\n  destroy() {\n    this.fragment = null;\n    this.vertex = null;\n    this._attributeData = null;\n    this._uniformData = null;\n    this._uniformBlockData = null;\n    this.transformFeedbackVaryings = null;\n    programCache[this._cacheKey] = null;\n  }\n  /**\n   * Helper function that creates a program for a given source.\n   * It will check the program cache if the program has already been created.\n   * If it has that one will be returned, if not a new one will be created and cached.\n   * @param options - The options for the program.\n   * @returns A program using the same source\n   */\n  static from(options) {\n    const key = `${options.vertex}:${options.fragment}`;\n    if (!programCache[key]) {\n      programCache[key] = new _GlProgram(options);\n      programCache[key]._cacheKey = key;\n    }\n    return programCache[key];\n  }\n};\n/** The default options used by the program. */\n_GlProgram.defaultOptions = {\n  preferredVertexPrecision: \"highp\",\n  preferredFragmentPrecision: \"mediump\"\n};\nlet GlProgram = _GlProgram;\n\nexport { GlProgram };\n//# sourceMappingURL=GlProgram.mjs.map\n","\"use strict\";\nfunction stripVersion(src, isES300) {\n  if (!isES300)\n    return src;\n  return src.replace(\"#version 300 es\", \"\");\n}\n\nexport { stripVersion };\n//# sourceMappingURL=stripVersion.mjs.map\n","\"use strict\";\nfunction ensurePrecision(src, options, isFragment) {\n  const maxSupportedPrecision = isFragment ? options.maxSupportedFragmentPrecision : options.maxSupportedVertexPrecision;\n  if (src.substring(0, 9) !== \"precision\") {\n    let precision = isFragment ? options.requestedFragmentPrecision : options.requestedVertexPrecision;\n    if (precision === \"highp\" && maxSupportedPrecision !== \"highp\") {\n      precision = \"mediump\";\n    }\n    return `precision ${precision} float;\n${src}`;\n  } else if (maxSupportedPrecision !== \"highp\" && src.substring(0, 15) === \"precision highp\") {\n    return src.replace(\"precision highp\", \"precision mediump\");\n  }\n  return src;\n}\n\nexport { ensurePrecision };\n//# sourceMappingURL=ensurePrecision.mjs.map\n","\"use strict\";\nfunction addProgramDefines(src, isES300, isFragment) {\n  if (isES300)\n    return src;\n  if (isFragment) {\n    src = src.replace(\"out vec4 finalColor;\", \"\");\n    return `\n\n        #ifdef GL_ES // This checks if it is WebGL1\n        #define in varying\n        #define finalColor gl_FragColor\n        #define texture texture2D\n        #endif\n        ${src}\n        `;\n  }\n  return `\n\n        #ifdef GL_ES // This checks if it is WebGL1\n        #define in attribute\n        #define out varying\n        #endif\n        ${src}\n        `;\n}\n\nexport { addProgramDefines };\n//# sourceMappingURL=addProgramDefines.mjs.map\n","\"use strict\";\nfunction insertVersion(src, isES300) {\n  if (!isES300)\n    return src;\n  return `#version 300 es\n${src}`;\n}\n\nexport { insertVersion };\n//# sourceMappingURL=insertVersion.mjs.map\n","\"use strict\";\nconst attributeFormatData = {\n  uint8x2: { size: 2, stride: 2, normalised: false },\n  uint8x4: { size: 4, stride: 4, normalised: false },\n  sint8x2: { size: 2, stride: 2, normalised: false },\n  sint8x4: { size: 4, stride: 4, normalised: false },\n  unorm8x2: { size: 2, stride: 2, normalised: true },\n  unorm8x4: { size: 4, stride: 4, normalised: true },\n  snorm8x2: { size: 2, stride: 2, normalised: true },\n  snorm8x4: { size: 4, stride: 4, normalised: true },\n  uint16x2: { size: 2, stride: 4, normalised: false },\n  uint16x4: { size: 4, stride: 8, normalised: false },\n  sint16x2: { size: 2, stride: 4, normalised: false },\n  sint16x4: { size: 4, stride: 8, normalised: false },\n  unorm16x2: { size: 2, stride: 4, normalised: true },\n  unorm16x4: { size: 4, stride: 8, normalised: true },\n  snorm16x2: { size: 2, stride: 4, normalised: true },\n  snorm16x4: { size: 4, stride: 8, normalised: true },\n  float16x2: { size: 2, stride: 4, normalised: false },\n  float16x4: { size: 4, stride: 8, normalised: false },\n  float32: { size: 1, stride: 4, normalised: false },\n  float32x2: { size: 2, stride: 8, normalised: false },\n  float32x3: { size: 3, stride: 12, normalised: false },\n  float32x4: { size: 4, stride: 16, normalised: false },\n  uint32: { size: 1, stride: 4, normalised: false },\n  uint32x2: { size: 2, stride: 8, normalised: false },\n  uint32x3: { size: 3, stride: 12, normalised: false },\n  uint32x4: { size: 4, stride: 16, normalised: false },\n  sint32: { size: 1, stride: 4, normalised: false },\n  sint32x2: { size: 2, stride: 8, normalised: false },\n  sint32x3: { size: 3, stride: 12, normalised: false },\n  sint32x4: { size: 4, stride: 16, normalised: false }\n};\nfunction getAttributeInfoFromFormat(format) {\n  return attributeFormatData[format] ?? attributeFormatData.float32;\n}\n\nexport { getAttributeInfoFromFormat };\n//# sourceMappingURL=getAttributeInfoFromFormat.mjs.map\n","import { getAttributeInfoFromFormat } from '../../../shared/geometry/utils/getAttributeInfoFromFormat.mjs';\n\n\"use strict\";\nconst WGSL_TO_VERTEX_TYPES = {\n  f32: \"float32\",\n  \"vec2<f32>\": \"float32x2\",\n  \"vec3<f32>\": \"float32x3\",\n  \"vec4<f32>\": \"float32x4\",\n  vec2f: \"float32x2\",\n  vec3f: \"float32x3\",\n  vec4f: \"float32x4\",\n  i32: \"sint32\",\n  \"vec2<i32>\": \"sint32x2\",\n  \"vec3<i32>\": \"sint32x3\",\n  \"vec4<i32>\": \"sint32x4\",\n  u32: \"uint32\",\n  \"vec2<u32>\": \"uint32x2\",\n  \"vec3<u32>\": \"uint32x3\",\n  \"vec4<u32>\": \"uint32x4\",\n  bool: \"uint32\",\n  \"vec2<bool>\": \"uint32x2\",\n  \"vec3<bool>\": \"uint32x3\",\n  \"vec4<bool>\": \"uint32x4\"\n};\nfunction extractAttributesFromGpuProgram({ source, entryPoint }) {\n  const results = {};\n  const mainVertStart = source.indexOf(`fn ${entryPoint}`);\n  if (mainVertStart !== -1) {\n    const arrowFunctionStart = source.indexOf(\"->\", mainVertStart);\n    if (arrowFunctionStart !== -1) {\n      const functionArgsSubstring = source.substring(mainVertStart, arrowFunctionStart);\n      const inputsRegex = /@location\\((\\d+)\\)\\s+([a-zA-Z0-9_]+)\\s*:\\s*([a-zA-Z0-9_<>]+)(?:,|\\s|$)/g;\n      let match;\n      while ((match = inputsRegex.exec(functionArgsSubstring)) !== null) {\n        const format = WGSL_TO_VERTEX_TYPES[match[3]] ?? \"float32\";\n        results[match[2]] = {\n          location: parseInt(match[1], 10),\n          format,\n          stride: getAttributeInfoFromFormat(format).stride,\n          offset: 0,\n          instance: false,\n          start: 0\n        };\n      }\n    }\n  }\n  return results;\n}\n\nexport { extractAttributesFromGpuProgram };\n//# sourceMappingURL=extractAttributesFromGpuProgram.mjs.map\n","\"use strict\";\nfunction extractStructAndGroups(wgsl) {\n  const linePattern = /(^|[^/])@(group|binding)\\(\\d+\\)[^;]+;/g;\n  const groupPattern = /@group\\((\\d+)\\)/;\n  const bindingPattern = /@binding\\((\\d+)\\)/;\n  const namePattern = /var(<[^>]+>)? (\\w+)/;\n  const typePattern = /:\\s*(\\w+)/;\n  const structPattern = /struct\\s+(\\w+)\\s*{([^}]+)}/g;\n  const structMemberPattern = /(\\w+)\\s*:\\s*([\\w\\<\\>]+)/g;\n  const structName = /struct\\s+(\\w+)/;\n  const groups = wgsl.match(linePattern)?.map((item) => ({\n    group: parseInt(item.match(groupPattern)[1], 10),\n    binding: parseInt(item.match(bindingPattern)[1], 10),\n    name: item.match(namePattern)[2],\n    isUniform: item.match(namePattern)[1] === \"<uniform>\",\n    type: item.match(typePattern)[1]\n  }));\n  if (!groups) {\n    return {\n      groups: [],\n      structs: []\n    };\n  }\n  const structs = wgsl.match(structPattern)?.map((struct) => {\n    const name = struct.match(structName)[1];\n    const members = struct.match(structMemberPattern).reduce((acc, member) => {\n      const [name2, type] = member.split(\":\");\n      acc[name2.trim()] = type.trim();\n      return acc;\n    }, {});\n    if (!members) {\n      return null;\n    }\n    return { name, members };\n  }).filter(({ name }) => groups.some((group) => group.type === name)) ?? [];\n  return {\n    groups,\n    structs\n  };\n}\n\nexport { extractStructAndGroups };\n//# sourceMappingURL=extractStructAndGroups.mjs.map\n","\"use strict\";\nvar ShaderStage = /* @__PURE__ */ ((ShaderStage2) => {\n  ShaderStage2[ShaderStage2[\"VERTEX\"] = 1] = \"VERTEX\";\n  ShaderStage2[ShaderStage2[\"FRAGMENT\"] = 2] = \"FRAGMENT\";\n  ShaderStage2[ShaderStage2[\"COMPUTE\"] = 4] = \"COMPUTE\";\n  return ShaderStage2;\n})(ShaderStage || {});\n\nexport { ShaderStage };\n//# sourceMappingURL=const.mjs.map\n","import { createIdFromString } from '../../shared/utils/createIdFromString.mjs';\nimport { extractAttributesFromGpuProgram } from './utils/extractAttributesFromGpuProgram.mjs';\nimport { extractStructAndGroups } from './utils/extractStructAndGroups.mjs';\nimport { generateGpuLayoutGroups } from './utils/generateGpuLayoutGroups.mjs';\nimport { generateLayoutHash } from './utils/generateLayoutHash.mjs';\nimport { removeStructAndGroupDuplicates } from './utils/removeStructAndGroupDuplicates.mjs';\n\n\"use strict\";\nconst programCache = /* @__PURE__ */ Object.create(null);\nclass GpuProgram {\n  /**\n   * Create a new GpuProgram\n   * @param options - The options for the gpu program\n   */\n  constructor(options) {\n    /** @internal */\n    this._layoutKey = 0;\n    /** @internal */\n    this._attributeLocationsKey = 0;\n    const { fragment, vertex, layout, gpuLayout, name } = options;\n    this.name = name;\n    this.fragment = fragment;\n    this.vertex = vertex;\n    if (fragment.source === vertex.source) {\n      const structsAndGroups = extractStructAndGroups(fragment.source);\n      this.structsAndGroups = structsAndGroups;\n    } else {\n      const vertexStructsAndGroups = extractStructAndGroups(vertex.source);\n      const fragmentStructsAndGroups = extractStructAndGroups(fragment.source);\n      this.structsAndGroups = removeStructAndGroupDuplicates(vertexStructsAndGroups, fragmentStructsAndGroups);\n    }\n    this.layout = layout ?? generateLayoutHash(this.structsAndGroups);\n    this.gpuLayout = gpuLayout ?? generateGpuLayoutGroups(this.structsAndGroups);\n    this.autoAssignGlobalUniforms = !!(this.layout[0]?.globalUniforms !== void 0);\n    this.autoAssignLocalUniforms = !!(this.layout[1]?.localUniforms !== void 0);\n    this._generateProgramKey();\n  }\n  // TODO maker this pure\n  _generateProgramKey() {\n    const { vertex, fragment } = this;\n    const bigKey = vertex.source + fragment.source + vertex.entryPoint + fragment.entryPoint;\n    this._layoutKey = createIdFromString(bigKey, \"program\");\n  }\n  get attributeData() {\n    this._attributeData ?? (this._attributeData = extractAttributesFromGpuProgram(this.vertex));\n    return this._attributeData;\n  }\n  /** destroys the program */\n  destroy() {\n    this.gpuLayout = null;\n    this.layout = null;\n    this.structsAndGroups = null;\n    this.fragment = null;\n    this.vertex = null;\n    programCache[this._cacheKey] = null;\n  }\n  /**\n   * Helper function that creates a program for a given source.\n   * It will check the program cache if the program has already been created.\n   * If it has that one will be returned, if not a new one will be created and cached.\n   * @param options - The options for the program.\n   * @returns A program using the same source\n   */\n  static from(options) {\n    const key = `${options.vertex.source}:${options.fragment.source}:${options.fragment.entryPoint}:${options.vertex.entryPoint}`;\n    if (!programCache[key]) {\n      programCache[key] = new GpuProgram(options);\n      programCache[key]._cacheKey = key;\n    }\n    return programCache[key];\n  }\n}\n\nexport { GpuProgram };\n//# sourceMappingURL=GpuProgram.mjs.map\n","\"use strict\";\nfunction removeStructAndGroupDuplicates(vertexStructsAndGroups, fragmentStructsAndGroups) {\n  const structNameSet = /* @__PURE__ */ new Set();\n  const dupeGroupKeySet = /* @__PURE__ */ new Set();\n  const structs = [...vertexStructsAndGroups.structs, ...fragmentStructsAndGroups.structs].filter((struct) => {\n    if (structNameSet.has(struct.name)) {\n      return false;\n    }\n    structNameSet.add(struct.name);\n    return true;\n  });\n  const groups = [...vertexStructsAndGroups.groups, ...fragmentStructsAndGroups.groups].filter((group) => {\n    const key = `${group.name}-${group.binding}`;\n    if (dupeGroupKeySet.has(key)) {\n      return false;\n    }\n    dupeGroupKeySet.add(key);\n    return true;\n  });\n  return { structs, groups };\n}\n\nexport { removeStructAndGroupDuplicates };\n//# sourceMappingURL=removeStructAndGroupDuplicates.mjs.map\n","\"use strict\";\nfunction generateLayoutHash({ groups }) {\n  const layout = [];\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    if (!layout[group.group]) {\n      layout[group.group] = {};\n    }\n    layout[group.group][group.name] = group.binding;\n  }\n  return layout;\n}\n\nexport { generateLayoutHash };\n//# sourceMappingURL=generateLayoutHash.mjs.map\n","import { ShaderStage } from '../../../shared/shader/const.mjs';\n\n\"use strict\";\nfunction generateGpuLayoutGroups({ groups }) {\n  const layout = [];\n  for (let i = 0; i < groups.length; i++) {\n    const group = groups[i];\n    if (!layout[group.group]) {\n      layout[group.group] = [];\n    }\n    if (group.isUniform) {\n      layout[group.group].push({\n        binding: group.binding,\n        visibility: ShaderStage.VERTEX | ShaderStage.FRAGMENT,\n        buffer: {\n          type: \"uniform\"\n        }\n      });\n    } else if (group.type === \"sampler\") {\n      layout[group.group].push({\n        binding: group.binding,\n        visibility: ShaderStage.FRAGMENT,\n        sampler: {\n          type: \"filtering\"\n        }\n      });\n    } else if (group.type === \"texture_2d\") {\n      layout[group.group].push({\n        binding: group.binding,\n        visibility: ShaderStage.FRAGMENT,\n        texture: {\n          sampleType: \"float\",\n          viewDimension: \"2d\",\n          multisampled: false\n        }\n      });\n    }\n  }\n  return layout;\n}\n\nexport { generateGpuLayoutGroups };\n//# sourceMappingURL=generateGpuLayoutGroups.mjs.map\n","\"use strict\";\nconst UNIFORM_TYPES_VALUES = [\n  \"f32\",\n  \"i32\",\n  \"vec2<f32>\",\n  \"vec3<f32>\",\n  \"vec4<f32>\",\n  \"mat2x2<f32>\",\n  \"mat3x3<f32>\",\n  \"mat4x4<f32>\",\n  \"mat3x2<f32>\",\n  \"mat4x2<f32>\",\n  \"mat2x3<f32>\",\n  \"mat4x3<f32>\",\n  \"mat2x4<f32>\",\n  \"mat3x4<f32>\",\n  \"vec2<i32>\",\n  \"vec3<i32>\",\n  \"vec4<i32>\"\n];\nconst UNIFORM_TYPES_MAP = UNIFORM_TYPES_VALUES.reduce((acc, type) => {\n  acc[type] = true;\n  return acc;\n}, {});\n\nexport { UNIFORM_TYPES_MAP, UNIFORM_TYPES_VALUES };\n//# sourceMappingURL=types.mjs.map\n","\"use strict\";\nfunction getDefaultUniformValue(type, size) {\n  switch (type) {\n    case \"f32\":\n      return 0;\n    case \"vec2<f32>\":\n      return new Float32Array(2 * size);\n    case \"vec3<f32>\":\n      return new Float32Array(3 * size);\n    case \"vec4<f32>\":\n      return new Float32Array(4 * size);\n    case \"mat2x2<f32>\":\n      return new Float32Array([\n        1,\n        0,\n        0,\n        1\n      ]);\n    case \"mat3x3<f32>\":\n      return new Float32Array([\n        1,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        1\n      ]);\n    case \"mat4x4<f32>\":\n      return new Float32Array([\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1\n      ]);\n  }\n  return null;\n}\n\nexport { getDefaultUniformValue };\n//# sourceMappingURL=getDefaultUniformValue.mjs.map\n","import { uid } from '../../../../utils/data/uid.mjs';\nimport { createIdFromString } from '../utils/createIdFromString.mjs';\nimport { UNIFORM_TYPES_MAP, UNIFORM_TYPES_VALUES } from './types.mjs';\nimport { getDefaultUniformValue } from './utils/getDefaultUniformValue.mjs';\n\n\"use strict\";\nconst _UniformGroup = class _UniformGroup {\n  /**\n   * Create a new Uniform group\n   * @param uniformStructures - The structures of the uniform group\n   * @param options - The optional parameters of this uniform group\n   */\n  constructor(uniformStructures, options) {\n    /**\n     * used internally to know if a uniform group was used in the last render pass\n     * @internal\n     */\n    this._touched = 0;\n    /** a unique id for this uniform group used through the renderer */\n    this.uid = uid(\"uniform\");\n    /**\n     * a resource type, used to identify how to handle it when its in a bind group / shader resource\n     * @internal\n     */\n    this._resourceType = \"uniformGroup\";\n    /**\n     * the resource id used internally by the renderer to build bind group keys\n     * @internal\n     */\n    this._resourceId = uid(\"resource\");\n    /** used ito identify if this is a uniform group */\n    this.isUniformGroup = true;\n    /**\n     * used to flag if this Uniform groups data is different from what it has stored in its buffer / on the GPU\n     * @internal\n     */\n    this._dirtyId = 0;\n    // implementing the interface - UniformGroup are not destroyed\n    this.destroyed = false;\n    options = { ..._UniformGroup.defaultOptions, ...options };\n    this.uniformStructures = uniformStructures;\n    const uniforms = {};\n    for (const i in uniformStructures) {\n      const uniformData = uniformStructures[i];\n      uniformData.name = i;\n      uniformData.size = uniformData.size ?? 1;\n      if (!UNIFORM_TYPES_MAP[uniformData.type]) {\n        const arrayMatch = uniformData.type.match(/^array<(\\w+(?:<\\w+>)?),\\s*(\\d+)>$/);\n        if (arrayMatch) {\n          const [, innerType, size] = arrayMatch;\n          throw new Error(\n            `Uniform type ${uniformData.type} is not supported. Use type: '${innerType}', size: ${size} instead.`\n          );\n        }\n        throw new Error(`Uniform type ${uniformData.type} is not supported. Supported uniform types are: ${UNIFORM_TYPES_VALUES.join(\", \")}`);\n      }\n      uniformData.value ?? (uniformData.value = getDefaultUniformValue(uniformData.type, uniformData.size));\n      uniforms[i] = uniformData.value;\n    }\n    this.uniforms = uniforms;\n    this._dirtyId = 1;\n    this.ubo = options.ubo;\n    this.isStatic = options.isStatic;\n    this._signature = createIdFromString(Object.keys(uniforms).map(\n      (i) => `${i}-${uniformStructures[i].type}`\n    ).join(\"-\"), \"uniform-group\");\n  }\n  /** Call this if you want the uniform groups data to be uploaded to the GPU only useful if `isStatic` is true. */\n  update() {\n    this._dirtyId++;\n  }\n};\n/** The default options used by the uniform group. */\n_UniformGroup.defaultOptions = {\n  /** if true the UniformGroup is handled as an Uniform buffer object. */\n  ubo: false,\n  /** if true, then you are responsible for when the data is uploaded to the GPU by calling `update()` */\n  isStatic: false\n};\nlet UniformGroup = _UniformGroup;\n\nexport { UniformGroup };\n//# sourceMappingURL=UniformGroup.mjs.map\n","\"use strict\";\nclass BindGroup {\n  /**\n   * Create a new instance eof the Bind Group.\n   * @param resources - The resources that are bound together for use by a shader.\n   */\n  constructor(resources) {\n    /** The resources that are bound together for use by a shader. */\n    this.resources = /* @__PURE__ */ Object.create(null);\n    this._dirty = true;\n    let index = 0;\n    for (const i in resources) {\n      const resource = resources[i];\n      this.setResource(resource, index++);\n    }\n    this._updateKey();\n  }\n  /**\n   * Updates the key if its flagged as dirty. This is used internally to\n   * match this bind group to a WebGPU BindGroup.\n   * @internal\n   */\n  _updateKey() {\n    if (!this._dirty)\n      return;\n    this._dirty = false;\n    const keyParts = [];\n    let index = 0;\n    for (const i in this.resources) {\n      keyParts[index++] = this.resources[i]._resourceId;\n    }\n    this._key = keyParts.join(\"|\");\n  }\n  /**\n   * Set a resource at a given index. this function will\n   * ensure that listeners will be removed from the current resource\n   * and added to the new resource.\n   * @param resource - The resource to set.\n   * @param index - The index to set the resource at.\n   */\n  setResource(resource, index) {\n    const currentResource = this.resources[index];\n    if (resource === currentResource)\n      return;\n    if (currentResource) {\n      resource.off?.(\"change\", this.onResourceChange, this);\n    }\n    resource.on?.(\"change\", this.onResourceChange, this);\n    this.resources[index] = resource;\n    this._dirty = true;\n  }\n  /**\n   * Returns the resource at the current specified index.\n   * @param index - The index of the resource to get.\n   * @returns - The resource at the specified index.\n   */\n  getResource(index) {\n    return this.resources[index];\n  }\n  /**\n   * Used internally to 'touch' each resource, to ensure that the GC\n   * knows that all resources in this bind group are still being used.\n   * @param tick - The current tick.\n   * @internal\n   */\n  _touch(tick) {\n    const resources = this.resources;\n    for (const i in resources) {\n      resources[i]._touched = tick;\n    }\n  }\n  /** Destroys this bind group and removes all listeners. */\n  destroy() {\n    const resources = this.resources;\n    for (const i in resources) {\n      const resource = resources[i];\n      resource?.off?.(\"change\", this.onResourceChange, this);\n    }\n    this.resources = null;\n  }\n  onResourceChange(resource) {\n    this._dirty = true;\n    if (resource.destroyed) {\n      const resources = this.resources;\n      for (const i in resources) {\n        if (resources[i] === resource) {\n          resources[i] = null;\n        }\n      }\n    } else {\n      this._updateKey();\n    }\n  }\n}\n\nexport { BindGroup };\n//# sourceMappingURL=BindGroup.mjs.map\n","\"use strict\";\nvar RendererType = /* @__PURE__ */ ((RendererType2) => {\n  RendererType2[RendererType2[\"WEBGL\"] = 1] = \"WEBGL\";\n  RendererType2[RendererType2[\"WEBGPU\"] = 2] = \"WEBGPU\";\n  RendererType2[RendererType2[\"BOTH\"] = 3] = \"BOTH\";\n  return RendererType2;\n})(RendererType || {});\n\nexport { RendererType };\n//# sourceMappingURL=types.mjs.map\n","import EventEmitter from 'eventemitter3';\nimport { uid } from '../../../../utils/data/uid.mjs';\nimport { GlProgram } from '../../gl/shader/GlProgram.mjs';\nimport { BindGroup } from '../../gpu/shader/BindGroup.mjs';\nimport { GpuProgram } from '../../gpu/shader/GpuProgram.mjs';\nimport { RendererType } from '../../types.mjs';\nimport { UniformGroup } from './UniformGroup.mjs';\n\n\"use strict\";\nclass Shader extends EventEmitter {\n  constructor(options) {\n    super();\n    /** A unique identifier for the shader */\n    this.uid = uid(\"shader\");\n    /**\n     * A record of the uniform groups and resources used by the shader.\n     * This is used by WebGL renderer to sync uniform data.\n     * @internal\n     */\n    this._uniformBindMap = /* @__PURE__ */ Object.create(null);\n    this._ownedBindGroups = [];\n    let {\n      gpuProgram,\n      glProgram,\n      groups,\n      resources,\n      compatibleRenderers,\n      groupMap\n    } = options;\n    this.gpuProgram = gpuProgram;\n    this.glProgram = glProgram;\n    if (compatibleRenderers === void 0) {\n      compatibleRenderers = 0;\n      if (gpuProgram)\n        compatibleRenderers |= RendererType.WEBGPU;\n      if (glProgram)\n        compatibleRenderers |= RendererType.WEBGL;\n    }\n    this.compatibleRenderers = compatibleRenderers;\n    const nameHash = {};\n    if (!resources && !groups) {\n      resources = {};\n    }\n    if (resources && groups) {\n      throw new Error(\"[Shader] Cannot have both resources and groups\");\n    } else if (!gpuProgram && groups && !groupMap) {\n      throw new Error(\"[Shader] No group map or WebGPU shader provided - consider using resources instead.\");\n    } else if (!gpuProgram && groups && groupMap) {\n      for (const i in groupMap) {\n        for (const j in groupMap[i]) {\n          const uniformName = groupMap[i][j];\n          nameHash[uniformName] = {\n            group: i,\n            binding: j,\n            name: uniformName\n          };\n        }\n      }\n    } else if (gpuProgram && groups && !groupMap) {\n      const groupData = gpuProgram.structsAndGroups.groups;\n      groupMap = {};\n      groupData.forEach((data) => {\n        groupMap[data.group] = groupMap[data.group] || {};\n        groupMap[data.group][data.binding] = data.name;\n        nameHash[data.name] = data;\n      });\n    } else if (resources) {\n      groups = {};\n      groupMap = {};\n      if (gpuProgram) {\n        const groupData = gpuProgram.structsAndGroups.groups;\n        groupData.forEach((data) => {\n          groupMap[data.group] = groupMap[data.group] || {};\n          groupMap[data.group][data.binding] = data.name;\n          nameHash[data.name] = data;\n        });\n      }\n      let bindTick = 0;\n      for (const i in resources) {\n        if (nameHash[i])\n          continue;\n        if (!groups[99]) {\n          groups[99] = new BindGroup();\n          this._ownedBindGroups.push(groups[99]);\n        }\n        nameHash[i] = { group: 99, binding: bindTick, name: i };\n        groupMap[99] = groupMap[99] || {};\n        groupMap[99][bindTick] = i;\n        bindTick++;\n      }\n      for (const i in resources) {\n        const name = i;\n        let value = resources[i];\n        if (!value.source && !value._resourceType) {\n          value = new UniformGroup(value);\n        }\n        const data = nameHash[name];\n        if (data) {\n          if (!groups[data.group]) {\n            groups[data.group] = new BindGroup();\n            this._ownedBindGroups.push(groups[data.group]);\n          }\n          groups[data.group].setResource(value, data.binding);\n        }\n      }\n    }\n    this.groups = groups;\n    this._uniformBindMap = groupMap;\n    this.resources = this._buildResourceAccessor(groups, nameHash);\n  }\n  /**\n   * Sometimes a resource group will be provided later (for example global uniforms)\n   * In such cases, this method can be used to let the shader know about the group.\n   * @param name - the name of the resource group\n   * @param groupIndex - the index of the group (should match the webGPU shader group location)\n   * @param bindIndex - the index of the bind point (should match the webGPU shader bind point)\n   */\n  addResource(name, groupIndex, bindIndex) {\n    var _a, _b;\n    (_a = this._uniformBindMap)[groupIndex] || (_a[groupIndex] = {});\n    (_b = this._uniformBindMap[groupIndex])[bindIndex] || (_b[bindIndex] = name);\n    if (!this.groups[groupIndex]) {\n      this.groups[groupIndex] = new BindGroup();\n      this._ownedBindGroups.push(this.groups[groupIndex]);\n    }\n  }\n  _buildResourceAccessor(groups, nameHash) {\n    const uniformsOut = {};\n    for (const i in nameHash) {\n      const data = nameHash[i];\n      Object.defineProperty(uniformsOut, data.name, {\n        get() {\n          return groups[data.group].getResource(data.binding);\n        },\n        set(value) {\n          groups[data.group].setResource(value, data.binding);\n        }\n      });\n    }\n    return uniformsOut;\n  }\n  /**\n   * Use to destroy the shader when its not longer needed.\n   * It will destroy the resources and remove listeners.\n   * @param destroyPrograms - if the programs should be destroyed as well.\n   * Make sure its not being used by other shaders!\n   */\n  destroy(destroyPrograms = false) {\n    this.emit(\"destroy\", this);\n    if (destroyPrograms) {\n      this.gpuProgram?.destroy();\n      this.glProgram?.destroy();\n    }\n    this.gpuProgram = null;\n    this.glProgram = null;\n    this.removeAllListeners();\n    this._uniformBindMap = null;\n    this._ownedBindGroups.forEach((bindGroup) => {\n      bindGroup.destroy();\n    });\n    this._ownedBindGroups = null;\n    this.resources = null;\n    this.groups = null;\n  }\n  static from(options) {\n    const { gpu, gl, ...rest } = options;\n    let gpuProgram;\n    let glProgram;\n    if (gpu) {\n      gpuProgram = GpuProgram.from(gpu);\n    }\n    if (gl) {\n      glProgram = GlProgram.from(gl);\n    }\n    return new Shader({\n      gpuProgram,\n      glProgram,\n      ...rest\n    });\n  }\n}\n\nexport { Shader };\n//# sourceMappingURL=Shader.mjs.map\n","\"use strict\";\nconst blendModeIds = {\n  normal: 0,\n  add: 1,\n  multiply: 2,\n  screen: 3,\n  overlay: 4,\n  erase: 5,\n  \"normal-npm\": 6,\n  \"add-npm\": 7,\n  \"screen-npm\": 8,\n  min: 9,\n  max: 10\n};\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\nconst _State = class _State {\n  constructor() {\n    this.data = 0;\n    this.blendMode = \"normal\";\n    this.polygonOffset = 0;\n    this.blend = true;\n    this.depthMask = true;\n  }\n  /**\n   * Activates blending of the computed fragment color values.\n   * @default true\n   */\n  get blend() {\n    return !!(this.data & 1 << BLEND);\n  }\n  set blend(value) {\n    if (!!(this.data & 1 << BLEND) !== value) {\n      this.data ^= 1 << BLEND;\n    }\n  }\n  /**\n   * Activates adding an offset to depth values of polygon's fragments\n   * @default false\n   */\n  get offsets() {\n    return !!(this.data & 1 << OFFSET);\n  }\n  set offsets(value) {\n    if (!!(this.data & 1 << OFFSET) !== value) {\n      this.data ^= 1 << OFFSET;\n    }\n  }\n  /** The culling settings for this state none - No culling back - Back face culling front - Front face culling */\n  set cullMode(value) {\n    if (value === \"none\") {\n      this.culling = false;\n      return;\n    }\n    this.culling = true;\n    this.clockwiseFrontFace = value === \"front\";\n  }\n  get cullMode() {\n    if (!this.culling) {\n      return \"none\";\n    }\n    return this.clockwiseFrontFace ? \"front\" : \"back\";\n  }\n  /**\n   * Activates culling of polygons.\n   * @default false\n   */\n  get culling() {\n    return !!(this.data & 1 << CULLING);\n  }\n  set culling(value) {\n    if (!!(this.data & 1 << CULLING) !== value) {\n      this.data ^= 1 << CULLING;\n    }\n  }\n  /**\n   * Activates depth comparisons and updates to the depth buffer.\n   * @default false\n   */\n  get depthTest() {\n    return !!(this.data & 1 << DEPTH_TEST);\n  }\n  set depthTest(value) {\n    if (!!(this.data & 1 << DEPTH_TEST) !== value) {\n      this.data ^= 1 << DEPTH_TEST;\n    }\n  }\n  /**\n   * Enables or disables writing to the depth buffer.\n   * @default true\n   */\n  get depthMask() {\n    return !!(this.data & 1 << DEPTH_MASK);\n  }\n  set depthMask(value) {\n    if (!!(this.data & 1 << DEPTH_MASK) !== value) {\n      this.data ^= 1 << DEPTH_MASK;\n    }\n  }\n  /**\n   * Specifies whether or not front or back-facing polygons can be culled.\n   * @default false\n   */\n  get clockwiseFrontFace() {\n    return !!(this.data & 1 << WINDING);\n  }\n  set clockwiseFrontFace(value) {\n    if (!!(this.data & 1 << WINDING) !== value) {\n      this.data ^= 1 << WINDING;\n    }\n  }\n  /**\n   * The blend mode to be applied when this state is set. Apply a value of `normal` to reset the blend mode.\n   * Setting this mode to anything other than NO_BLEND will automatically switch blending on.\n   * @default 'normal'\n   */\n  get blendMode() {\n    return this._blendMode;\n  }\n  set blendMode(value) {\n    this.blend = value !== \"none\";\n    this._blendMode = value;\n    this._blendModeId = blendModeIds[value] || 0;\n  }\n  /**\n   * The polygon offset. Setting this property to anything other than 0 will automatically enable polygon offset fill.\n   * @default 0\n   */\n  get polygonOffset() {\n    return this._polygonOffset;\n  }\n  set polygonOffset(value) {\n    this.offsets = !!value;\n    this._polygonOffset = value;\n  }\n  toString() {\n    return `[pixi.js/core:State blendMode=${this.blendMode} clockwiseFrontFace=${this.clockwiseFrontFace} culling=${this.culling} depthMask=${this.depthMask} polygonOffset=${this.polygonOffset}]`;\n  }\n  /**\n   * A quickly getting an instance of a State that is configured for 2d rendering.\n   * @returns a new State with values set for 2d rendering\n   */\n  static for2d() {\n    const state = new _State();\n    state.depthTest = false;\n    state.blend = true;\n    return state;\n  }\n};\n_State.default2d = _State.for2d();\nlet State = _State;\n\nexport { State };\n//# sourceMappingURL=State.mjs.map\n","\"use strict\";\nvar CLEAR = /* @__PURE__ */ ((CLEAR2) => {\n  CLEAR2[CLEAR2[\"NONE\"] = 0] = \"NONE\";\n  CLEAR2[CLEAR2[\"COLOR\"] = 16384] = \"COLOR\";\n  CLEAR2[CLEAR2[\"STENCIL\"] = 1024] = \"STENCIL\";\n  CLEAR2[CLEAR2[\"DEPTH\"] = 256] = \"DEPTH\";\n  CLEAR2[CLEAR2[\"COLOR_DEPTH\"] = 16640] = \"COLOR_DEPTH\";\n  CLEAR2[CLEAR2[\"COLOR_STENCIL\"] = 17408] = \"COLOR_STENCIL\";\n  CLEAR2[CLEAR2[\"DEPTH_STENCIL\"] = 1280] = \"DEPTH_STENCIL\";\n  CLEAR2[CLEAR2[\"ALL\"] = 17664] = \"ALL\";\n  return CLEAR2;\n})(CLEAR || {});\n\nexport { CLEAR };\n//# sourceMappingURL=const.mjs.map\n","\"use strict\";\nclass SystemRunner {\n  /**\n   * @param name - The function name that will be executed on the listeners added to this Runner.\n   */\n  constructor(name) {\n    this.items = [];\n    this._name = name;\n  }\n  /* jsdoc/check-param-names */\n  /**\n   * Dispatch/Broadcast Runner to all listeners added to the queue.\n   * @param {...any} params - (optional) parameters to pass to each listener\n   */\n  /* jsdoc/check-param-names */\n  emit(a0, a1, a2, a3, a4, a5, a6, a7) {\n    const { name, items } = this;\n    for (let i = 0, len = items.length; i < len; i++) {\n      items[i][name](a0, a1, a2, a3, a4, a5, a6, a7);\n    }\n    return this;\n  }\n  /**\n   * Add a listener to the Runner\n   *\n   * Runners do not need to have scope or functions passed to them.\n   * All that is required is to pass the listening object and ensure that it has contains a function that has the same name\n   * as the name provided to the Runner when it was created.\n   *\n   * Eg A listener passed to this Runner will require a 'complete' function.\n   *\n   * ```ts\n   * import { Runner } from 'pixi.js';\n   *\n   * const complete = new Runner('complete');\n   * ```\n   *\n   * The scope used will be the object itself.\n   * @param {any} item - The object that will be listening.\n   */\n  add(item) {\n    if (item[this._name]) {\n      this.remove(item);\n      this.items.push(item);\n    }\n    return this;\n  }\n  /**\n   * Remove a single listener from the dispatch queue.\n   * @param {any} item - The listener that you would like to remove.\n   */\n  remove(item) {\n    const index = this.items.indexOf(item);\n    if (index !== -1) {\n      this.items.splice(index, 1);\n    }\n    return this;\n  }\n  /**\n   * Check to see if the listener is already in the Runner\n   * @param {any} item - The listener that you would like to check.\n   */\n  contains(item) {\n    return this.items.indexOf(item) !== -1;\n  }\n  /** Remove all listeners from the Runner */\n  removeAll() {\n    this.items.length = 0;\n    return this;\n  }\n  /** Remove all references, don't use after this. */\n  destroy() {\n    this.removeAll();\n    this.items = null;\n    this._name = null;\n  }\n  /**\n   * `true` if there are no this Runner contains no listeners\n   * @readonly\n   */\n  get empty() {\n    return this.items.length === 0;\n  }\n  /**\n   * The name of the runner.\n   * @readonly\n   */\n  get name() {\n    return this._name;\n  }\n}\n\nexport { SystemRunner };\n//# sourceMappingURL=SystemRunner.mjs.map\n","import { Color } from '../../../../color/Color.mjs';\nimport { loadEnvironmentExtensions } from '../../../../environment/autoDetectEnvironment.mjs';\nimport { Container } from '../../../../scene/container/Container.mjs';\nimport { unsafeEvalSupported } from '../../../../utils/browser/unsafeEvalSupported.mjs';\nimport { uid } from '../../../../utils/data/uid.mjs';\nimport { deprecation, v8_0_0 } from '../../../../utils/logging/deprecation.mjs';\nimport { GlobalResourceRegistry } from '../../../../utils/pool/GlobalResourceRegistry.mjs';\nimport '../../../../utils/utils.mjs';\nimport { CLEAR } from '../../gl/const.mjs';\nimport { SystemRunner } from './SystemRunner.mjs';\nimport EventEmitter from 'eventemitter3';\n\n\"use strict\";\nconst defaultRunners = [\n  \"init\",\n  \"destroy\",\n  \"contextChange\",\n  \"resolutionChange\",\n  \"resetState\",\n  \"renderEnd\",\n  \"renderStart\",\n  \"render\",\n  \"update\",\n  \"postrender\",\n  \"prerender\"\n];\nconst _AbstractRenderer = class _AbstractRenderer extends EventEmitter {\n  /**\n   * Set up a system with a collection of SystemClasses and runners.\n   * Systems are attached dynamically to this class when added.\n   * @param config - the config for the system manager\n   */\n  constructor(config) {\n    super();\n    /** @internal */\n    this.uid = uid(\"renderer\");\n    /** @internal */\n    this.runners = /* @__PURE__ */ Object.create(null);\n    /** @internal */\n    this.renderPipes = /* @__PURE__ */ Object.create(null);\n    this._initOptions = {};\n    this._systemsHash = /* @__PURE__ */ Object.create(null);\n    this.type = config.type;\n    this.name = config.name;\n    this.config = config;\n    const combinedRunners = [...defaultRunners, ...this.config.runners ?? []];\n    this._addRunners(...combinedRunners);\n    this._unsafeEvalCheck();\n  }\n  /**\n   * Initialize the renderer.\n   * @param options - The options to use to create the renderer.\n   */\n  async init(options = {}) {\n    const skip = options.skipExtensionImports === true ? true : options.manageImports === false;\n    await loadEnvironmentExtensions(skip);\n    this._addSystems(this.config.systems);\n    this._addPipes(this.config.renderPipes, this.config.renderPipeAdaptors);\n    for (const systemName in this._systemsHash) {\n      const system = this._systemsHash[systemName];\n      const defaultSystemOptions = system.constructor.defaultOptions;\n      options = { ...defaultSystemOptions, ...options };\n    }\n    options = { ..._AbstractRenderer.defaultOptions, ...options };\n    this._roundPixels = options.roundPixels ? 1 : 0;\n    for (let i = 0; i < this.runners.init.items.length; i++) {\n      await this.runners.init.items[i].init(options);\n    }\n    this._initOptions = options;\n  }\n  render(args, deprecated) {\n    let options = args;\n    if (options instanceof Container) {\n      options = { container: options };\n      if (deprecated) {\n        deprecation(v8_0_0, \"passing a second argument is deprecated, please use render options instead\");\n        options.target = deprecated.renderTexture;\n      }\n    }\n    options.target || (options.target = this.view.renderTarget);\n    if (options.target === this.view.renderTarget) {\n      this._lastObjectRendered = options.container;\n      options.clearColor ?? (options.clearColor = this.background.colorRgba);\n      options.clear ?? (options.clear = this.background.clearBeforeRender);\n    }\n    if (options.clearColor) {\n      const isRGBAArray = Array.isArray(options.clearColor) && options.clearColor.length === 4;\n      options.clearColor = isRGBAArray ? options.clearColor : Color.shared.setValue(options.clearColor).toArray();\n    }\n    if (!options.transform) {\n      options.container.updateLocalTransform();\n      options.transform = options.container.localTransform;\n    }\n    if (!options.container.visible) {\n      return;\n    }\n    options.container.enableRenderGroup();\n    this.runners.prerender.emit(options);\n    this.runners.renderStart.emit(options);\n    this.runners.render.emit(options);\n    this.runners.renderEnd.emit(options);\n    this.runners.postrender.emit(options);\n  }\n  /**\n   * Resizes the WebGL view to the specified width and height.\n   * @param desiredScreenWidth - The desired width of the screen.\n   * @param desiredScreenHeight - The desired height of the screen.\n   * @param resolution - The resolution / device pixel ratio of the renderer.\n   */\n  resize(desiredScreenWidth, desiredScreenHeight, resolution) {\n    const previousResolution = this.view.resolution;\n    this.view.resize(desiredScreenWidth, desiredScreenHeight, resolution);\n    this.emit(\"resize\", this.view.screen.width, this.view.screen.height, this.view.resolution);\n    if (resolution !== void 0 && resolution !== previousResolution) {\n      this.runners.resolutionChange.emit(resolution);\n    }\n  }\n  /**\n   * Clears the render target.\n   * @param options - The options to use when clearing the render target.\n   * @param options.target - The render target to clear.\n   * @param options.clearColor - The color to clear with.\n   * @param options.clear - The clear mode to use.\n   * @advanced\n   */\n  clear(options = {}) {\n    const renderer = this;\n    options.target || (options.target = renderer.renderTarget.renderTarget);\n    options.clearColor || (options.clearColor = this.background.colorRgba);\n    options.clear ?? (options.clear = CLEAR.ALL);\n    const { clear, clearColor, target } = options;\n    Color.shared.setValue(clearColor ?? this.background.colorRgba);\n    renderer.renderTarget.clear(target, clear, Color.shared.toArray());\n  }\n  /** The resolution / device pixel ratio of the renderer. */\n  get resolution() {\n    return this.view.resolution;\n  }\n  set resolution(value) {\n    this.view.resolution = value;\n    this.runners.resolutionChange.emit(value);\n  }\n  /**\n   * Same as view.width, actual number of pixels in the canvas by horizontal.\n   * @type {number}\n   * @readonly\n   * @default 800\n   */\n  get width() {\n    return this.view.texture.frame.width;\n  }\n  /**\n   * Same as view.height, actual number of pixels in the canvas by vertical.\n   * @default 600\n   */\n  get height() {\n    return this.view.texture.frame.height;\n  }\n  // NOTE: this was `view` in v7\n  /**\n   * The canvas element that everything is drawn to.\n   * @type {environment.ICanvas}\n   */\n  get canvas() {\n    return this.view.canvas;\n  }\n  /**\n   * the last object rendered by the renderer. Useful for other plugins like interaction managers\n   * @readonly\n   */\n  get lastObjectRendered() {\n    return this._lastObjectRendered;\n  }\n  /**\n   * Flag if we are rendering to the screen vs renderTexture\n   * @readonly\n   * @default true\n   */\n  get renderingToScreen() {\n    const renderer = this;\n    return renderer.renderTarget.renderingToScreen;\n  }\n  /**\n   * Measurements of the screen. (0, 0, screenWidth, screenHeight).\n   *\n   * Its safe to use as filterArea or hitArea for the whole stage.\n   */\n  get screen() {\n    return this.view.screen;\n  }\n  /**\n   * Create a bunch of runners based of a collection of ids\n   * @param runnerIds - the runner ids to add\n   */\n  _addRunners(...runnerIds) {\n    runnerIds.forEach((runnerId) => {\n      this.runners[runnerId] = new SystemRunner(runnerId);\n    });\n  }\n  _addSystems(systems) {\n    let i;\n    for (i in systems) {\n      const val = systems[i];\n      this._addSystem(val.value, val.name);\n    }\n  }\n  /**\n   * Add a new system to the renderer.\n   * @param ClassRef - Class reference\n   * @param name - Property name for system, if not specified\n   *        will use a static `name` property on the class itself. This\n   *        name will be assigned as s property on the Renderer so make\n   *        sure it doesn't collide with properties on Renderer.\n   * @returns Return instance of renderer\n   */\n  _addSystem(ClassRef, name) {\n    const system = new ClassRef(this);\n    if (this[name]) {\n      throw new Error(`Whoops! The name \"${name}\" is already in use`);\n    }\n    this[name] = system;\n    this._systemsHash[name] = system;\n    for (const i in this.runners) {\n      this.runners[i].add(system);\n    }\n    return this;\n  }\n  _addPipes(pipes, pipeAdaptors) {\n    const adaptors = pipeAdaptors.reduce((acc, adaptor) => {\n      acc[adaptor.name] = adaptor.value;\n      return acc;\n    }, {});\n    pipes.forEach((pipe) => {\n      const PipeClass = pipe.value;\n      const name = pipe.name;\n      const Adaptor = adaptors[name];\n      this.renderPipes[name] = new PipeClass(\n        this,\n        Adaptor ? new Adaptor() : null\n      );\n      this.runners.destroy.add(this.renderPipes[name]);\n    });\n  }\n  destroy(options = false) {\n    this.runners.destroy.items.reverse();\n    this.runners.destroy.emit(options);\n    Object.values(this.runners).forEach((runner) => {\n      runner.destroy();\n    });\n    if (options === true || typeof options === \"object\" && options.releaseGlobalResources) {\n      GlobalResourceRegistry.release();\n    }\n    this._systemsHash = null;\n    this.renderPipes = null;\n  }\n  /**\n   * Generate a texture from a container.\n   * @param options - options or container target to use when generating the texture\n   * @returns a texture\n   */\n  generateTexture(options) {\n    return this.textureGenerator.generateTexture(options);\n  }\n  /**\n   * Whether the renderer will round coordinates to whole pixels when rendering.\n   * Can be overridden on a per scene item basis.\n   */\n  get roundPixels() {\n    return !!this._roundPixels;\n  }\n  /**\n   * Overridable function by `pixi.js/unsafe-eval` to silence\n   * throwing an error if platform doesn't support unsafe-evals.\n   * @private\n   * @ignore\n   */\n  _unsafeEvalCheck() {\n    if (!unsafeEvalSupported()) {\n      throw new Error(\"Current environment does not allow unsafe-eval, please use pixi.js/unsafe-eval module to enable support.\");\n    }\n  }\n  /**\n   * Resets the rendering state of the renderer.\n   * This is useful when you want to use the WebGL context directly and need to ensure PixiJS's internal state\n   * stays synchronized. When modifying the WebGL context state externally, calling this method before the next Pixi\n   * render will reset all internal caches and ensure it executes correctly.\n   *\n   * This is particularly useful when combining PixiJS with other rendering engines like Three.js:\n   * ```js\n   * // Reset Three.js state\n   * threeRenderer.resetState();\n   *\n   * // Render a Three.js scene\n   * threeRenderer.render(threeScene, threeCamera);\n   *\n   * // Reset PixiJS state since Three.js modified the WebGL context\n   * pixiRenderer.resetState();\n   *\n   * // Now render Pixi content\n   * pixiRenderer.render(pixiScene);\n   * ```\n   * @advanced\n   */\n  resetState() {\n    this.runners.resetState.emit();\n  }\n};\n/** The default options for the renderer. */\n_AbstractRenderer.defaultOptions = {\n  /**\n   * Default resolution / device pixel ratio of the renderer.\n   * @default 1\n   */\n  resolution: 1,\n  /**\n   * Should the `failIfMajorPerformanceCaveat` flag be enabled as a context option used in the `isWebGLSupported`\n   * function. If set to true, a WebGL renderer can fail to be created if the browser thinks there could be\n   * performance issues when using WebGL.\n   *\n   * In PixiJS v6 this has changed from true to false by default, to allow WebGL to work in as many\n   * scenarios as possible. However, some users may have a poor experience, for example, if a user has a gpu or\n   * driver version blacklisted by the\n   * browser.\n   *\n   * If your application requires high performance rendering, you may wish to set this to false.\n   * We recommend one of two options if you decide to set this flag to false:\n   *\n   * 1: Use the Canvas renderer as a fallback in case high performance WebGL is\n   *    not supported.\n   *\n   * 2: Call `isWebGLSupported` (which if found in the utils package) in your code before attempting to create a\n   *    PixiJS renderer, and show an error message to the user if the function returns false, explaining that their\n   *    device & browser combination does not support high performance WebGL.\n   *    This is a much better strategy than trying to create a PixiJS renderer and finding it then fails.\n   * @default false\n   */\n  failIfMajorPerformanceCaveat: false,\n  /**\n   * Should round pixels be forced when rendering?\n   * @default false\n   */\n  roundPixels: false\n};\nlet AbstractRenderer = _AbstractRenderer;\n\nexport { AbstractRenderer };\n//# sourceMappingURL=AbstractRenderer.mjs.map\n","import { isWebGLSupported } from '../../utils/browser/isWebGLSupported.mjs';\nimport { isWebGPUSupported } from '../../utils/browser/isWebGPUSupported.mjs';\nimport { AbstractRenderer } from './shared/system/AbstractRenderer.mjs';\n\n\"use strict\";\nconst renderPriority = [\"webgl\", \"webgpu\", \"canvas\"];\nasync function autoDetectRenderer(options) {\n  let preferredOrder = [];\n  if (options.preference) {\n    preferredOrder.push(options.preference);\n    renderPriority.forEach((item) => {\n      if (item !== options.preference) {\n        preferredOrder.push(item);\n      }\n    });\n  } else {\n    preferredOrder = renderPriority.slice();\n  }\n  let RendererClass;\n  let finalOptions = {};\n  for (let i = 0; i < preferredOrder.length; i++) {\n    const rendererType = preferredOrder[i];\n    if (rendererType === \"webgpu\" && await isWebGPUSupported()) {\n      const { WebGPURenderer } = await import('./gpu/WebGPURenderer.mjs');\n      RendererClass = WebGPURenderer;\n      finalOptions = { ...options, ...options.webgpu };\n      break;\n    } else if (rendererType === \"webgl\" && isWebGLSupported(\n      options.failIfMajorPerformanceCaveat ?? AbstractRenderer.defaultOptions.failIfMajorPerformanceCaveat\n    )) {\n      const { WebGLRenderer } = await import('./gl/WebGLRenderer.mjs');\n      RendererClass = WebGLRenderer;\n      finalOptions = { ...options, ...options.webgl };\n      break;\n    } else if (rendererType === \"canvas\") {\n      finalOptions = { ...options };\n      throw new Error(\"CanvasRenderer is not yet implemented\");\n    }\n  }\n  delete finalOptions.webgpu;\n  delete finalOptions.webgl;\n  if (!RendererClass) {\n    throw new Error(\"No available renderer for the current environment\");\n  }\n  const renderer = new RendererClass();\n  await renderer.init(finalOptions);\n  return renderer;\n}\n\nexport { autoDetectRenderer };\n//# sourceMappingURL=autoDetectRenderer.mjs.map\n","\"use strict\";\nfunction fastCopy(sourceBuffer, destinationBuffer) {\n  const lengthDouble = sourceBuffer.byteLength / 8 | 0;\n  const sourceFloat64View = new Float64Array(sourceBuffer, 0, lengthDouble);\n  const destinationFloat64View = new Float64Array(destinationBuffer, 0, lengthDouble);\n  destinationFloat64View.set(sourceFloat64View);\n  const remainingBytes = sourceBuffer.byteLength - lengthDouble * 8;\n  if (remainingBytes > 0) {\n    const sourceUint8View = new Uint8Array(sourceBuffer, lengthDouble * 8, remainingBytes);\n    const destinationUint8View = new Uint8Array(destinationBuffer, lengthDouble * 8, remainingBytes);\n    destinationUint8View.set(sourceUint8View);\n  }\n}\n\nexport { fastCopy };\n//# sourceMappingURL=fastCopy.mjs.map\n","\"use strict\";\nconst BLEND_TO_NPM = {\n  normal: \"normal-npm\",\n  add: \"add-npm\",\n  screen: \"screen-npm\"\n};\nvar STENCIL_MODES = /* @__PURE__ */ ((STENCIL_MODES2) => {\n  STENCIL_MODES2[STENCIL_MODES2[\"DISABLED\"] = 0] = \"DISABLED\";\n  STENCIL_MODES2[STENCIL_MODES2[\"RENDERING_MASK_ADD\"] = 1] = \"RENDERING_MASK_ADD\";\n  STENCIL_MODES2[STENCIL_MODES2[\"MASK_ACTIVE\"] = 2] = \"MASK_ACTIVE\";\n  STENCIL_MODES2[STENCIL_MODES2[\"INVERSE_MASK_ACTIVE\"] = 3] = \"INVERSE_MASK_ACTIVE\";\n  STENCIL_MODES2[STENCIL_MODES2[\"RENDERING_MASK_REMOVE\"] = 4] = \"RENDERING_MASK_REMOVE\";\n  STENCIL_MODES2[STENCIL_MODES2[\"NONE\"] = 5] = \"NONE\";\n  return STENCIL_MODES2;\n})(STENCIL_MODES || {});\n\nexport { BLEND_TO_NPM, STENCIL_MODES };\n//# sourceMappingURL=const.mjs.map\n","import { BLEND_TO_NPM } from './const.mjs';\n\n\"use strict\";\nfunction getAdjustedBlendModeBlend(blendMode, textureSource) {\n  if (textureSource.alphaMode === \"no-premultiply-alpha\") {\n    return BLEND_TO_NPM[blendMode] || blendMode;\n  }\n  return blendMode;\n}\n\nexport { getAdjustedBlendModeBlend };\n//# sourceMappingURL=getAdjustedBlendModeBlend.mjs.map\n","\"use strict\";\nvar BufferUsage = /* @__PURE__ */ ((BufferUsage2) => {\n  BufferUsage2[BufferUsage2[\"MAP_READ\"] = 1] = \"MAP_READ\";\n  BufferUsage2[BufferUsage2[\"MAP_WRITE\"] = 2] = \"MAP_WRITE\";\n  BufferUsage2[BufferUsage2[\"COPY_SRC\"] = 4] = \"COPY_SRC\";\n  BufferUsage2[BufferUsage2[\"COPY_DST\"] = 8] = \"COPY_DST\";\n  BufferUsage2[BufferUsage2[\"INDEX\"] = 16] = \"INDEX\";\n  BufferUsage2[BufferUsage2[\"VERTEX\"] = 32] = \"VERTEX\";\n  BufferUsage2[BufferUsage2[\"UNIFORM\"] = 64] = \"UNIFORM\";\n  BufferUsage2[BufferUsage2[\"STORAGE\"] = 128] = \"STORAGE\";\n  BufferUsage2[BufferUsage2[\"INDIRECT\"] = 256] = \"INDIRECT\";\n  BufferUsage2[BufferUsage2[\"QUERY_RESOLVE\"] = 512] = \"QUERY_RESOLVE\";\n  BufferUsage2[BufferUsage2[\"STATIC\"] = 1024] = \"STATIC\";\n  return BufferUsage2;\n})(BufferUsage || {});\n\nexport { BufferUsage };\n//# sourceMappingURL=const.mjs.map\n","import EventEmitter from 'eventemitter3';\nimport { uid } from '../../../../utils/data/uid.mjs';\nimport { BufferUsage } from './const.mjs';\n\n\"use strict\";\nclass Buffer extends EventEmitter {\n  /**\n   * Creates a new Buffer with the given options\n   * @param options - the options for the buffer\n   */\n  constructor(options) {\n    let { data, size } = options;\n    const { usage, label, shrinkToFit } = options;\n    super();\n    /**\n     * emits when the underlying buffer has changed shape (i.e. resized)\n     * letting the renderer know that it needs to discard the old buffer on the GPU and create a new one\n     * @event change\n     */\n    /**\n     * emits when the underlying buffer data has been updated. letting the renderer know\n     * that it needs to update the buffer on the GPU\n     * @event update\n     */\n    /**\n     * emits when the buffer is destroyed. letting the renderer know that it needs to destroy the buffer on the GPU\n     * @event destroy\n     */\n    /** a unique id for this uniform group used through the renderer */\n    this.uid = uid(\"buffer\");\n    /**\n     * a resource type, used to identify how to handle it when its in a bind group / shader resource\n     * @internal\n     */\n    this._resourceType = \"buffer\";\n    /**\n     * the resource id used internally by the renderer to build bind group keys\n     * @internal\n     */\n    this._resourceId = uid(\"resource\");\n    /**\n     * used internally to know if a uniform group was used in the last render pass\n     * @internal\n     */\n    this._touched = 0;\n    /** @internal */\n    this._updateID = 1;\n    this._dataInt32 = null;\n    /**\n     * should the GPU buffer be shrunk when the data becomes smaller?\n     * changing this will cause the buffer to be destroyed and a new one created on the GPU\n     * this can be expensive, especially if the buffer is already big enough!\n     * setting this to false will prevent the buffer from being shrunk. This will yield better performance\n     * if you are constantly setting data that is changing size often.\n     * @default true\n     */\n    this.shrinkToFit = true;\n    /**\n     * Has the buffer been destroyed?\n     * @readonly\n     */\n    this.destroyed = false;\n    if (data instanceof Array) {\n      data = new Float32Array(data);\n    }\n    this._data = data;\n    size ?? (size = data?.byteLength);\n    const mappedAtCreation = !!data;\n    this.descriptor = {\n      size,\n      usage,\n      mappedAtCreation,\n      label\n    };\n    this.shrinkToFit = shrinkToFit ?? true;\n  }\n  /** the data in the buffer */\n  get data() {\n    return this._data;\n  }\n  set data(value) {\n    this.setDataWithSize(value, value.length, true);\n  }\n  get dataInt32() {\n    if (!this._dataInt32) {\n      this._dataInt32 = new Int32Array(this.data.buffer);\n    }\n    return this._dataInt32;\n  }\n  /** whether the buffer is static or not */\n  get static() {\n    return !!(this.descriptor.usage & BufferUsage.STATIC);\n  }\n  set static(value) {\n    if (value) {\n      this.descriptor.usage |= BufferUsage.STATIC;\n    } else {\n      this.descriptor.usage &= ~BufferUsage.STATIC;\n    }\n  }\n  /**\n   * Sets the data in the buffer to the given value. This will immediately update the buffer on the GPU.\n   * If you only want to update a subset of the buffer, you can pass in the size of the data.\n   * @param value - the data to set\n   * @param size - the size of the data in bytes\n   * @param syncGPU - should the buffer be updated on the GPU immediately?\n   */\n  setDataWithSize(value, size, syncGPU) {\n    this._updateID++;\n    this._updateSize = size * value.BYTES_PER_ELEMENT;\n    if (this._data === value) {\n      if (syncGPU)\n        this.emit(\"update\", this);\n      return;\n    }\n    const oldData = this._data;\n    this._data = value;\n    this._dataInt32 = null;\n    if (!oldData || oldData.length !== value.length) {\n      if (!this.shrinkToFit && oldData && value.byteLength < oldData.byteLength) {\n        if (syncGPU)\n          this.emit(\"update\", this);\n      } else {\n        this.descriptor.size = value.byteLength;\n        this._resourceId = uid(\"resource\");\n        this.emit(\"change\", this);\n      }\n      return;\n    }\n    if (syncGPU)\n      this.emit(\"update\", this);\n  }\n  /**\n   * updates the buffer on the GPU to reflect the data in the buffer.\n   * By default it will update the entire buffer. If you only want to update a subset of the buffer,\n   * you can pass in the size of the buffer to update.\n   * @param sizeInBytes - the new size of the buffer in bytes\n   */\n  update(sizeInBytes) {\n    this._updateSize = sizeInBytes ?? this._updateSize;\n    this._updateID++;\n    this.emit(\"update\", this);\n  }\n  /** Destroys the buffer */\n  destroy() {\n    this.destroyed = true;\n    this.emit(\"destroy\", this);\n    this.emit(\"change\", this);\n    this._data = null;\n    this.descriptor = null;\n    this.removeAllListeners();\n  }\n}\n\nexport { Buffer };\n//# sourceMappingURL=Buffer.mjs.map\n","import { Buffer } from '../../buffer/Buffer.mjs';\nimport { BufferUsage } from '../../buffer/const.mjs';\n\n\"use strict\";\nfunction ensureIsBuffer(buffer, index) {\n  if (!(buffer instanceof Buffer)) {\n    let usage = index ? BufferUsage.INDEX : BufferUsage.VERTEX;\n    if (buffer instanceof Array) {\n      if (index) {\n        buffer = new Uint32Array(buffer);\n        usage = BufferUsage.INDEX | BufferUsage.COPY_DST;\n      } else {\n        buffer = new Float32Array(buffer);\n        usage = BufferUsage.VERTEX | BufferUsage.COPY_DST;\n      }\n    }\n    buffer = new Buffer({\n      data: buffer,\n      label: index ? \"index-mesh-buffer\" : \"vertex-mesh-buffer\",\n      usage\n    });\n  }\n  return buffer;\n}\n\nexport { ensureIsBuffer };\n//# sourceMappingURL=ensureIsBuffer.mjs.map\n","import EventEmitter from 'eventemitter3';\nimport { Bounds } from '../../../../scene/container/bounds/Bounds.mjs';\nimport { uid } from '../../../../utils/data/uid.mjs';\nimport { Buffer } from '../buffer/Buffer.mjs';\nimport { ensureIsBuffer } from './utils/ensureIsBuffer.mjs';\nimport { getGeometryBounds } from './utils/getGeometryBounds.mjs';\n\n\"use strict\";\nfunction ensureIsAttribute(attribute) {\n  if (attribute instanceof Buffer || Array.isArray(attribute) || attribute.BYTES_PER_ELEMENT) {\n    attribute = {\n      buffer: attribute\n    };\n  }\n  attribute.buffer = ensureIsBuffer(attribute.buffer, false);\n  return attribute;\n}\nclass Geometry extends EventEmitter {\n  /**\n   * Create a new instance of a geometry\n   * @param options - The options for the geometry.\n   */\n  constructor(options = {}) {\n    super();\n    /** The unique id of the geometry. */\n    this.uid = uid(\"geometry\");\n    /**\n     * the layout key will be generated by WebGPU all geometries that have the same structure\n     * will have the same layout key. This is used to cache the pipeline layout\n     * @internal\n     */\n    this._layoutKey = 0;\n    /** the instance count of the geometry to draw */\n    this.instanceCount = 1;\n    this._bounds = new Bounds();\n    this._boundsDirty = true;\n    const { attributes, indexBuffer, topology } = options;\n    this.buffers = [];\n    this.attributes = {};\n    if (attributes) {\n      for (const i in attributes) {\n        this.addAttribute(i, attributes[i]);\n      }\n    }\n    this.instanceCount = options.instanceCount ?? 1;\n    if (indexBuffer) {\n      this.addIndex(indexBuffer);\n    }\n    this.topology = topology || \"triangle-list\";\n  }\n  onBufferUpdate() {\n    this._boundsDirty = true;\n    this.emit(\"update\", this);\n  }\n  /**\n   * Returns the requested attribute.\n   * @param id - The name of the attribute required\n   * @returns - The attribute requested.\n   */\n  getAttribute(id) {\n    return this.attributes[id];\n  }\n  /**\n   * Returns the index buffer\n   * @returns - The index buffer.\n   */\n  getIndex() {\n    return this.indexBuffer;\n  }\n  /**\n   * Returns the requested buffer.\n   * @param id - The name of the buffer required.\n   * @returns - The buffer requested.\n   */\n  getBuffer(id) {\n    return this.getAttribute(id).buffer;\n  }\n  /**\n   * Used to figure out how many vertices there are in this geometry\n   * @returns the number of vertices in the geometry\n   */\n  getSize() {\n    for (const i in this.attributes) {\n      const attribute = this.attributes[i];\n      const buffer = attribute.buffer;\n      return buffer.data.length / (attribute.stride / 4 || attribute.size);\n    }\n    return 0;\n  }\n  /**\n   * Adds an attribute to the geometry.\n   * @param name - The name of the attribute to add.\n   * @param attributeOption - The attribute option to add.\n   */\n  addAttribute(name, attributeOption) {\n    const attribute = ensureIsAttribute(attributeOption);\n    const bufferIndex = this.buffers.indexOf(attribute.buffer);\n    if (bufferIndex === -1) {\n      this.buffers.push(attribute.buffer);\n      attribute.buffer.on(\"update\", this.onBufferUpdate, this);\n      attribute.buffer.on(\"change\", this.onBufferUpdate, this);\n    }\n    this.attributes[name] = attribute;\n  }\n  /**\n   * Adds an index buffer to the geometry.\n   * @param indexBuffer - The index buffer to add. Can be a Buffer, TypedArray, or an array of numbers.\n   */\n  addIndex(indexBuffer) {\n    this.indexBuffer = ensureIsBuffer(indexBuffer, true);\n    this.buffers.push(this.indexBuffer);\n  }\n  /** Returns the bounds of the geometry. */\n  get bounds() {\n    if (!this._boundsDirty)\n      return this._bounds;\n    this._boundsDirty = false;\n    return getGeometryBounds(this, \"aPosition\", this._bounds);\n  }\n  /**\n   * destroys the geometry.\n   * @param destroyBuffers - destroy the buffers associated with this geometry\n   */\n  destroy(destroyBuffers = false) {\n    this.emit(\"destroy\", this);\n    this.removeAllListeners();\n    if (destroyBuffers) {\n      this.buffers.forEach((buffer) => buffer.destroy());\n    }\n    this.attributes = null;\n    this.buffers = null;\n    this.indexBuffer = null;\n    this._bounds = null;\n  }\n}\n\nexport { Geometry };\n//# sourceMappingURL=Geometry.mjs.map\n","\"use strict\";\nfunction getGeometryBounds(geometry, attributeId, bounds) {\n  const attribute = geometry.getAttribute(attributeId);\n  if (!attribute) {\n    bounds.minX = 0;\n    bounds.minY = 0;\n    bounds.maxX = 0;\n    bounds.maxY = 0;\n    return bounds;\n  }\n  const data = attribute.buffer.data;\n  let minX = Infinity;\n  let minY = Infinity;\n  let maxX = -Infinity;\n  let maxY = -Infinity;\n  const byteSize = data.BYTES_PER_ELEMENT;\n  const offset = (attribute.offset || 0) / byteSize;\n  const stride = (attribute.stride || 2 * 4) / byteSize;\n  for (let i = offset; i < data.length; i += stride) {\n    const x = data[i];\n    const y = data[i + 1];\n    if (x > maxX)\n      maxX = x;\n    if (y > maxY)\n      maxY = y;\n    if (x < minX)\n      minX = x;\n    if (y < minY)\n      minY = y;\n  }\n  bounds.minX = minX;\n  bounds.minY = minY;\n  bounds.maxX = maxX;\n  bounds.maxY = maxY;\n  return bounds;\n}\n\nexport { getGeometryBounds };\n//# sourceMappingURL=getGeometryBounds.mjs.map\n","import { UniformGroup } from '../../shared/shader/UniformGroup.mjs';\n\n\"use strict\";\nconst batchSamplersUniformGroupHash = {};\nfunction getBatchSamplersUniformGroup(maxTextures) {\n  let batchSamplersUniformGroup = batchSamplersUniformGroupHash[maxTextures];\n  if (batchSamplersUniformGroup)\n    return batchSamplersUniformGroup;\n  const sampleValues = new Int32Array(maxTextures);\n  for (let i = 0; i < maxTextures; i++) {\n    sampleValues[i] = i;\n  }\n  batchSamplersUniformGroup = batchSamplersUniformGroupHash[maxTextures] = new UniformGroup({\n    uTextures: { value: sampleValues, type: `i32`, size: maxTextures }\n  }, { isStatic: true });\n  return batchSamplersUniformGroup;\n}\n\nexport { getBatchSamplersUniformGroup };\n//# sourceMappingURL=getBatchSamplersUniformGroup.mjs.map\n","\"use strict\";\nfunction buildUvs(vertices, verticesStride, verticesOffset, uvs, uvsOffset, uvsStride, size, matrix = null) {\n  let index = 0;\n  verticesOffset *= verticesStride;\n  uvsOffset *= uvsStride;\n  const a = matrix.a;\n  const b = matrix.b;\n  const c = matrix.c;\n  const d = matrix.d;\n  const tx = matrix.tx;\n  const ty = matrix.ty;\n  while (index < size) {\n    const x = vertices[verticesOffset];\n    const y = vertices[verticesOffset + 1];\n    uvs[uvsOffset] = a * x + c * y + tx;\n    uvs[uvsOffset + 1] = b * x + d * y + ty;\n    uvsOffset += uvsStride;\n    verticesOffset += verticesStride;\n    index++;\n  }\n}\nfunction buildSimpleUvs(uvs, uvsOffset, uvsStride, size) {\n  let index = 0;\n  uvsOffset *= uvsStride;\n  while (index < size) {\n    uvs[uvsOffset] = 0;\n    uvs[uvsOffset + 1] = 0;\n    uvsOffset += uvsStride;\n    index++;\n  }\n}\n\nexport { buildSimpleUvs, buildUvs };\n//# sourceMappingURL=buildUvs.mjs.map\n","\"use strict\";\nfunction transformVertices(vertices, m, offset, stride, size) {\n  const a = m.a;\n  const b = m.b;\n  const c = m.c;\n  const d = m.d;\n  const tx = m.tx;\n  const ty = m.ty;\n  offset || (offset = 0);\n  stride || (stride = 2);\n  size || (size = vertices.length / stride - offset);\n  let index = offset * stride;\n  for (let i = 0; i < size; i++) {\n    const x = vertices[index];\n    const y = vertices[index + 1];\n    vertices[index] = a * x + c * y + tx;\n    vertices[index + 1] = b * x + d * y + ty;\n    index += stride;\n  }\n}\n\nexport { transformVertices };\n//# sourceMappingURL=transformVertices.mjs.map\n","import { DOMAdapter } from '../../../../environment/adapter.mjs';\nimport { nextPow2 } from '../../../../maths/misc/pow2.mjs';\nimport { GlobalResourceRegistry } from '../../../../utils/pool/GlobalResourceRegistry.mjs';\n\n\"use strict\";\nclass CanvasPoolClass {\n  constructor(canvasOptions) {\n    this._canvasPool = /* @__PURE__ */ Object.create(null);\n    this.canvasOptions = canvasOptions || {};\n    this.enableFullScreen = false;\n  }\n  /**\n   * Creates texture with params that were specified in pool constructor.\n   * @param pixelWidth - Width of texture in pixels.\n   * @param pixelHeight - Height of texture in pixels.\n   */\n  _createCanvasAndContext(pixelWidth, pixelHeight) {\n    const canvas = DOMAdapter.get().createCanvas();\n    canvas.width = pixelWidth;\n    canvas.height = pixelHeight;\n    const context = canvas.getContext(\"2d\");\n    return { canvas, context };\n  }\n  /**\n   * Gets a Power-of-Two render texture or fullScreen texture\n   * @param minWidth - The minimum width of the render texture.\n   * @param minHeight - The minimum height of the render texture.\n   * @param resolution - The resolution of the render texture.\n   * @returns The new render texture.\n   */\n  getOptimalCanvasAndContext(minWidth, minHeight, resolution = 1) {\n    minWidth = Math.ceil(minWidth * resolution - 1e-6);\n    minHeight = Math.ceil(minHeight * resolution - 1e-6);\n    minWidth = nextPow2(minWidth);\n    minHeight = nextPow2(minHeight);\n    const key = (minWidth << 17) + (minHeight << 1);\n    if (!this._canvasPool[key]) {\n      this._canvasPool[key] = [];\n    }\n    let canvasAndContext = this._canvasPool[key].pop();\n    if (!canvasAndContext) {\n      canvasAndContext = this._createCanvasAndContext(minWidth, minHeight);\n    }\n    return canvasAndContext;\n  }\n  /**\n   * Place a render texture back into the pool.\n   * @param canvasAndContext\n   */\n  returnCanvasAndContext(canvasAndContext) {\n    const canvas = canvasAndContext.canvas;\n    const { width, height } = canvas;\n    const key = (width << 17) + (height << 1);\n    canvasAndContext.context.resetTransform();\n    canvasAndContext.context.clearRect(0, 0, width, height);\n    this._canvasPool[key].push(canvasAndContext);\n  }\n  clear() {\n    this._canvasPool = {};\n  }\n}\nconst CanvasPool = new CanvasPoolClass();\nGlobalResourceRegistry.register(CanvasPool);\n\nexport { CanvasPool, CanvasPoolClass };\n//# sourceMappingURL=CanvasPool.mjs.map\n","\"use strict\";\nvar BUFFER_TYPE = /* @__PURE__ */ ((BUFFER_TYPE2) => {\n  BUFFER_TYPE2[BUFFER_TYPE2[\"ELEMENT_ARRAY_BUFFER\"] = 34963] = \"ELEMENT_ARRAY_BUFFER\";\n  BUFFER_TYPE2[BUFFER_TYPE2[\"ARRAY_BUFFER\"] = 34962] = \"ARRAY_BUFFER\";\n  BUFFER_TYPE2[BUFFER_TYPE2[\"UNIFORM_BUFFER\"] = 35345] = \"UNIFORM_BUFFER\";\n  return BUFFER_TYPE2;\n})(BUFFER_TYPE || {});\n\nexport { BUFFER_TYPE };\n//# sourceMappingURL=const.mjs.map\n","\"use strict\";\nclass GlBuffer {\n  constructor(buffer, type) {\n    this._lastBindBaseLocation = -1;\n    this._lastBindCallId = -1;\n    this.buffer = buffer || null;\n    this.updateID = -1;\n    this.byteLength = -1;\n    this.type = type;\n  }\n}\n\nexport { GlBuffer };\n//# sourceMappingURL=GlBuffer.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { BufferUsage } from '../../shared/buffer/const.mjs';\nimport { BUFFER_TYPE } from './const.mjs';\nimport { GlBuffer } from './GlBuffer.mjs';\n\n\"use strict\";\nclass GlBufferSystem {\n  /**\n   * @param {Renderer} renderer - The renderer this System works for.\n   */\n  constructor(renderer) {\n    this._gpuBuffers = /* @__PURE__ */ Object.create(null);\n    /** Cache keeping track of the base bound buffer bases */\n    this._boundBufferBases = /* @__PURE__ */ Object.create(null);\n    this._minBaseLocation = 0;\n    this._nextBindBaseIndex = this._minBaseLocation;\n    this._bindCallId = 0;\n    this._renderer = renderer;\n    this._renderer.renderableGC.addManagedHash(this, \"_gpuBuffers\");\n  }\n  /** @ignore */\n  destroy() {\n    this._renderer = null;\n    this._gl = null;\n    this._gpuBuffers = null;\n    this._boundBufferBases = null;\n  }\n  /** Sets up the renderer context and necessary buffers. */\n  contextChange() {\n    this._gl = this._renderer.gl;\n    this._gpuBuffers = /* @__PURE__ */ Object.create(null);\n    this._maxBindings = this._renderer.limits.maxUniformBindings;\n  }\n  getGlBuffer(buffer) {\n    return this._gpuBuffers[buffer.uid] || this.createGLBuffer(buffer);\n  }\n  /**\n   * This binds specified buffer. On first run, it will create the webGL buffers for the context too\n   * @param buffer - the buffer to bind to the renderer\n   */\n  bind(buffer) {\n    const { _gl: gl } = this;\n    const glBuffer = this.getGlBuffer(buffer);\n    gl.bindBuffer(glBuffer.type, glBuffer.buffer);\n  }\n  /**\n   * Binds an uniform buffer to at the given index.\n   *\n   * A cache is used so a buffer will not be bound again if already bound.\n   * @param glBuffer - the buffer to bind\n   * @param index - the base index to bind it to.\n   */\n  bindBufferBase(glBuffer, index) {\n    const { _gl: gl } = this;\n    if (this._boundBufferBases[index] !== glBuffer) {\n      this._boundBufferBases[index] = glBuffer;\n      glBuffer._lastBindBaseLocation = index;\n      gl.bindBufferBase(gl.UNIFORM_BUFFER, index, glBuffer.buffer);\n    }\n  }\n  nextBindBase(hasTransformFeedback) {\n    this._bindCallId++;\n    this._minBaseLocation = 0;\n    if (hasTransformFeedback) {\n      this._boundBufferBases[0] = null;\n      this._minBaseLocation = 1;\n      if (this._nextBindBaseIndex < 1) {\n        this._nextBindBaseIndex = 1;\n      }\n    }\n  }\n  freeLocationForBufferBase(glBuffer) {\n    let freeIndex = this.getLastBindBaseLocation(glBuffer);\n    if (freeIndex >= this._minBaseLocation) {\n      glBuffer._lastBindCallId = this._bindCallId;\n      return freeIndex;\n    }\n    let loop = 0;\n    let nextIndex = this._nextBindBaseIndex;\n    while (loop < 2) {\n      if (nextIndex >= this._maxBindings) {\n        nextIndex = this._minBaseLocation;\n        loop++;\n      }\n      const curBuf = this._boundBufferBases[nextIndex];\n      if (curBuf && curBuf._lastBindCallId === this._bindCallId) {\n        nextIndex++;\n        continue;\n      }\n      break;\n    }\n    freeIndex = nextIndex;\n    this._nextBindBaseIndex = nextIndex + 1;\n    if (loop >= 2) {\n      return -1;\n    }\n    glBuffer._lastBindCallId = this._bindCallId;\n    this._boundBufferBases[freeIndex] = null;\n    return freeIndex;\n  }\n  getLastBindBaseLocation(glBuffer) {\n    const index = glBuffer._lastBindBaseLocation;\n    if (this._boundBufferBases[index] === glBuffer) {\n      return index;\n    }\n    return -1;\n  }\n  /**\n   * Binds a buffer whilst also binding its range.\n   * This will make the buffer start from the offset supplied rather than 0 when it is read.\n   * @param glBuffer - the buffer to bind\n   * @param index - the base index to bind at, defaults to 0\n   * @param offset - the offset to bind at (this is blocks of 256). 0 = 0, 1 = 256, 2 = 512 etc\n   * @param size - the size to bind at (this is blocks of 256).\n   */\n  bindBufferRange(glBuffer, index, offset, size) {\n    const { _gl: gl } = this;\n    offset || (offset = 0);\n    index || (index = 0);\n    this._boundBufferBases[index] = null;\n    gl.bindBufferRange(gl.UNIFORM_BUFFER, index || 0, glBuffer.buffer, offset * 256, size || 256);\n  }\n  /**\n   * Will ensure the data in the buffer is uploaded to the GPU.\n   * @param {Buffer} buffer - the buffer to update\n   */\n  updateBuffer(buffer) {\n    const { _gl: gl } = this;\n    const glBuffer = this.getGlBuffer(buffer);\n    if (buffer._updateID === glBuffer.updateID) {\n      return glBuffer;\n    }\n    glBuffer.updateID = buffer._updateID;\n    gl.bindBuffer(glBuffer.type, glBuffer.buffer);\n    const data = buffer.data;\n    const drawType = buffer.descriptor.usage & BufferUsage.STATIC ? gl.STATIC_DRAW : gl.DYNAMIC_DRAW;\n    if (data) {\n      if (glBuffer.byteLength >= data.byteLength) {\n        gl.bufferSubData(glBuffer.type, 0, data, 0, buffer._updateSize / data.BYTES_PER_ELEMENT);\n      } else {\n        glBuffer.byteLength = data.byteLength;\n        gl.bufferData(glBuffer.type, data, drawType);\n      }\n    } else {\n      glBuffer.byteLength = buffer.descriptor.size;\n      gl.bufferData(glBuffer.type, glBuffer.byteLength, drawType);\n    }\n    return glBuffer;\n  }\n  /** dispose all WebGL resources of all managed buffers */\n  destroyAll() {\n    const gl = this._gl;\n    for (const id in this._gpuBuffers) {\n      gl.deleteBuffer(this._gpuBuffers[id].buffer);\n    }\n    this._gpuBuffers = /* @__PURE__ */ Object.create(null);\n  }\n  /**\n   * Disposes buffer\n   * @param {Buffer} buffer - buffer with data\n   * @param {boolean} [contextLost=false] - If context was lost, we suppress deleteVertexArray\n   */\n  onBufferDestroy(buffer, contextLost) {\n    const glBuffer = this._gpuBuffers[buffer.uid];\n    const gl = this._gl;\n    if (!contextLost) {\n      gl.deleteBuffer(glBuffer.buffer);\n    }\n    this._gpuBuffers[buffer.uid] = null;\n  }\n  /**\n   * creates and attaches a GLBuffer object tied to the current context.\n   * @param buffer\n   * @protected\n   */\n  createGLBuffer(buffer) {\n    const { _gl: gl } = this;\n    let type = BUFFER_TYPE.ARRAY_BUFFER;\n    if (buffer.descriptor.usage & BufferUsage.INDEX) {\n      type = BUFFER_TYPE.ELEMENT_ARRAY_BUFFER;\n    } else if (buffer.descriptor.usage & BufferUsage.UNIFORM) {\n      type = BUFFER_TYPE.UNIFORM_BUFFER;\n    }\n    const glBuffer = new GlBuffer(gl.createBuffer(), type);\n    this._gpuBuffers[buffer.uid] = glBuffer;\n    buffer.on(\"destroy\", this.onBufferDestroy, this);\n    return glBuffer;\n  }\n  resetState() {\n    this._boundBufferBases = /* @__PURE__ */ Object.create(null);\n  }\n}\n/** @ignore */\nGlBufferSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem\n  ],\n  name: \"buffer\"\n};\n\nexport { GlBufferSystem };\n//# sourceMappingURL=GlBufferSystem.mjs.map\n","import { DOMAdapter } from '../../../../environment/adapter.mjs';\nimport { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { warn } from '../../../../utils/logging/warn.mjs';\n\n\"use strict\";\nconst _GlContextSystem = class _GlContextSystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    /**\n     * Features supported by current renderer.\n     * @type {object}\n     * @readonly\n     */\n    this.supports = {\n      /** Support for 32-bit indices buffer. */\n      uint32Indices: true,\n      /** Support for UniformBufferObjects */\n      uniformBufferObject: true,\n      /** Support for VertexArrayObjects */\n      vertexArrayObject: true,\n      /** Support for SRGB texture format */\n      srgbTextures: true,\n      /** Support for wrapping modes if a texture is non-power of two */\n      nonPowOf2wrapping: true,\n      /** Support for MSAA (antialiasing of dynamic textures) */\n      msaa: true,\n      /** Support for mipmaps if a texture is non-power of two */\n      nonPowOf2mipmaps: true\n    };\n    this._renderer = renderer;\n    this.extensions = /* @__PURE__ */ Object.create(null);\n    this.handleContextLost = this.handleContextLost.bind(this);\n    this.handleContextRestored = this.handleContextRestored.bind(this);\n  }\n  /**\n   * `true` if the context is lost\n   * @readonly\n   */\n  get isLost() {\n    return !this.gl || this.gl.isContextLost();\n  }\n  /**\n   * Handles the context change event.\n   * @param {WebGLRenderingContext} gl - New WebGL context.\n   */\n  contextChange(gl) {\n    this.gl = gl;\n    this._renderer.gl = gl;\n  }\n  init(options) {\n    options = { ..._GlContextSystem.defaultOptions, ...options };\n    let multiView = this.multiView = options.multiView;\n    if (options.context && multiView) {\n      warn(\"Renderer created with both a context and multiview enabled. Disabling multiView as both cannot work together.\");\n      multiView = false;\n    }\n    if (multiView) {\n      this.canvas = DOMAdapter.get().createCanvas(this._renderer.canvas.width, this._renderer.canvas.height);\n    } else {\n      this.canvas = this._renderer.view.canvas;\n    }\n    if (options.context) {\n      this.initFromContext(options.context);\n    } else {\n      const alpha = this._renderer.background.alpha < 1;\n      const premultipliedAlpha = options.premultipliedAlpha ?? true;\n      const antialias = options.antialias && !this._renderer.backBuffer.useBackBuffer;\n      this.createContext(options.preferWebGLVersion, {\n        alpha,\n        premultipliedAlpha,\n        antialias,\n        stencil: true,\n        preserveDrawingBuffer: options.preserveDrawingBuffer,\n        powerPreference: options.powerPreference ?? \"default\"\n      });\n    }\n  }\n  ensureCanvasSize(targetCanvas) {\n    if (!this.multiView) {\n      if (targetCanvas !== this.canvas) {\n        warn(\"multiView is disabled, but targetCanvas is not the main canvas\");\n      }\n      return;\n    }\n    const { canvas } = this;\n    if (canvas.width < targetCanvas.width || canvas.height < targetCanvas.height) {\n      canvas.width = Math.max(targetCanvas.width, targetCanvas.width);\n      canvas.height = Math.max(targetCanvas.height, targetCanvas.height);\n    }\n  }\n  /**\n   * Initializes the context.\n   * @protected\n   * @param {WebGLRenderingContext} gl - WebGL context\n   */\n  initFromContext(gl) {\n    this.gl = gl;\n    this.webGLVersion = gl instanceof DOMAdapter.get().getWebGLRenderingContext() ? 1 : 2;\n    this.getExtensions();\n    this.validateContext(gl);\n    this._renderer.runners.contextChange.emit(gl);\n    const element = this._renderer.view.canvas;\n    element.addEventListener(\"webglcontextlost\", this.handleContextLost, false);\n    element.addEventListener(\"webglcontextrestored\", this.handleContextRestored, false);\n  }\n  /**\n   * Initialize from context options\n   * @protected\n   * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext\n   * @param preferWebGLVersion\n   * @param {object} options - context attributes\n   */\n  createContext(preferWebGLVersion, options) {\n    let gl;\n    const canvas = this.canvas;\n    if (preferWebGLVersion === 2) {\n      gl = canvas.getContext(\"webgl2\", options);\n    }\n    if (!gl) {\n      gl = canvas.getContext(\"webgl\", options);\n      if (!gl) {\n        throw new Error(\"This browser does not support WebGL. Try using the canvas renderer\");\n      }\n    }\n    this.gl = gl;\n    this.initFromContext(this.gl);\n  }\n  /** Auto-populate the {@link GlContextSystem.extensions extensions}. */\n  getExtensions() {\n    const { gl } = this;\n    const common = {\n      anisotropicFiltering: gl.getExtension(\"EXT_texture_filter_anisotropic\"),\n      floatTextureLinear: gl.getExtension(\"OES_texture_float_linear\"),\n      s3tc: gl.getExtension(\"WEBGL_compressed_texture_s3tc\"),\n      s3tc_sRGB: gl.getExtension(\"WEBGL_compressed_texture_s3tc_srgb\"),\n      // eslint-disable-line camelcase\n      etc: gl.getExtension(\"WEBGL_compressed_texture_etc\"),\n      etc1: gl.getExtension(\"WEBGL_compressed_texture_etc1\"),\n      pvrtc: gl.getExtension(\"WEBGL_compressed_texture_pvrtc\") || gl.getExtension(\"WEBKIT_WEBGL_compressed_texture_pvrtc\"),\n      atc: gl.getExtension(\"WEBGL_compressed_texture_atc\"),\n      astc: gl.getExtension(\"WEBGL_compressed_texture_astc\"),\n      bptc: gl.getExtension(\"EXT_texture_compression_bptc\"),\n      rgtc: gl.getExtension(\"EXT_texture_compression_rgtc\"),\n      loseContext: gl.getExtension(\"WEBGL_lose_context\")\n    };\n    if (this.webGLVersion === 1) {\n      this.extensions = {\n        ...common,\n        drawBuffers: gl.getExtension(\"WEBGL_draw_buffers\"),\n        depthTexture: gl.getExtension(\"WEBGL_depth_texture\"),\n        vertexArrayObject: gl.getExtension(\"OES_vertex_array_object\") || gl.getExtension(\"MOZ_OES_vertex_array_object\") || gl.getExtension(\"WEBKIT_OES_vertex_array_object\"),\n        uint32ElementIndex: gl.getExtension(\"OES_element_index_uint\"),\n        // Floats and half-floats\n        floatTexture: gl.getExtension(\"OES_texture_float\"),\n        floatTextureLinear: gl.getExtension(\"OES_texture_float_linear\"),\n        textureHalfFloat: gl.getExtension(\"OES_texture_half_float\"),\n        textureHalfFloatLinear: gl.getExtension(\"OES_texture_half_float_linear\"),\n        vertexAttribDivisorANGLE: gl.getExtension(\"ANGLE_instanced_arrays\"),\n        srgb: gl.getExtension(\"EXT_sRGB\")\n      };\n    } else {\n      this.extensions = {\n        ...common,\n        colorBufferFloat: gl.getExtension(\"EXT_color_buffer_float\")\n      };\n      const provokeExt = gl.getExtension(\"WEBGL_provoking_vertex\");\n      if (provokeExt) {\n        provokeExt.provokingVertexWEBGL(provokeExt.FIRST_VERTEX_CONVENTION_WEBGL);\n      }\n    }\n  }\n  /**\n   * Handles a lost webgl context\n   * @param {WebGLContextEvent} event - The context lost event.\n   */\n  handleContextLost(event) {\n    event.preventDefault();\n    if (this._contextLossForced) {\n      this._contextLossForced = false;\n      setTimeout(() => {\n        if (this.gl.isContextLost()) {\n          this.extensions.loseContext?.restoreContext();\n        }\n      }, 0);\n    }\n  }\n  /** Handles a restored webgl context. */\n  handleContextRestored() {\n    this.getExtensions();\n    this._renderer.runners.contextChange.emit(this.gl);\n  }\n  destroy() {\n    const element = this._renderer.view.canvas;\n    this._renderer = null;\n    element.removeEventListener(\"webglcontextlost\", this.handleContextLost);\n    element.removeEventListener(\"webglcontextrestored\", this.handleContextRestored);\n    this.gl.useProgram(null);\n    this.extensions.loseContext?.loseContext();\n  }\n  /**\n   * this function can be called to force a webGL context loss\n   * this will release all resources on the GPU.\n   * Useful if you need to put Pixi to sleep, and save some GPU memory\n   *\n   * As soon as render is called - all resources will be created again.\n   */\n  forceContextLoss() {\n    this.extensions.loseContext?.loseContext();\n    this._contextLossForced = true;\n  }\n  /**\n   * Validate context.\n   * @param {WebGLRenderingContext} gl - Render context.\n   */\n  validateContext(gl) {\n    const attributes = gl.getContextAttributes();\n    if (attributes && !attributes.stencil) {\n      warn(\"Provided WebGL context does not have a stencil buffer, masks may not render correctly\");\n    }\n    const supports = this.supports;\n    const isWebGl2 = this.webGLVersion === 2;\n    const extensions = this.extensions;\n    supports.uint32Indices = isWebGl2 || !!extensions.uint32ElementIndex;\n    supports.uniformBufferObject = isWebGl2;\n    supports.vertexArrayObject = isWebGl2 || !!extensions.vertexArrayObject;\n    supports.srgbTextures = isWebGl2 || !!extensions.srgb;\n    supports.nonPowOf2wrapping = isWebGl2;\n    supports.nonPowOf2mipmaps = isWebGl2;\n    supports.msaa = isWebGl2;\n    if (!supports.uint32Indices) {\n      warn(\"Provided WebGL context does not support 32 index buffer, large scenes may not render correctly\");\n    }\n  }\n};\n/** @ignore */\n_GlContextSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem\n  ],\n  name: \"context\"\n};\n/** The default options for the system. */\n_GlContextSystem.defaultOptions = {\n  /**\n   * {@link WebGLOptions.context}\n   * @default null\n   */\n  context: null,\n  /**\n   * {@link WebGLOptions.premultipliedAlpha}\n   * @default true\n   */\n  premultipliedAlpha: true,\n  /**\n   * {@link WebGLOptions.preserveDrawingBuffer}\n   * @default false\n   */\n  preserveDrawingBuffer: false,\n  /**\n   * {@link WebGLOptions.powerPreference}\n   * @default default\n   */\n  powerPreference: void 0,\n  /**\n   * {@link WebGLOptions.webGLVersion}\n   * @default 2\n   */\n  preferWebGLVersion: 2,\n  /**\n   * {@link WebGLOptions.multiView}\n   * @default false\n   */\n  multiView: false\n};\nlet GlContextSystem = _GlContextSystem;\n\nexport { GlContextSystem };\n//# sourceMappingURL=GlContextSystem.mjs.map\n","import { warn } from '../../../../../utils/logging/warn.mjs';\nimport { getAttributeInfoFromFormat } from '../../../shared/geometry/utils/getAttributeInfoFromFormat.mjs';\n\n\"use strict\";\nfunction ensureAttributes(geometry, extractedData) {\n  for (const i in geometry.attributes) {\n    const attribute = geometry.attributes[i];\n    const attributeData = extractedData[i];\n    if (attributeData) {\n      attribute.format ?? (attribute.format = attributeData.format);\n      attribute.offset ?? (attribute.offset = attributeData.offset);\n      attribute.instance ?? (attribute.instance = attributeData.instance);\n    } else {\n      warn(`Attribute ${i} is not present in the shader, but is present in the geometry. Unable to infer attribute details.`);\n    }\n  }\n  ensureStartAndStride(geometry);\n}\nfunction ensureStartAndStride(geometry) {\n  const { buffers, attributes } = geometry;\n  const tempStride = {};\n  const tempStart = {};\n  for (const j in buffers) {\n    const buffer = buffers[j];\n    tempStride[buffer.uid] = 0;\n    tempStart[buffer.uid] = 0;\n  }\n  for (const j in attributes) {\n    const attribute = attributes[j];\n    tempStride[attribute.buffer.uid] += getAttributeInfoFromFormat(attribute.format).stride;\n  }\n  for (const j in attributes) {\n    const attribute = attributes[j];\n    attribute.stride ?? (attribute.stride = tempStride[attribute.buffer.uid]);\n    attribute.start ?? (attribute.start = tempStart[attribute.buffer.uid]);\n    tempStart[attribute.buffer.uid] += getAttributeInfoFromFormat(attribute.format).stride;\n  }\n}\n\nexport { ensureAttributes };\n//# sourceMappingURL=ensureAttributes.mjs.map\n","\"use strict\";\nvar GL_FORMATS = /* @__PURE__ */ ((GL_FORMATS2) => {\n  GL_FORMATS2[GL_FORMATS2[\"RGBA\"] = 6408] = \"RGBA\";\n  GL_FORMATS2[GL_FORMATS2[\"RGB\"] = 6407] = \"RGB\";\n  GL_FORMATS2[GL_FORMATS2[\"RG\"] = 33319] = \"RG\";\n  GL_FORMATS2[GL_FORMATS2[\"RED\"] = 6403] = \"RED\";\n  GL_FORMATS2[GL_FORMATS2[\"RGBA_INTEGER\"] = 36249] = \"RGBA_INTEGER\";\n  GL_FORMATS2[GL_FORMATS2[\"RGB_INTEGER\"] = 36248] = \"RGB_INTEGER\";\n  GL_FORMATS2[GL_FORMATS2[\"RG_INTEGER\"] = 33320] = \"RG_INTEGER\";\n  GL_FORMATS2[GL_FORMATS2[\"RED_INTEGER\"] = 36244] = \"RED_INTEGER\";\n  GL_FORMATS2[GL_FORMATS2[\"ALPHA\"] = 6406] = \"ALPHA\";\n  GL_FORMATS2[GL_FORMATS2[\"LUMINANCE\"] = 6409] = \"LUMINANCE\";\n  GL_FORMATS2[GL_FORMATS2[\"LUMINANCE_ALPHA\"] = 6410] = \"LUMINANCE_ALPHA\";\n  GL_FORMATS2[GL_FORMATS2[\"DEPTH_COMPONENT\"] = 6402] = \"DEPTH_COMPONENT\";\n  GL_FORMATS2[GL_FORMATS2[\"DEPTH_STENCIL\"] = 34041] = \"DEPTH_STENCIL\";\n  return GL_FORMATS2;\n})(GL_FORMATS || {});\nvar GL_TARGETS = /* @__PURE__ */ ((GL_TARGETS2) => {\n  GL_TARGETS2[GL_TARGETS2[\"TEXTURE_2D\"] = 3553] = \"TEXTURE_2D\";\n  GL_TARGETS2[GL_TARGETS2[\"TEXTURE_CUBE_MAP\"] = 34067] = \"TEXTURE_CUBE_MAP\";\n  GL_TARGETS2[GL_TARGETS2[\"TEXTURE_2D_ARRAY\"] = 35866] = \"TEXTURE_2D_ARRAY\";\n  GL_TARGETS2[GL_TARGETS2[\"TEXTURE_CUBE_MAP_POSITIVE_X\"] = 34069] = \"TEXTURE_CUBE_MAP_POSITIVE_X\";\n  GL_TARGETS2[GL_TARGETS2[\"TEXTURE_CUBE_MAP_NEGATIVE_X\"] = 34070] = \"TEXTURE_CUBE_MAP_NEGATIVE_X\";\n  GL_TARGETS2[GL_TARGETS2[\"TEXTURE_CUBE_MAP_POSITIVE_Y\"] = 34071] = \"TEXTURE_CUBE_MAP_POSITIVE_Y\";\n  GL_TARGETS2[GL_TARGETS2[\"TEXTURE_CUBE_MAP_NEGATIVE_Y\"] = 34072] = \"TEXTURE_CUBE_MAP_NEGATIVE_Y\";\n  GL_TARGETS2[GL_TARGETS2[\"TEXTURE_CUBE_MAP_POSITIVE_Z\"] = 34073] = \"TEXTURE_CUBE_MAP_POSITIVE_Z\";\n  GL_TARGETS2[GL_TARGETS2[\"TEXTURE_CUBE_MAP_NEGATIVE_Z\"] = 34074] = \"TEXTURE_CUBE_MAP_NEGATIVE_Z\";\n  return GL_TARGETS2;\n})(GL_TARGETS || {});\nvar GL_WRAP_MODES = /* @__PURE__ */ ((GL_WRAP_MODES2) => {\n  GL_WRAP_MODES2[GL_WRAP_MODES2[\"CLAMP\"] = 33071] = \"CLAMP\";\n  GL_WRAP_MODES2[GL_WRAP_MODES2[\"REPEAT\"] = 10497] = \"REPEAT\";\n  GL_WRAP_MODES2[GL_WRAP_MODES2[\"MIRRORED_REPEAT\"] = 33648] = \"MIRRORED_REPEAT\";\n  return GL_WRAP_MODES2;\n})(GL_WRAP_MODES || {});\nvar GL_TYPES = /* @__PURE__ */ ((GL_TYPES2) => {\n  GL_TYPES2[GL_TYPES2[\"UNSIGNED_BYTE\"] = 5121] = \"UNSIGNED_BYTE\";\n  GL_TYPES2[GL_TYPES2[\"UNSIGNED_SHORT\"] = 5123] = \"UNSIGNED_SHORT\";\n  GL_TYPES2[GL_TYPES2[\"UNSIGNED_SHORT_5_6_5\"] = 33635] = \"UNSIGNED_SHORT_5_6_5\";\n  GL_TYPES2[GL_TYPES2[\"UNSIGNED_SHORT_4_4_4_4\"] = 32819] = \"UNSIGNED_SHORT_4_4_4_4\";\n  GL_TYPES2[GL_TYPES2[\"UNSIGNED_SHORT_5_5_5_1\"] = 32820] = \"UNSIGNED_SHORT_5_5_5_1\";\n  GL_TYPES2[GL_TYPES2[\"UNSIGNED_INT\"] = 5125] = \"UNSIGNED_INT\";\n  GL_TYPES2[GL_TYPES2[\"UNSIGNED_INT_10F_11F_11F_REV\"] = 35899] = \"UNSIGNED_INT_10F_11F_11F_REV\";\n  GL_TYPES2[GL_TYPES2[\"UNSIGNED_INT_2_10_10_10_REV\"] = 33640] = \"UNSIGNED_INT_2_10_10_10_REV\";\n  GL_TYPES2[GL_TYPES2[\"UNSIGNED_INT_24_8\"] = 34042] = \"UNSIGNED_INT_24_8\";\n  GL_TYPES2[GL_TYPES2[\"UNSIGNED_INT_5_9_9_9_REV\"] = 35902] = \"UNSIGNED_INT_5_9_9_9_REV\";\n  GL_TYPES2[GL_TYPES2[\"BYTE\"] = 5120] = \"BYTE\";\n  GL_TYPES2[GL_TYPES2[\"SHORT\"] = 5122] = \"SHORT\";\n  GL_TYPES2[GL_TYPES2[\"INT\"] = 5124] = \"INT\";\n  GL_TYPES2[GL_TYPES2[\"FLOAT\"] = 5126] = \"FLOAT\";\n  GL_TYPES2[GL_TYPES2[\"FLOAT_32_UNSIGNED_INT_24_8_REV\"] = 36269] = \"FLOAT_32_UNSIGNED_INT_24_8_REV\";\n  GL_TYPES2[GL_TYPES2[\"HALF_FLOAT\"] = 36193] = \"HALF_FLOAT\";\n  return GL_TYPES2;\n})(GL_TYPES || {});\n\nexport { GL_FORMATS, GL_TARGETS, GL_TYPES, GL_WRAP_MODES };\n//# sourceMappingURL=const.mjs.map\n","import { GL_TYPES } from '../../texture/const.mjs';\n\n\"use strict\";\nconst infoMap = {\n  uint8x2: GL_TYPES.UNSIGNED_BYTE,\n  uint8x4: GL_TYPES.UNSIGNED_BYTE,\n  sint8x2: GL_TYPES.BYTE,\n  sint8x4: GL_TYPES.BYTE,\n  unorm8x2: GL_TYPES.UNSIGNED_BYTE,\n  unorm8x4: GL_TYPES.UNSIGNED_BYTE,\n  snorm8x2: GL_TYPES.BYTE,\n  snorm8x4: GL_TYPES.BYTE,\n  uint16x2: GL_TYPES.UNSIGNED_SHORT,\n  uint16x4: GL_TYPES.UNSIGNED_SHORT,\n  sint16x2: GL_TYPES.SHORT,\n  sint16x4: GL_TYPES.SHORT,\n  unorm16x2: GL_TYPES.UNSIGNED_SHORT,\n  unorm16x4: GL_TYPES.UNSIGNED_SHORT,\n  snorm16x2: GL_TYPES.SHORT,\n  snorm16x4: GL_TYPES.SHORT,\n  float16x2: GL_TYPES.HALF_FLOAT,\n  float16x4: GL_TYPES.HALF_FLOAT,\n  float32: GL_TYPES.FLOAT,\n  float32x2: GL_TYPES.FLOAT,\n  float32x3: GL_TYPES.FLOAT,\n  float32x4: GL_TYPES.FLOAT,\n  uint32: GL_TYPES.UNSIGNED_INT,\n  uint32x2: GL_TYPES.UNSIGNED_INT,\n  uint32x3: GL_TYPES.UNSIGNED_INT,\n  uint32x4: GL_TYPES.UNSIGNED_INT,\n  sint32: GL_TYPES.INT,\n  sint32x2: GL_TYPES.INT,\n  sint32x3: GL_TYPES.INT,\n  sint32x4: GL_TYPES.INT\n};\nfunction getGlTypeFromFormat(format) {\n  return infoMap[format] ?? infoMap.float32;\n}\n\nexport { getGlTypeFromFormat };\n//# sourceMappingURL=getGlTypeFromFormat.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { getAttributeInfoFromFormat } from '../../shared/geometry/utils/getAttributeInfoFromFormat.mjs';\nimport { ensureAttributes } from '../shader/program/ensureAttributes.mjs';\nimport { getGlTypeFromFormat } from './utils/getGlTypeFromFormat.mjs';\n\n\"use strict\";\nconst topologyToGlMap = {\n  \"point-list\": 0,\n  \"line-list\": 1,\n  \"line-strip\": 3,\n  \"triangle-list\": 4,\n  \"triangle-strip\": 5\n};\nclass GlGeometrySystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    this._geometryVaoHash = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n    this._activeGeometry = null;\n    this._activeVao = null;\n    this.hasVao = true;\n    this.hasInstance = true;\n    this._renderer.renderableGC.addManagedHash(this, \"_geometryVaoHash\");\n  }\n  /** Sets up the renderer context and necessary buffers. */\n  contextChange() {\n    const gl = this.gl = this._renderer.gl;\n    if (!this._renderer.context.supports.vertexArrayObject) {\n      throw new Error(\"[PixiJS] Vertex Array Objects are not supported on this device\");\n    }\n    const nativeVaoExtension = this._renderer.context.extensions.vertexArrayObject;\n    if (nativeVaoExtension) {\n      gl.createVertexArray = () => nativeVaoExtension.createVertexArrayOES();\n      gl.bindVertexArray = (vao) => nativeVaoExtension.bindVertexArrayOES(vao);\n      gl.deleteVertexArray = (vao) => nativeVaoExtension.deleteVertexArrayOES(vao);\n    }\n    const nativeInstancedExtension = this._renderer.context.extensions.vertexAttribDivisorANGLE;\n    if (nativeInstancedExtension) {\n      gl.drawArraysInstanced = (a, b, c, d) => {\n        nativeInstancedExtension.drawArraysInstancedANGLE(a, b, c, d);\n      };\n      gl.drawElementsInstanced = (a, b, c, d, e) => {\n        nativeInstancedExtension.drawElementsInstancedANGLE(a, b, c, d, e);\n      };\n      gl.vertexAttribDivisor = (a, b) => nativeInstancedExtension.vertexAttribDivisorANGLE(a, b);\n    }\n    this._activeGeometry = null;\n    this._activeVao = null;\n    this._geometryVaoHash = /* @__PURE__ */ Object.create(null);\n  }\n  /**\n   * Binds geometry so that is can be drawn. Creating a Vao if required\n   * @param geometry - Instance of geometry to bind.\n   * @param program - Instance of program to use vao for.\n   */\n  bind(geometry, program) {\n    const gl = this.gl;\n    this._activeGeometry = geometry;\n    const vao = this.getVao(geometry, program);\n    if (this._activeVao !== vao) {\n      this._activeVao = vao;\n      gl.bindVertexArray(vao);\n    }\n    this.updateBuffers();\n  }\n  /** Reset and unbind any active VAO and geometry. */\n  resetState() {\n    this.unbind();\n  }\n  /** Update buffers of the currently bound geometry. */\n  updateBuffers() {\n    const geometry = this._activeGeometry;\n    const bufferSystem = this._renderer.buffer;\n    for (let i = 0; i < geometry.buffers.length; i++) {\n      const buffer = geometry.buffers[i];\n      bufferSystem.updateBuffer(buffer);\n    }\n  }\n  /**\n   * Check compatibility between a geometry and a program\n   * @param geometry - Geometry instance.\n   * @param program - Program instance.\n   */\n  checkCompatibility(geometry, program) {\n    const geometryAttributes = geometry.attributes;\n    const shaderAttributes = program._attributeData;\n    for (const j in shaderAttributes) {\n      if (!geometryAttributes[j]) {\n        throw new Error(`shader and geometry incompatible, geometry missing the \"${j}\" attribute`);\n      }\n    }\n  }\n  /**\n   * Takes a geometry and program and generates a unique signature for them.\n   * @param geometry - To get signature from.\n   * @param program - To test geometry against.\n   * @returns - Unique signature of the geometry and program\n   */\n  getSignature(geometry, program) {\n    const attribs = geometry.attributes;\n    const shaderAttributes = program._attributeData;\n    const strings = [\"g\", geometry.uid];\n    for (const i in attribs) {\n      if (shaderAttributes[i]) {\n        strings.push(i, shaderAttributes[i].location);\n      }\n    }\n    return strings.join(\"-\");\n  }\n  getVao(geometry, program) {\n    return this._geometryVaoHash[geometry.uid]?.[program._key] || this.initGeometryVao(geometry, program);\n  }\n  /**\n   * Creates or gets Vao with the same structure as the geometry and stores it on the geometry.\n   * If vao is created, it is bound automatically. We use a shader to infer what and how to set up the\n   * attribute locations.\n   * @param geometry - Instance of geometry to to generate Vao for.\n   * @param program\n   * @param _incRefCount - Increment refCount of all geometry buffers.\n   */\n  initGeometryVao(geometry, program, _incRefCount = true) {\n    const gl = this._renderer.gl;\n    const bufferSystem = this._renderer.buffer;\n    this._renderer.shader._getProgramData(program);\n    this.checkCompatibility(geometry, program);\n    const signature = this.getSignature(geometry, program);\n    if (!this._geometryVaoHash[geometry.uid]) {\n      this._geometryVaoHash[geometry.uid] = /* @__PURE__ */ Object.create(null);\n      geometry.on(\"destroy\", this.onGeometryDestroy, this);\n    }\n    const vaoObjectHash = this._geometryVaoHash[geometry.uid];\n    let vao = vaoObjectHash[signature];\n    if (vao) {\n      vaoObjectHash[program._key] = vao;\n      return vao;\n    }\n    ensureAttributes(geometry, program._attributeData);\n    const buffers = geometry.buffers;\n    vao = gl.createVertexArray();\n    gl.bindVertexArray(vao);\n    for (let i = 0; i < buffers.length; i++) {\n      const buffer = buffers[i];\n      bufferSystem.bind(buffer);\n    }\n    this.activateVao(geometry, program);\n    vaoObjectHash[program._key] = vao;\n    vaoObjectHash[signature] = vao;\n    gl.bindVertexArray(null);\n    return vao;\n  }\n  /**\n   * Disposes geometry.\n   * @param geometry - Geometry with buffers. Only VAO will be disposed\n   * @param [contextLost=false] - If context was lost, we suppress deleteVertexArray\n   */\n  onGeometryDestroy(geometry, contextLost) {\n    const vaoObjectHash = this._geometryVaoHash[geometry.uid];\n    const gl = this.gl;\n    if (vaoObjectHash) {\n      if (contextLost) {\n        for (const i in vaoObjectHash) {\n          if (this._activeVao !== vaoObjectHash[i]) {\n            this.unbind();\n          }\n          gl.deleteVertexArray(vaoObjectHash[i]);\n        }\n      }\n      this._geometryVaoHash[geometry.uid] = null;\n    }\n  }\n  /**\n   * Dispose all WebGL resources of all managed geometries.\n   * @param [contextLost=false] - If context was lost, we suppress `gl.delete` calls\n   */\n  destroyAll(contextLost = false) {\n    const gl = this.gl;\n    for (const i in this._geometryVaoHash) {\n      if (contextLost) {\n        for (const j in this._geometryVaoHash[i]) {\n          const vaoObjectHash = this._geometryVaoHash[i];\n          if (this._activeVao !== vaoObjectHash) {\n            this.unbind();\n          }\n          gl.deleteVertexArray(vaoObjectHash[j]);\n        }\n      }\n      this._geometryVaoHash[i] = null;\n    }\n  }\n  /**\n   * Activate vertex array object.\n   * @param geometry - Geometry instance.\n   * @param program - Shader program instance.\n   */\n  activateVao(geometry, program) {\n    const gl = this._renderer.gl;\n    const bufferSystem = this._renderer.buffer;\n    const attributes = geometry.attributes;\n    if (geometry.indexBuffer) {\n      bufferSystem.bind(geometry.indexBuffer);\n    }\n    let lastBuffer = null;\n    for (const j in attributes) {\n      const attribute = attributes[j];\n      const buffer = attribute.buffer;\n      const glBuffer = bufferSystem.getGlBuffer(buffer);\n      const programAttrib = program._attributeData[j];\n      if (programAttrib) {\n        if (lastBuffer !== glBuffer) {\n          bufferSystem.bind(buffer);\n          lastBuffer = glBuffer;\n        }\n        const location = programAttrib.location;\n        gl.enableVertexAttribArray(location);\n        const attributeInfo = getAttributeInfoFromFormat(attribute.format);\n        const type = getGlTypeFromFormat(attribute.format);\n        if (programAttrib.format?.substring(1, 4) === \"int\") {\n          gl.vertexAttribIPointer(\n            location,\n            attributeInfo.size,\n            type,\n            attribute.stride,\n            attribute.offset\n          );\n        } else {\n          gl.vertexAttribPointer(\n            location,\n            attributeInfo.size,\n            type,\n            attributeInfo.normalised,\n            attribute.stride,\n            attribute.offset\n          );\n        }\n        if (attribute.instance) {\n          if (this.hasInstance) {\n            const divisor = attribute.divisor ?? 1;\n            gl.vertexAttribDivisor(location, divisor);\n          } else {\n            throw new Error(\"geometry error, GPU Instancing is not supported on this device\");\n          }\n        }\n      }\n    }\n  }\n  /**\n   * Draws the currently bound geometry.\n   * @param topology - The type primitive to render.\n   * @param size - The number of elements to be rendered. If not specified, all vertices after the\n   *  starting vertex will be drawn.\n   * @param start - The starting vertex in the geometry to start drawing from. If not specified,\n   *  drawing will start from the first vertex.\n   * @param instanceCount - The number of instances of the set of elements to execute. If not specified,\n   *  all instances will be drawn.\n   * @returns This instance of the geometry system.\n   */\n  draw(topology, size, start, instanceCount) {\n    const { gl } = this._renderer;\n    const geometry = this._activeGeometry;\n    const glTopology = topologyToGlMap[topology || geometry.topology];\n    instanceCount ?? (instanceCount = geometry.instanceCount);\n    if (geometry.indexBuffer) {\n      const byteSize = geometry.indexBuffer.data.BYTES_PER_ELEMENT;\n      const glType = byteSize === 2 ? gl.UNSIGNED_SHORT : gl.UNSIGNED_INT;\n      if (instanceCount !== 1) {\n        gl.drawElementsInstanced(glTopology, size || geometry.indexBuffer.data.length, glType, (start || 0) * byteSize, instanceCount);\n      } else {\n        gl.drawElements(glTopology, size || geometry.indexBuffer.data.length, glType, (start || 0) * byteSize);\n      }\n    } else if (instanceCount !== 1) {\n      gl.drawArraysInstanced(glTopology, start || 0, size || geometry.getSize(), instanceCount);\n    } else {\n      gl.drawArrays(glTopology, start || 0, size || geometry.getSize());\n    }\n    return this;\n  }\n  /** Unbind/reset everything. */\n  unbind() {\n    this.gl.bindVertexArray(null);\n    this._activeVao = null;\n    this._activeGeometry = null;\n  }\n  destroy() {\n    this._renderer = null;\n    this.gl = null;\n    this._activeVao = null;\n    this._activeGeometry = null;\n    this._geometryVaoHash = null;\n  }\n}\n/** @ignore */\nGlGeometrySystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem\n  ],\n  name: \"geometry\"\n};\n\nexport { GlGeometrySystem };\n//# sourceMappingURL=GlGeometrySystem.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { warn } from '../../../utils/logging/warn.mjs';\nimport { Geometry } from '../shared/geometry/Geometry.mjs';\nimport { Shader } from '../shared/shader/Shader.mjs';\nimport { State } from '../shared/state/State.mjs';\nimport { TextureSource } from '../shared/texture/sources/TextureSource.mjs';\nimport { Texture } from '../shared/texture/Texture.mjs';\nimport { GlProgram } from './shader/GlProgram.mjs';\n\n\"use strict\";\nconst bigTriangleGeometry = new Geometry({\n  attributes: {\n    aPosition: [\n      -1,\n      -1,\n      // Bottom left corner\n      3,\n      -1,\n      // Bottom right corner, extending beyond right edge\n      -1,\n      3\n      // Top left corner, extending beyond top edge\n    ]\n  }\n});\nconst _GlBackBufferSystem = class _GlBackBufferSystem {\n  constructor(renderer) {\n    /** if true, the back buffer is used */\n    this.useBackBuffer = false;\n    this._useBackBufferThisRender = false;\n    this._renderer = renderer;\n  }\n  init(options = {}) {\n    const { useBackBuffer, antialias } = { ..._GlBackBufferSystem.defaultOptions, ...options };\n    this.useBackBuffer = useBackBuffer;\n    this._antialias = antialias;\n    if (!this._renderer.context.supports.msaa) {\n      warn(\"antialiasing, is not supported on when using the back buffer\");\n      this._antialias = false;\n    }\n    this._state = State.for2d();\n    const bigTriangleProgram = new GlProgram({\n      vertex: `\n                attribute vec2 aPosition;\n                out vec2 vUv;\n\n                void main() {\n                    gl_Position = vec4(aPosition, 0.0, 1.0);\n\n                    vUv = (aPosition + 1.0) / 2.0;\n\n                    // flip dem UVs\n                    vUv.y = 1.0 - vUv.y;\n                }`,\n      fragment: `\n                in vec2 vUv;\n                out vec4 finalColor;\n\n                uniform sampler2D uTexture;\n\n                void main() {\n                    finalColor = texture(uTexture, vUv);\n                }`,\n      name: \"big-triangle\"\n    });\n    this._bigTriangleShader = new Shader({\n      glProgram: bigTriangleProgram,\n      resources: {\n        uTexture: Texture.WHITE.source\n      }\n    });\n  }\n  /**\n   * This is called before the RenderTargetSystem is started. This is where\n   * we replace the target with the back buffer if required.\n   * @param options - The options for this render.\n   */\n  renderStart(options) {\n    const renderTarget = this._renderer.renderTarget.getRenderTarget(options.target);\n    this._useBackBufferThisRender = this.useBackBuffer && !!renderTarget.isRoot;\n    if (this._useBackBufferThisRender) {\n      const renderTarget2 = this._renderer.renderTarget.getRenderTarget(options.target);\n      this._targetTexture = renderTarget2.colorTexture;\n      options.target = this._getBackBufferTexture(renderTarget2.colorTexture);\n    }\n  }\n  renderEnd() {\n    this._presentBackBuffer();\n  }\n  _presentBackBuffer() {\n    const renderer = this._renderer;\n    renderer.renderTarget.finishRenderPass();\n    if (!this._useBackBufferThisRender)\n      return;\n    renderer.renderTarget.bind(this._targetTexture, false);\n    this._bigTriangleShader.resources.uTexture = this._backBufferTexture.source;\n    renderer.encoder.draw({\n      geometry: bigTriangleGeometry,\n      shader: this._bigTriangleShader,\n      state: this._state\n    });\n  }\n  _getBackBufferTexture(targetSourceTexture) {\n    this._backBufferTexture = this._backBufferTexture || new Texture({\n      source: new TextureSource({\n        width: targetSourceTexture.width,\n        height: targetSourceTexture.height,\n        resolution: targetSourceTexture._resolution,\n        antialias: this._antialias\n      })\n    });\n    this._backBufferTexture.source.resize(\n      targetSourceTexture.width,\n      targetSourceTexture.height,\n      targetSourceTexture._resolution\n    );\n    return this._backBufferTexture;\n  }\n  /** destroys the back buffer */\n  destroy() {\n    if (this._backBufferTexture) {\n      this._backBufferTexture.destroy();\n      this._backBufferTexture = null;\n    }\n  }\n};\n/** @ignore */\n_GlBackBufferSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem\n  ],\n  name: \"backBuffer\",\n  priority: 1\n};\n/** default options for the back buffer system */\n_GlBackBufferSystem.defaultOptions = {\n  /** if true will use the back buffer where required */\n  useBackBuffer: false\n};\nlet GlBackBufferSystem = _GlBackBufferSystem;\n\nexport { GlBackBufferSystem };\n//# sourceMappingURL=GlBackBufferSystem.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\n\n\"use strict\";\nclass GlColorMaskSystem {\n  constructor(renderer) {\n    this._colorMaskCache = 15;\n    this._renderer = renderer;\n  }\n  setMask(colorMask) {\n    if (this._colorMaskCache === colorMask)\n      return;\n    this._colorMaskCache = colorMask;\n    this._renderer.gl.colorMask(\n      !!(colorMask & 8),\n      !!(colorMask & 4),\n      !!(colorMask & 2),\n      !!(colorMask & 1)\n    );\n  }\n}\n/** @ignore */\nGlColorMaskSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem\n  ],\n  name: \"colorMask\"\n};\n\nexport { GlColorMaskSystem };\n//# sourceMappingURL=GlColorMaskSystem.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\n\n\"use strict\";\nclass GlEncoderSystem {\n  constructor(renderer) {\n    this.commandFinished = Promise.resolve();\n    this._renderer = renderer;\n  }\n  setGeometry(geometry, shader) {\n    this._renderer.geometry.bind(geometry, shader.glProgram);\n  }\n  finishRenderPass() {\n  }\n  draw(options) {\n    const renderer = this._renderer;\n    const { geometry, shader, state, skipSync, topology: type, size, start, instanceCount } = options;\n    renderer.shader.bind(shader, skipSync);\n    renderer.geometry.bind(geometry, renderer.shader._activeProgram);\n    if (state) {\n      renderer.state.set(state);\n    }\n    renderer.geometry.draw(type, size, start, instanceCount ?? geometry.instanceCount);\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nGlEncoderSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem\n  ],\n  name: \"encoder\"\n};\n\nexport { GlEncoderSystem };\n//# sourceMappingURL=GlEncoderSystem.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { checkMaxIfStatementsInShader } from '../../batcher/gl/utils/checkMaxIfStatementsInShader.mjs';\n\n\"use strict\";\nclass GlLimitsSystem {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  contextChange() {\n    const gl = this._renderer.gl;\n    this.maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n    this.maxBatchableTextures = checkMaxIfStatementsInShader(this.maxTextures, gl);\n    const isWebGl2 = this._renderer.context.webGLVersion === 2;\n    this.maxUniformBindings = isWebGl2 ? gl.getParameter(gl.MAX_UNIFORM_BUFFER_BINDINGS) : 0;\n  }\n  destroy() {\n  }\n}\n/** @ignore */\nGlLimitsSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem\n  ],\n  name: \"limits\"\n};\n\nexport { GlLimitsSystem };\n//# sourceMappingURL=GlLimitsSystem.mjs.map\n","\"use strict\";\nclass GlRenderTarget {\n  constructor() {\n    this.width = -1;\n    this.height = -1;\n    this.msaa = false;\n    this.msaaRenderBuffer = [];\n  }\n}\n\nexport { GlRenderTarget };\n//# sourceMappingURL=GlRenderTarget.mjs.map\n","import { STENCIL_MODES } from '../../shared/state/const.mjs';\n\n\"use strict\";\nconst GpuStencilModesToPixi = [];\nGpuStencilModesToPixi[STENCIL_MODES.NONE] = void 0;\nGpuStencilModesToPixi[STENCIL_MODES.DISABLED] = {\n  stencilWriteMask: 0,\n  stencilReadMask: 0\n};\nGpuStencilModesToPixi[STENCIL_MODES.RENDERING_MASK_ADD] = {\n  stencilFront: {\n    compare: \"equal\",\n    passOp: \"increment-clamp\"\n  },\n  stencilBack: {\n    compare: \"equal\",\n    passOp: \"increment-clamp\"\n  }\n};\nGpuStencilModesToPixi[STENCIL_MODES.RENDERING_MASK_REMOVE] = {\n  stencilFront: {\n    compare: \"equal\",\n    passOp: \"decrement-clamp\"\n  },\n  stencilBack: {\n    compare: \"equal\",\n    passOp: \"decrement-clamp\"\n  }\n};\nGpuStencilModesToPixi[STENCIL_MODES.MASK_ACTIVE] = {\n  stencilWriteMask: 0,\n  stencilFront: {\n    compare: \"equal\",\n    passOp: \"keep\"\n  },\n  stencilBack: {\n    compare: \"equal\",\n    passOp: \"keep\"\n  }\n};\nGpuStencilModesToPixi[STENCIL_MODES.INVERSE_MASK_ACTIVE] = {\n  stencilWriteMask: 0,\n  stencilFront: {\n    compare: \"not-equal\",\n    passOp: \"keep\"\n  },\n  stencilBack: {\n    compare: \"not-equal\",\n    passOp: \"keep\"\n  }\n};\n\nexport { GpuStencilModesToPixi };\n//# sourceMappingURL=GpuStencilModesToPixi.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { GpuStencilModesToPixi } from '../gpu/state/GpuStencilModesToPixi.mjs';\nimport { STENCIL_MODES } from '../shared/state/const.mjs';\n\n\"use strict\";\nclass GlStencilSystem {\n  constructor(renderer) {\n    this._stencilCache = {\n      enabled: false,\n      stencilReference: 0,\n      stencilMode: STENCIL_MODES.NONE\n    };\n    this._renderTargetStencilState = /* @__PURE__ */ Object.create(null);\n    renderer.renderTarget.onRenderTargetChange.add(this);\n  }\n  contextChange(gl) {\n    this._gl = gl;\n    this._comparisonFuncMapping = {\n      always: gl.ALWAYS,\n      never: gl.NEVER,\n      equal: gl.EQUAL,\n      \"not-equal\": gl.NOTEQUAL,\n      less: gl.LESS,\n      \"less-equal\": gl.LEQUAL,\n      greater: gl.GREATER,\n      \"greater-equal\": gl.GEQUAL\n    };\n    this._stencilOpsMapping = {\n      keep: gl.KEEP,\n      zero: gl.ZERO,\n      replace: gl.REPLACE,\n      invert: gl.INVERT,\n      \"increment-clamp\": gl.INCR,\n      \"decrement-clamp\": gl.DECR,\n      \"increment-wrap\": gl.INCR_WRAP,\n      \"decrement-wrap\": gl.DECR_WRAP\n    };\n    this.resetState();\n  }\n  onRenderTargetChange(renderTarget) {\n    if (this._activeRenderTarget === renderTarget)\n      return;\n    this._activeRenderTarget = renderTarget;\n    let stencilState = this._renderTargetStencilState[renderTarget.uid];\n    if (!stencilState) {\n      stencilState = this._renderTargetStencilState[renderTarget.uid] = {\n        stencilMode: STENCIL_MODES.DISABLED,\n        stencilReference: 0\n      };\n    }\n    this.setStencilMode(stencilState.stencilMode, stencilState.stencilReference);\n  }\n  resetState() {\n    this._stencilCache.enabled = false;\n    this._stencilCache.stencilMode = STENCIL_MODES.NONE;\n    this._stencilCache.stencilReference = 0;\n  }\n  setStencilMode(stencilMode, stencilReference) {\n    const stencilState = this._renderTargetStencilState[this._activeRenderTarget.uid];\n    const gl = this._gl;\n    const mode = GpuStencilModesToPixi[stencilMode];\n    const _stencilCache = this._stencilCache;\n    stencilState.stencilMode = stencilMode;\n    stencilState.stencilReference = stencilReference;\n    if (stencilMode === STENCIL_MODES.DISABLED) {\n      if (this._stencilCache.enabled) {\n        this._stencilCache.enabled = false;\n        gl.disable(gl.STENCIL_TEST);\n      }\n      return;\n    }\n    if (!this._stencilCache.enabled) {\n      this._stencilCache.enabled = true;\n      gl.enable(gl.STENCIL_TEST);\n    }\n    if (stencilMode !== _stencilCache.stencilMode || _stencilCache.stencilReference !== stencilReference) {\n      _stencilCache.stencilMode = stencilMode;\n      _stencilCache.stencilReference = stencilReference;\n      gl.stencilFunc(this._comparisonFuncMapping[mode.stencilBack.compare], stencilReference, 255);\n      gl.stencilOp(gl.KEEP, gl.KEEP, this._stencilOpsMapping[mode.stencilBack.passOp]);\n    }\n  }\n}\n/** @ignore */\nGlStencilSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem\n  ],\n  name: \"stencil\"\n};\n\nexport { GlStencilSystem };\n//# sourceMappingURL=GlStencilSystem.mjs.map\n","import { unsafeEvalSupported } from '../../../../utils/browser/unsafeEvalSupported.mjs';\nimport { Buffer } from '../buffer/Buffer.mjs';\nimport { BufferUsage } from '../buffer/const.mjs';\n\n\"use strict\";\nclass UboSystem {\n  constructor(adaptor) {\n    /** Cache of uniform buffer layouts and sync functions, so we don't have to re-create them */\n    this._syncFunctionHash = /* @__PURE__ */ Object.create(null);\n    this._adaptor = adaptor;\n    this._systemCheck();\n  }\n  /**\n   * Overridable function by `pixi.js/unsafe-eval` to silence\n   * throwing an error if platform doesn't support unsafe-evals.\n   * @private\n   */\n  _systemCheck() {\n    if (!unsafeEvalSupported()) {\n      throw new Error(\"Current environment does not allow unsafe-eval, please use pixi.js/unsafe-eval module to enable support.\");\n    }\n  }\n  ensureUniformGroup(uniformGroup) {\n    const uniformData = this.getUniformGroupData(uniformGroup);\n    uniformGroup.buffer || (uniformGroup.buffer = new Buffer({\n      data: new Float32Array(uniformData.layout.size / 4),\n      usage: BufferUsage.UNIFORM | BufferUsage.COPY_DST\n    }));\n  }\n  getUniformGroupData(uniformGroup) {\n    return this._syncFunctionHash[uniformGroup._signature] || this._initUniformGroup(uniformGroup);\n  }\n  _initUniformGroup(uniformGroup) {\n    const uniformGroupSignature = uniformGroup._signature;\n    let uniformData = this._syncFunctionHash[uniformGroupSignature];\n    if (!uniformData) {\n      const elements = Object.keys(uniformGroup.uniformStructures).map((i) => uniformGroup.uniformStructures[i]);\n      const layout = this._adaptor.createUboElements(elements);\n      const syncFunction = this._generateUboSync(layout.uboElements);\n      uniformData = this._syncFunctionHash[uniformGroupSignature] = {\n        layout,\n        syncFunction\n      };\n    }\n    return this._syncFunctionHash[uniformGroupSignature];\n  }\n  _generateUboSync(uboElements) {\n    return this._adaptor.generateUboSync(uboElements);\n  }\n  syncUniformGroup(uniformGroup, data, offset) {\n    const uniformGroupData = this.getUniformGroupData(uniformGroup);\n    uniformGroup.buffer || (uniformGroup.buffer = new Buffer({\n      data: new Float32Array(uniformGroupData.layout.size / 4),\n      usage: BufferUsage.UNIFORM | BufferUsage.COPY_DST\n    }));\n    let dataInt32 = null;\n    if (!data) {\n      data = uniformGroup.buffer.data;\n      dataInt32 = uniformGroup.buffer.dataInt32;\n    }\n    offset || (offset = 0);\n    uniformGroupData.syncFunction(uniformGroup.uniforms, data, dataInt32, offset);\n    return true;\n  }\n  updateUniformGroup(uniformGroup) {\n    if (uniformGroup.isStatic && !uniformGroup._dirtyId)\n      return false;\n    uniformGroup._dirtyId = 0;\n    const synced = this.syncUniformGroup(uniformGroup);\n    uniformGroup.buffer.update();\n    return synced;\n  }\n  destroy() {\n    this._syncFunctionHash = null;\n  }\n}\n\nexport { UboSystem };\n//# sourceMappingURL=UboSystem.mjs.map\n","\"use strict\";\nconst WGSL_TO_STD40_SIZE = {\n  f32: 4,\n  i32: 4,\n  \"vec2<f32>\": 8,\n  \"vec3<f32>\": 12,\n  \"vec4<f32>\": 16,\n  \"vec2<i32>\": 8,\n  \"vec3<i32>\": 12,\n  \"vec4<i32>\": 16,\n  \"mat2x2<f32>\": 16 * 2,\n  \"mat3x3<f32>\": 16 * 3,\n  \"mat4x4<f32>\": 16 * 4\n  // TODO - not essential for now but support these in the future\n  // int:      4,\n  // ivec2:    8,\n  // ivec3:    12,\n  // ivec4:    16,\n  // uint:     4,\n  // uvec2:    8,\n  // uvec3:    12,\n  // uvec4:    16,\n  // bool:     4,\n  // bvec2:    8,\n  // bvec3:    12,\n  // bvec4:    16,\n  // mat2:     16 * 2,\n  // mat3:     16 * 3,\n  // mat4:     16 * 4,\n};\nfunction createUboElementsSTD40(uniformData) {\n  const uboElements = uniformData.map((data) => ({\n    data,\n    offset: 0,\n    size: 0\n  }));\n  const chunkSize = 16;\n  let size = 0;\n  let offset = 0;\n  for (let i = 0; i < uboElements.length; i++) {\n    const uboElement = uboElements[i];\n    size = WGSL_TO_STD40_SIZE[uboElement.data.type];\n    if (!size) {\n      throw new Error(`Unknown type ${uboElement.data.type}`);\n    }\n    if (uboElement.data.size > 1) {\n      size = Math.max(size, chunkSize) * uboElement.data.size;\n    }\n    const boundary = size === 12 ? 16 : size;\n    uboElement.size = size;\n    const curOffset = offset % chunkSize;\n    if (curOffset > 0 && chunkSize - curOffset < boundary) {\n      offset += (chunkSize - curOffset) % 16;\n    } else {\n      offset += (size - curOffset % size) % size;\n    }\n    uboElement.offset = offset;\n    offset += size;\n  }\n  offset = Math.ceil(offset / 16) * 16;\n  return { uboElements, size: offset };\n}\n\nexport { WGSL_TO_STD40_SIZE, createUboElementsSTD40 };\n//# sourceMappingURL=createUboElementsSTD40.mjs.map\n","\"use strict\";\nconst uniformParsers = [\n  // uploading pixi matrix object to mat3\n  {\n    type: \"mat3x3<f32>\",\n    test: (data) => {\n      const value = data.value;\n      return value.a !== void 0;\n    },\n    ubo: `\n            var matrix = uv[name].toArray(true);\n            data[offset] = matrix[0];\n            data[offset + 1] = matrix[1];\n            data[offset + 2] = matrix[2];\n            data[offset + 4] = matrix[3];\n            data[offset + 5] = matrix[4];\n            data[offset + 6] = matrix[5];\n            data[offset + 8] = matrix[6];\n            data[offset + 9] = matrix[7];\n            data[offset + 10] = matrix[8];\n        `,\n    uniform: `\n            gl.uniformMatrix3fv(ud[name].location, false, uv[name].toArray(true));\n        `\n  },\n  // uploading a pixi rectangle as a vec4\n  {\n    type: \"vec4<f32>\",\n    test: (data) => data.type === \"vec4<f32>\" && data.size === 1 && data.value.width !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.x;\n            data[offset + 1] = v.y;\n            data[offset + 2] = v.width;\n            data[offset + 3] = v.height;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.x || cv[1] !== v.y || cv[2] !== v.width || cv[3] !== v.height) {\n                cv[0] = v.x;\n                cv[1] = v.y;\n                cv[2] = v.width;\n                cv[3] = v.height;\n                gl.uniform4f(ud[name].location, v.x, v.y, v.width, v.height);\n            }\n        `\n  },\n  // uploading a pixi point as a vec2\n  {\n    type: \"vec2<f32>\",\n    test: (data) => data.type === \"vec2<f32>\" && data.size === 1 && data.value.x !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.x;\n            data[offset + 1] = v.y;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.x || cv[1] !== v.y) {\n                cv[0] = v.x;\n                cv[1] = v.y;\n                gl.uniform2f(ud[name].location, v.x, v.y);\n            }\n        `\n  },\n  // uploading a pixi color as a vec4\n  {\n    type: \"vec4<f32>\",\n    test: (data) => data.type === \"vec4<f32>\" && data.size === 1 && data.value.red !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.red;\n            data[offset + 1] = v.green;\n            data[offset + 2] = v.blue;\n            data[offset + 3] = v.alpha;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue || cv[3] !== v.alpha) {\n                cv[0] = v.red;\n                cv[1] = v.green;\n                cv[2] = v.blue;\n                cv[3] = v.alpha;\n                gl.uniform4f(ud[name].location, v.red, v.green, v.blue, v.alpha);\n            }\n        `\n  },\n  // uploading a pixi color as a vec3\n  {\n    type: \"vec3<f32>\",\n    test: (data) => data.type === \"vec3<f32>\" && data.size === 1 && data.value.red !== void 0,\n    ubo: `\n            v = uv[name];\n            data[offset] = v.red;\n            data[offset + 1] = v.green;\n            data[offset + 2] = v.blue;\n        `,\n    uniform: `\n            cv = ud[name].value;\n            v = uv[name];\n            if (cv[0] !== v.red || cv[1] !== v.green || cv[2] !== v.blue) {\n                cv[0] = v.red;\n                cv[1] = v.green;\n                cv[2] = v.blue;\n                gl.uniform3f(ud[name].location, v.red, v.green, v.blue);\n            }\n        `\n  }\n];\n\nexport { uniformParsers };\n//# sourceMappingURL=uniformParsers.mjs.map\n","import { uniformParsers } from './uniformParsers.mjs';\n\n\"use strict\";\nfunction createUboSyncFunction(uboElements, parserCode, arrayGenerationFunction, singleSettersMap) {\n  const funcFragments = [`\n        var v = null;\n        var v2 = null;\n        var t = 0;\n        var index = 0;\n        var name = null;\n        var arrayOffset = null;\n    `];\n  let prev = 0;\n  for (let i = 0; i < uboElements.length; i++) {\n    const uboElement = uboElements[i];\n    const name = uboElement.data.name;\n    let parsed = false;\n    let offset = 0;\n    for (let j = 0; j < uniformParsers.length; j++) {\n      const uniformParser = uniformParsers[j];\n      if (uniformParser.test(uboElement.data)) {\n        offset = uboElement.offset / 4;\n        funcFragments.push(\n          `name = \"${name}\";`,\n          `offset += ${offset - prev};`,\n          uniformParsers[j][parserCode] || uniformParsers[j].ubo\n        );\n        parsed = true;\n        break;\n      }\n    }\n    if (!parsed) {\n      if (uboElement.data.size > 1) {\n        offset = uboElement.offset / 4;\n        funcFragments.push(arrayGenerationFunction(uboElement, offset - prev));\n      } else {\n        const template = singleSettersMap[uboElement.data.type];\n        offset = uboElement.offset / 4;\n        funcFragments.push(\n          /* wgsl */\n          `\n                    v = uv.${name};\n                    offset += ${offset - prev};\n                    ${template};\n                `\n        );\n      }\n    }\n    prev = offset;\n  }\n  const fragmentSrc = funcFragments.join(\"\\n\");\n  return new Function(\n    \"uv\",\n    \"data\",\n    \"dataInt32\",\n    \"offset\",\n    fragmentSrc\n  );\n}\n\nexport { createUboSyncFunction };\n//# sourceMappingURL=createUboSyncFunction.mjs.map\n","\"use strict\";\nfunction loopMatrix(col, row) {\n  const total = col * row;\n  return `\n        for (let i = 0; i < ${total}; i++) {\n            data[offset + (((i / ${col})|0) * 4) + (i % ${col})] = v[i];\n        }\n    `;\n}\nconst uboSyncFunctionsSTD40 = {\n  f32: `\n        data[offset] = v;`,\n  i32: `\n        dataInt32[offset] = v;`,\n  \"vec2<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];`,\n  \"vec3<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];`,\n  \"vec4<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];`,\n  \"vec2<i32>\": `\n        dataInt32[offset] = v[0];\n        dataInt32[offset + 1] = v[1];`,\n  \"vec3<i32>\": `\n        dataInt32[offset] = v[0];\n        dataInt32[offset + 1] = v[1];\n        dataInt32[offset + 2] = v[2];`,\n  \"vec4<i32>\": `\n        dataInt32[offset] = v[0];\n        dataInt32[offset + 1] = v[1];\n        dataInt32[offset + 2] = v[2];\n        dataInt32[offset + 3] = v[3];`,\n  \"mat2x2<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 4] = v[2];\n        data[offset + 5] = v[3];`,\n  \"mat3x3<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 4] = v[3];\n        data[offset + 5] = v[4];\n        data[offset + 6] = v[5];\n        data[offset + 8] = v[6];\n        data[offset + 9] = v[7];\n        data[offset + 10] = v[8];`,\n  \"mat4x4<f32>\": `\n        for (let i = 0; i < 16; i++) {\n            data[offset + i] = v[i];\n        }`,\n  \"mat3x2<f32>\": loopMatrix(3, 2),\n  \"mat4x2<f32>\": loopMatrix(4, 2),\n  \"mat2x3<f32>\": loopMatrix(2, 3),\n  \"mat4x3<f32>\": loopMatrix(4, 3),\n  \"mat2x4<f32>\": loopMatrix(2, 4),\n  \"mat3x4<f32>\": loopMatrix(3, 4)\n};\nconst uboSyncFunctionsWGSL = {\n  ...uboSyncFunctionsSTD40,\n  \"mat2x2<f32>\": `\n        data[offset] = v[0];\n        data[offset + 1] = v[1];\n        data[offset + 2] = v[2];\n        data[offset + 3] = v[3];\n    `\n};\n\nexport { uboSyncFunctionsSTD40, uboSyncFunctionsWGSL };\n//# sourceMappingURL=uboSyncFunctions.mjs.map\n","import { WGSL_TO_STD40_SIZE } from './createUboElementsSTD40.mjs';\n\n\"use strict\";\nfunction generateArraySyncSTD40(uboElement, offsetToAdd) {\n  const rowSize = Math.max(WGSL_TO_STD40_SIZE[uboElement.data.type] / 16, 1);\n  const elementSize = uboElement.data.value.length / uboElement.data.size;\n  const remainder = (4 - elementSize % 4) % 4;\n  const data = uboElement.data.type.indexOf(\"i32\") >= 0 ? \"dataInt32\" : \"data\";\n  return `\n        v = uv.${uboElement.data.name};\n        offset += ${offsetToAdd};\n\n        arrayOffset = offset;\n\n        t = 0;\n\n        for(var i=0; i < ${uboElement.data.size * rowSize}; i++)\n        {\n            for(var j = 0; j < ${elementSize}; j++)\n            {\n                ${data}[arrayOffset++] = v[t++];\n            }\n            ${remainder !== 0 ? `arrayOffset += ${remainder};` : \"\"}\n        }\n    `;\n}\n\nexport { generateArraySyncSTD40 };\n//# sourceMappingURL=generateArraySyncSTD40.mjs.map\n","import { createUboSyncFunction } from '../../../shared/shader/utils/createUboSyncFunction.mjs';\nimport { uboSyncFunctionsSTD40 } from '../../../shared/shader/utils/uboSyncFunctions.mjs';\nimport { generateArraySyncSTD40 } from './generateArraySyncSTD40.mjs';\n\n\"use strict\";\nfunction createUboSyncFunctionSTD40(uboElements) {\n  return createUboSyncFunction(\n    uboElements,\n    \"uboStd40\",\n    generateArraySyncSTD40,\n    uboSyncFunctionsSTD40\n  );\n}\n\nexport { createUboSyncFunctionSTD40 };\n//# sourceMappingURL=createUboSyncSTD40.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { UboSystem } from '../shared/shader/UboSystem.mjs';\nimport { createUboElementsSTD40 } from './shader/utils/createUboElementsSTD40.mjs';\nimport { createUboSyncFunctionSTD40 } from './shader/utils/createUboSyncSTD40.mjs';\n\n\"use strict\";\nclass GlUboSystem extends UboSystem {\n  constructor() {\n    super({\n      createUboElements: createUboElementsSTD40,\n      generateUboSync: createUboSyncFunctionSTD40\n    });\n  }\n}\n/** @ignore */\nGlUboSystem.extension = {\n  type: [ExtensionType.WebGLSystem],\n  name: \"ubo\"\n};\n\nexport { GlUboSystem };\n//# sourceMappingURL=GlUboSystem.mjs.map\n","import { Rectangle } from '../../../../maths/shapes/Rectangle.mjs';\nimport { warn } from '../../../../utils/logging/warn.mjs';\nimport { CanvasSource } from '../../shared/texture/sources/CanvasSource.mjs';\nimport { CLEAR } from '../const.mjs';\nimport { GlRenderTarget } from '../GlRenderTarget.mjs';\n\n\"use strict\";\nclass GlRenderTargetAdaptor {\n  constructor() {\n    this._clearColorCache = [0, 0, 0, 0];\n    this._viewPortCache = new Rectangle();\n  }\n  init(renderer, renderTargetSystem) {\n    this._renderer = renderer;\n    this._renderTargetSystem = renderTargetSystem;\n    renderer.runners.contextChange.add(this);\n  }\n  contextChange() {\n    this._clearColorCache = [0, 0, 0, 0];\n    this._viewPortCache = new Rectangle();\n  }\n  copyToTexture(sourceRenderSurfaceTexture, destinationTexture, originSrc, size, originDest) {\n    const renderTargetSystem = this._renderTargetSystem;\n    const renderer = this._renderer;\n    const glRenderTarget = renderTargetSystem.getGpuRenderTarget(sourceRenderSurfaceTexture);\n    const gl = renderer.gl;\n    this.finishRenderPass(sourceRenderSurfaceTexture);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, glRenderTarget.resolveTargetFramebuffer);\n    renderer.texture.bind(destinationTexture, 0);\n    gl.copyTexSubImage2D(\n      gl.TEXTURE_2D,\n      0,\n      originDest.x,\n      originDest.y,\n      originSrc.x,\n      originSrc.y,\n      size.width,\n      size.height\n    );\n    return destinationTexture;\n  }\n  startRenderPass(renderTarget, clear = true, clearColor, viewport) {\n    const renderTargetSystem = this._renderTargetSystem;\n    const source = renderTarget.colorTexture;\n    const gpuRenderTarget = renderTargetSystem.getGpuRenderTarget(renderTarget);\n    let viewPortY = viewport.y;\n    if (renderTarget.isRoot) {\n      viewPortY = source.pixelHeight - viewport.height;\n    }\n    renderTarget.colorTextures.forEach((texture) => {\n      this._renderer.texture.unbind(texture);\n    });\n    const gl = this._renderer.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, gpuRenderTarget.framebuffer);\n    const viewPortCache = this._viewPortCache;\n    if (viewPortCache.x !== viewport.x || viewPortCache.y !== viewPortY || viewPortCache.width !== viewport.width || viewPortCache.height !== viewport.height) {\n      viewPortCache.x = viewport.x;\n      viewPortCache.y = viewPortY;\n      viewPortCache.width = viewport.width;\n      viewPortCache.height = viewport.height;\n      gl.viewport(\n        viewport.x,\n        viewPortY,\n        viewport.width,\n        viewport.height\n      );\n    }\n    if (!gpuRenderTarget.depthStencilRenderBuffer && (renderTarget.stencil || renderTarget.depth)) {\n      this._initStencil(gpuRenderTarget);\n    }\n    this.clear(renderTarget, clear, clearColor);\n  }\n  finishRenderPass(renderTarget) {\n    const renderTargetSystem = this._renderTargetSystem;\n    const glRenderTarget = renderTargetSystem.getGpuRenderTarget(renderTarget);\n    if (!glRenderTarget.msaa)\n      return;\n    const gl = this._renderer.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, glRenderTarget.resolveTargetFramebuffer);\n    gl.bindFramebuffer(gl.READ_FRAMEBUFFER, glRenderTarget.framebuffer);\n    gl.blitFramebuffer(\n      0,\n      0,\n      glRenderTarget.width,\n      glRenderTarget.height,\n      0,\n      0,\n      glRenderTarget.width,\n      glRenderTarget.height,\n      gl.COLOR_BUFFER_BIT,\n      gl.NEAREST\n    );\n    gl.bindFramebuffer(gl.FRAMEBUFFER, glRenderTarget.framebuffer);\n  }\n  initGpuRenderTarget(renderTarget) {\n    const renderer = this._renderer;\n    const gl = renderer.gl;\n    const glRenderTarget = new GlRenderTarget();\n    const colorTexture = renderTarget.colorTexture;\n    if (colorTexture instanceof CanvasSource) {\n      this._renderer.context.ensureCanvasSize(renderTarget.colorTexture.resource);\n      glRenderTarget.framebuffer = null;\n      return glRenderTarget;\n    }\n    this._initColor(renderTarget, glRenderTarget);\n    gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    return glRenderTarget;\n  }\n  destroyGpuRenderTarget(gpuRenderTarget) {\n    const gl = this._renderer.gl;\n    if (gpuRenderTarget.framebuffer) {\n      gl.deleteFramebuffer(gpuRenderTarget.framebuffer);\n      gpuRenderTarget.framebuffer = null;\n    }\n    if (gpuRenderTarget.resolveTargetFramebuffer) {\n      gl.deleteFramebuffer(gpuRenderTarget.resolveTargetFramebuffer);\n      gpuRenderTarget.resolveTargetFramebuffer = null;\n    }\n    if (gpuRenderTarget.depthStencilRenderBuffer) {\n      gl.deleteRenderbuffer(gpuRenderTarget.depthStencilRenderBuffer);\n      gpuRenderTarget.depthStencilRenderBuffer = null;\n    }\n    gpuRenderTarget.msaaRenderBuffer.forEach((renderBuffer) => {\n      gl.deleteRenderbuffer(renderBuffer);\n    });\n    gpuRenderTarget.msaaRenderBuffer = null;\n  }\n  clear(_renderTarget, clear, clearColor) {\n    if (!clear)\n      return;\n    const renderTargetSystem = this._renderTargetSystem;\n    if (typeof clear === \"boolean\") {\n      clear = clear ? CLEAR.ALL : CLEAR.NONE;\n    }\n    const gl = this._renderer.gl;\n    if (clear & CLEAR.COLOR) {\n      clearColor ?? (clearColor = renderTargetSystem.defaultClearColor);\n      const clearColorCache = this._clearColorCache;\n      const clearColorArray = clearColor;\n      if (clearColorCache[0] !== clearColorArray[0] || clearColorCache[1] !== clearColorArray[1] || clearColorCache[2] !== clearColorArray[2] || clearColorCache[3] !== clearColorArray[3]) {\n        clearColorCache[0] = clearColorArray[0];\n        clearColorCache[1] = clearColorArray[1];\n        clearColorCache[2] = clearColorArray[2];\n        clearColorCache[3] = clearColorArray[3];\n        gl.clearColor(clearColorArray[0], clearColorArray[1], clearColorArray[2], clearColorArray[3]);\n      }\n    }\n    gl.clear(clear);\n  }\n  resizeGpuRenderTarget(renderTarget) {\n    if (renderTarget.isRoot)\n      return;\n    const renderTargetSystem = this._renderTargetSystem;\n    const glRenderTarget = renderTargetSystem.getGpuRenderTarget(renderTarget);\n    this._resizeColor(renderTarget, glRenderTarget);\n    if (renderTarget.stencil || renderTarget.depth) {\n      this._resizeStencil(glRenderTarget);\n    }\n  }\n  _initColor(renderTarget, glRenderTarget) {\n    const renderer = this._renderer;\n    const gl = renderer.gl;\n    const resolveTargetFramebuffer = gl.createFramebuffer();\n    glRenderTarget.resolveTargetFramebuffer = resolveTargetFramebuffer;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, resolveTargetFramebuffer);\n    glRenderTarget.width = renderTarget.colorTexture.source.pixelWidth;\n    glRenderTarget.height = renderTarget.colorTexture.source.pixelHeight;\n    renderTarget.colorTextures.forEach((colorTexture, i) => {\n      const source = colorTexture.source;\n      if (source.antialias) {\n        if (renderer.context.supports.msaa) {\n          glRenderTarget.msaa = true;\n        } else {\n          warn(\"[RenderTexture] Antialiasing on textures is not supported in WebGL1\");\n        }\n      }\n      renderer.texture.bindSource(source, 0);\n      const glSource = renderer.texture.getGlSource(source);\n      const glTexture = glSource.texture;\n      gl.framebufferTexture2D(\n        gl.FRAMEBUFFER,\n        gl.COLOR_ATTACHMENT0 + i,\n        3553,\n        // texture.target,\n        glTexture,\n        0\n      );\n    });\n    if (glRenderTarget.msaa) {\n      const viewFramebuffer = gl.createFramebuffer();\n      glRenderTarget.framebuffer = viewFramebuffer;\n      gl.bindFramebuffer(gl.FRAMEBUFFER, viewFramebuffer);\n      renderTarget.colorTextures.forEach((_, i) => {\n        const msaaRenderBuffer = gl.createRenderbuffer();\n        glRenderTarget.msaaRenderBuffer[i] = msaaRenderBuffer;\n      });\n    } else {\n      glRenderTarget.framebuffer = resolveTargetFramebuffer;\n    }\n    this._resizeColor(renderTarget, glRenderTarget);\n  }\n  _resizeColor(renderTarget, glRenderTarget) {\n    const source = renderTarget.colorTexture.source;\n    glRenderTarget.width = source.pixelWidth;\n    glRenderTarget.height = source.pixelHeight;\n    renderTarget.colorTextures.forEach((colorTexture, i) => {\n      if (i === 0)\n        return;\n      colorTexture.source.resize(source.width, source.height, source._resolution);\n    });\n    if (glRenderTarget.msaa) {\n      const renderer = this._renderer;\n      const gl = renderer.gl;\n      const viewFramebuffer = glRenderTarget.framebuffer;\n      gl.bindFramebuffer(gl.FRAMEBUFFER, viewFramebuffer);\n      renderTarget.colorTextures.forEach((colorTexture, i) => {\n        const source2 = colorTexture.source;\n        renderer.texture.bindSource(source2, 0);\n        const glSource = renderer.texture.getGlSource(source2);\n        const glInternalFormat = glSource.internalFormat;\n        const msaaRenderBuffer = glRenderTarget.msaaRenderBuffer[i];\n        gl.bindRenderbuffer(\n          gl.RENDERBUFFER,\n          msaaRenderBuffer\n        );\n        gl.renderbufferStorageMultisample(\n          gl.RENDERBUFFER,\n          4,\n          glInternalFormat,\n          source2.pixelWidth,\n          source2.pixelHeight\n        );\n        gl.framebufferRenderbuffer(\n          gl.FRAMEBUFFER,\n          gl.COLOR_ATTACHMENT0 + i,\n          gl.RENDERBUFFER,\n          msaaRenderBuffer\n        );\n      });\n    }\n  }\n  _initStencil(glRenderTarget) {\n    if (glRenderTarget.framebuffer === null)\n      return;\n    const gl = this._renderer.gl;\n    const depthStencilRenderBuffer = gl.createRenderbuffer();\n    glRenderTarget.depthStencilRenderBuffer = depthStencilRenderBuffer;\n    gl.bindRenderbuffer(\n      gl.RENDERBUFFER,\n      depthStencilRenderBuffer\n    );\n    gl.framebufferRenderbuffer(\n      gl.FRAMEBUFFER,\n      gl.DEPTH_STENCIL_ATTACHMENT,\n      gl.RENDERBUFFER,\n      depthStencilRenderBuffer\n    );\n    this._resizeStencil(glRenderTarget);\n  }\n  _resizeStencil(glRenderTarget) {\n    const gl = this._renderer.gl;\n    gl.bindRenderbuffer(\n      gl.RENDERBUFFER,\n      glRenderTarget.depthStencilRenderBuffer\n    );\n    if (glRenderTarget.msaa) {\n      gl.renderbufferStorageMultisample(\n        gl.RENDERBUFFER,\n        4,\n        gl.DEPTH24_STENCIL8,\n        glRenderTarget.width,\n        glRenderTarget.height\n      );\n    } else {\n      gl.renderbufferStorage(\n        gl.RENDERBUFFER,\n        this._renderer.context.webGLVersion === 2 ? gl.DEPTH24_STENCIL8 : gl.DEPTH_STENCIL,\n        glRenderTarget.width,\n        glRenderTarget.height\n      );\n    }\n  }\n  prerender(renderTarget) {\n    const resource = renderTarget.colorTexture.resource;\n    if (this._renderer.context.multiView && CanvasSource.test(resource)) {\n      this._renderer.context.ensureCanvasSize(resource);\n    }\n  }\n  postrender(renderTarget) {\n    if (!this._renderer.context.multiView)\n      return;\n    if (CanvasSource.test(renderTarget.colorTexture.resource)) {\n      const contextCanvas = this._renderer.context.canvas;\n      const canvasSource = renderTarget.colorTexture;\n      canvasSource.context2D.drawImage(\n        contextCanvas,\n        0,\n        canvasSource.pixelHeight - contextCanvas.height\n      );\n    }\n  }\n}\n\nexport { GlRenderTargetAdaptor };\n//# sourceMappingURL=GlRenderTargetAdaptor.mjs.map\n","import { GlobalResourceRegistry } from '../../../../../utils/pool/GlobalResourceRegistry.mjs';\nimport { CanvasSource } from '../sources/CanvasSource.mjs';\nimport { Texture } from '../Texture.mjs';\n\n\"use strict\";\nconst canvasCache = /* @__PURE__ */ new Map();\nGlobalResourceRegistry.register(canvasCache);\nfunction getCanvasTexture(canvas, options) {\n  if (!canvasCache.has(canvas)) {\n    const texture = new Texture({\n      source: new CanvasSource({\n        resource: canvas,\n        ...options\n      })\n    });\n    const onDestroy = () => {\n      if (canvasCache.get(canvas) === texture) {\n        canvasCache.delete(canvas);\n      }\n    };\n    texture.once(\"destroy\", onDestroy);\n    texture.source.once(\"destroy\", onDestroy);\n    canvasCache.set(canvas, texture);\n  }\n  return canvasCache.get(canvas);\n}\nfunction hasCachedCanvasTexture(canvas) {\n  return canvasCache.has(canvas);\n}\n\nexport { getCanvasTexture, hasCachedCanvasTexture };\n//# sourceMappingURL=getCanvasTexture.mjs.map\n","import { uid } from '../../../../utils/data/uid.mjs';\nimport { TextureSource } from '../texture/sources/TextureSource.mjs';\nimport { Texture } from '../texture/Texture.mjs';\n\n\"use strict\";\nconst _RenderTarget = class _RenderTarget {\n  /**\n   * @param [descriptor] - Options for creating a render target.\n   */\n  constructor(descriptor = {}) {\n    /** unique id for this render target */\n    this.uid = uid(\"renderTarget\");\n    /**\n     * An array of textures that can be written to by the GPU - mostly this has one texture in Pixi, but you could\n     * write to multiple if required! (eg deferred lighting)\n     */\n    this.colorTextures = [];\n    this.dirtyId = 0;\n    this.isRoot = false;\n    this._size = new Float32Array(2);\n    /** if true, then when the render target is destroyed, it will destroy all the textures that were created for it. */\n    this._managedColorTextures = false;\n    descriptor = { ..._RenderTarget.defaultOptions, ...descriptor };\n    this.stencil = descriptor.stencil;\n    this.depth = descriptor.depth;\n    this.isRoot = descriptor.isRoot;\n    if (typeof descriptor.colorTextures === \"number\") {\n      this._managedColorTextures = true;\n      for (let i = 0; i < descriptor.colorTextures; i++) {\n        this.colorTextures.push(\n          new TextureSource({\n            width: descriptor.width,\n            height: descriptor.height,\n            resolution: descriptor.resolution,\n            antialias: descriptor.antialias\n          })\n        );\n      }\n    } else {\n      this.colorTextures = [...descriptor.colorTextures.map((texture) => texture.source)];\n      const colorSource = this.colorTexture.source;\n      this.resize(colorSource.width, colorSource.height, colorSource._resolution);\n    }\n    this.colorTexture.source.on(\"resize\", this.onSourceResize, this);\n    if (descriptor.depthStencilTexture || this.stencil) {\n      if (descriptor.depthStencilTexture instanceof Texture || descriptor.depthStencilTexture instanceof TextureSource) {\n        this.depthStencilTexture = descriptor.depthStencilTexture.source;\n      } else {\n        this.ensureDepthStencilTexture();\n      }\n    }\n  }\n  get size() {\n    const _size = this._size;\n    _size[0] = this.pixelWidth;\n    _size[1] = this.pixelHeight;\n    return _size;\n  }\n  get width() {\n    return this.colorTexture.source.width;\n  }\n  get height() {\n    return this.colorTexture.source.height;\n  }\n  get pixelWidth() {\n    return this.colorTexture.source.pixelWidth;\n  }\n  get pixelHeight() {\n    return this.colorTexture.source.pixelHeight;\n  }\n  get resolution() {\n    return this.colorTexture.source._resolution;\n  }\n  get colorTexture() {\n    return this.colorTextures[0];\n  }\n  onSourceResize(source) {\n    this.resize(source.width, source.height, source._resolution, true);\n  }\n  /**\n   * This will ensure a depthStencil texture is created for this render target.\n   * Most likely called by the mask system to make sure we have stencil buffer added.\n   * @internal\n   */\n  ensureDepthStencilTexture() {\n    if (!this.depthStencilTexture) {\n      this.depthStencilTexture = new TextureSource({\n        width: this.width,\n        height: this.height,\n        resolution: this.resolution,\n        format: \"depth24plus-stencil8\",\n        autoGenerateMipmaps: false,\n        antialias: false,\n        mipLevelCount: 1\n        // sampleCount: handled by the render target system..\n      });\n    }\n  }\n  resize(width, height, resolution = this.resolution, skipColorTexture = false) {\n    this.dirtyId++;\n    this.colorTextures.forEach((colorTexture, i) => {\n      if (skipColorTexture && i === 0)\n        return;\n      colorTexture.source.resize(width, height, resolution);\n    });\n    if (this.depthStencilTexture) {\n      this.depthStencilTexture.source.resize(width, height, resolution);\n    }\n  }\n  destroy() {\n    this.colorTexture.source.off(\"resize\", this.onSourceResize, this);\n    if (this._managedColorTextures) {\n      this.colorTextures.forEach((texture) => {\n        texture.destroy();\n      });\n    }\n    if (this.depthStencilTexture) {\n      this.depthStencilTexture.destroy();\n      delete this.depthStencilTexture;\n    }\n  }\n};\n/** The default options for a render target */\n_RenderTarget.defaultOptions = {\n  /** the width of the RenderTarget */\n  width: 0,\n  /** the height of the RenderTarget */\n  height: 0,\n  /** the resolution of the RenderTarget */\n  resolution: 1,\n  /** an array of textures, or a number indicating how many color textures there should be */\n  colorTextures: 1,\n  /** should this render target have a stencil buffer? */\n  stencil: false,\n  /** should this render target have a depth buffer? */\n  depth: false,\n  /** should this render target be antialiased? */\n  antialias: false,\n  // save on perf by default!\n  /** is this a root element, true if this is gl context owners render target */\n  isRoot: false\n};\nlet RenderTarget = _RenderTarget;\n\nexport { RenderTarget };\n//# sourceMappingURL=RenderTarget.mjs.map\n","import { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle.mjs';\nimport { CLEAR } from '../../gl/const.mjs';\nimport { calculateProjection } from '../../gpu/renderTarget/calculateProjection.mjs';\nimport { SystemRunner } from '../system/SystemRunner.mjs';\nimport { CanvasSource } from '../texture/sources/CanvasSource.mjs';\nimport { TextureSource } from '../texture/sources/TextureSource.mjs';\nimport { Texture } from '../texture/Texture.mjs';\nimport { getCanvasTexture } from '../texture/utils/getCanvasTexture.mjs';\nimport { isRenderingToScreen } from './isRenderingToScreen.mjs';\nimport { RenderTarget } from './RenderTarget.mjs';\n\n\"use strict\";\nclass RenderTargetSystem {\n  constructor(renderer) {\n    /** This is the root viewport for the render pass*/\n    this.rootViewPort = new Rectangle();\n    /** the current viewport that the gpu is using */\n    this.viewport = new Rectangle();\n    /**\n     * a runner that lets systems know if the active render target has changed.\n     * Eg the Stencil System needs to know so it can manage the stencil buffer\n     */\n    this.onRenderTargetChange = new SystemRunner(\"onRenderTargetChange\");\n    /** the projection matrix that is used by the shaders based on the active render target and the viewport */\n    this.projectionMatrix = new Matrix();\n    /** the default clear color for render targets */\n    this.defaultClearColor = [0, 0, 0, 0];\n    /**\n     * a hash that stores the render target for a given render surface. When you pass in a texture source,\n     * a render target is created for it. This map stores and makes it easy to retrieve the render target\n     */\n    this._renderSurfaceToRenderTargetHash = /* @__PURE__ */ new Map();\n    /** A hash that stores a gpu render target for a given render target. */\n    this._gpuRenderTargetHash = /* @__PURE__ */ Object.create(null);\n    /**\n     * A stack that stores the render target and frame that is currently being rendered to.\n     * When push is called, the current render target is stored in this stack.\n     * When pop is called, the previous render target is restored.\n     */\n    this._renderTargetStack = [];\n    this._renderer = renderer;\n    renderer.renderableGC.addManagedHash(this, \"_gpuRenderTargetHash\");\n  }\n  /** called when dev wants to finish a render pass */\n  finishRenderPass() {\n    this.adaptor.finishRenderPass(this.renderTarget);\n  }\n  /**\n   * called when the renderer starts to render a scene.\n   * @param options\n   * @param options.target - the render target to render to\n   * @param options.clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n   * @param options.clearColor - the color to clear to\n   * @param options.frame - the frame to render to\n   */\n  renderStart({\n    target,\n    clear,\n    clearColor,\n    frame\n  }) {\n    this._renderTargetStack.length = 0;\n    this.push(\n      target,\n      clear,\n      clearColor,\n      frame\n    );\n    this.rootViewPort.copyFrom(this.viewport);\n    this.rootRenderTarget = this.renderTarget;\n    this.renderingToScreen = isRenderingToScreen(this.rootRenderTarget);\n    this.adaptor.prerender?.(this.rootRenderTarget);\n  }\n  postrender() {\n    this.adaptor.postrender?.(this.rootRenderTarget);\n  }\n  /**\n   * Binding a render surface! This is the main function of the render target system.\n   * It will take the RenderSurface (which can be a texture, canvas, or render target) and bind it to the renderer.\n   * Once bound all draw calls will be rendered to the render surface.\n   *\n   * If a frame is not provide and the render surface is a texture, the frame of the texture will be used.\n   * @param renderSurface - the render surface to bind\n   * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n   * @param clearColor - the color to clear to\n   * @param frame - the frame to render to\n   * @returns the render target that was bound\n   */\n  bind(renderSurface, clear = true, clearColor, frame) {\n    const renderTarget = this.getRenderTarget(renderSurface);\n    const didChange = this.renderTarget !== renderTarget;\n    this.renderTarget = renderTarget;\n    this.renderSurface = renderSurface;\n    const gpuRenderTarget = this.getGpuRenderTarget(renderTarget);\n    if (renderTarget.pixelWidth !== gpuRenderTarget.width || renderTarget.pixelHeight !== gpuRenderTarget.height) {\n      this.adaptor.resizeGpuRenderTarget(renderTarget);\n      gpuRenderTarget.width = renderTarget.pixelWidth;\n      gpuRenderTarget.height = renderTarget.pixelHeight;\n    }\n    const source = renderTarget.colorTexture;\n    const viewport = this.viewport;\n    const pixelWidth = source.pixelWidth;\n    const pixelHeight = source.pixelHeight;\n    if (!frame && renderSurface instanceof Texture) {\n      frame = renderSurface.frame;\n    }\n    if (frame) {\n      const resolution = source._resolution;\n      viewport.x = frame.x * resolution + 0.5 | 0;\n      viewport.y = frame.y * resolution + 0.5 | 0;\n      viewport.width = frame.width * resolution + 0.5 | 0;\n      viewport.height = frame.height * resolution + 0.5 | 0;\n    } else {\n      viewport.x = 0;\n      viewport.y = 0;\n      viewport.width = pixelWidth;\n      viewport.height = pixelHeight;\n    }\n    calculateProjection(\n      this.projectionMatrix,\n      0,\n      0,\n      viewport.width / source.resolution,\n      viewport.height / source.resolution,\n      !renderTarget.isRoot\n    );\n    this.adaptor.startRenderPass(renderTarget, clear, clearColor, viewport);\n    if (didChange) {\n      this.onRenderTargetChange.emit(renderTarget);\n    }\n    return renderTarget;\n  }\n  clear(target, clear = CLEAR.ALL, clearColor) {\n    if (!clear)\n      return;\n    if (target) {\n      target = this.getRenderTarget(target);\n    }\n    this.adaptor.clear(\n      target || this.renderTarget,\n      clear,\n      clearColor,\n      this.viewport\n    );\n  }\n  contextChange() {\n    this._gpuRenderTargetHash = /* @__PURE__ */ Object.create(null);\n  }\n  /**\n   * Push a render surface to the renderer. This will bind the render surface to the renderer,\n   * @param renderSurface - the render surface to push\n   * @param clear - the clear mode to use. Can be true or a CLEAR number 'COLOR | DEPTH | STENCIL' 0b111\n   * @param clearColor - the color to clear to\n   * @param frame - the frame to use when rendering to the render surface\n   */\n  push(renderSurface, clear = CLEAR.ALL, clearColor, frame) {\n    const renderTarget = this.bind(renderSurface, clear, clearColor, frame);\n    this._renderTargetStack.push({\n      renderTarget,\n      frame\n    });\n    return renderTarget;\n  }\n  /** Pops the current render target from the renderer and restores the previous render target. */\n  pop() {\n    this._renderTargetStack.pop();\n    const currentRenderTargetData = this._renderTargetStack[this._renderTargetStack.length - 1];\n    this.bind(currentRenderTargetData.renderTarget, false, null, currentRenderTargetData.frame);\n  }\n  /**\n   * Gets the render target from the provide render surface. Eg if its a texture,\n   * it will return the render target for the texture.\n   * If its a render target, it will return the same render target.\n   * @param renderSurface - the render surface to get the render target for\n   * @returns the render target for the render surface\n   */\n  getRenderTarget(renderSurface) {\n    if (renderSurface.isTexture) {\n      renderSurface = renderSurface.source;\n    }\n    return this._renderSurfaceToRenderTargetHash.get(renderSurface) ?? this._initRenderTarget(renderSurface);\n  }\n  /**\n   * Copies a render surface to another texture.\n   *\n   * NOTE:\n   * for sourceRenderSurfaceTexture, The render target must be something that is written too by the renderer\n   *\n   * The following is not valid:\n   * @example\n   * const canvas = document.createElement('canvas')\n   * canvas.width = 200;\n   * canvas.height = 200;\n   *\n   * const ctx = canvas2.getContext('2d')!\n   * ctx.fillStyle = 'red'\n   * ctx.fillRect(0, 0, 200, 200);\n   *\n   * const texture = RenderTexture.create({\n   *   width: 200,\n   *   height: 200,\n   * })\n   * const renderTarget = renderer.renderTarget.getRenderTarget(canvas2);\n   *\n   * renderer.renderTarget.copyToTexture(renderTarget,texture, {x:0,y:0},{width:200,height:200},{x:0,y:0});\n   *\n   * The best way to copy a canvas is to create a texture from it. Then render with that.\n   *\n   * Parsing in a RenderTarget canvas context (with a 2d context)\n   * @param sourceRenderSurfaceTexture - the render surface to copy from\n   * @param destinationTexture - the texture to copy to\n   * @param originSrc - the origin of the copy\n   * @param originSrc.x - the x origin of the copy\n   * @param originSrc.y - the y origin of the copy\n   * @param size - the size of the copy\n   * @param size.width - the width of the copy\n   * @param size.height - the height of the copy\n   * @param originDest - the destination origin (top left to paste from!)\n   * @param originDest.x - the x origin of the paste\n   * @param originDest.y - the y origin of the paste\n   */\n  copyToTexture(sourceRenderSurfaceTexture, destinationTexture, originSrc, size, originDest) {\n    if (originSrc.x < 0) {\n      size.width += originSrc.x;\n      originDest.x -= originSrc.x;\n      originSrc.x = 0;\n    }\n    if (originSrc.y < 0) {\n      size.height += originSrc.y;\n      originDest.y -= originSrc.y;\n      originSrc.y = 0;\n    }\n    const { pixelWidth, pixelHeight } = sourceRenderSurfaceTexture;\n    size.width = Math.min(size.width, pixelWidth - originSrc.x);\n    size.height = Math.min(size.height, pixelHeight - originSrc.y);\n    return this.adaptor.copyToTexture(\n      sourceRenderSurfaceTexture,\n      destinationTexture,\n      originSrc,\n      size,\n      originDest\n    );\n  }\n  /**\n   * ensures that we have a depth stencil buffer available to render to\n   * This is used by the mask system to make sure we have a stencil buffer.\n   */\n  ensureDepthStencil() {\n    if (!this.renderTarget.stencil) {\n      this.renderTarget.stencil = true;\n      this.adaptor.startRenderPass(this.renderTarget, false, null, this.viewport);\n    }\n  }\n  /** nukes the render target system */\n  destroy() {\n    this._renderer = null;\n    this._renderSurfaceToRenderTargetHash.forEach((renderTarget, key) => {\n      if (renderTarget !== key) {\n        renderTarget.destroy();\n      }\n    });\n    this._renderSurfaceToRenderTargetHash.clear();\n    this._gpuRenderTargetHash = /* @__PURE__ */ Object.create(null);\n  }\n  _initRenderTarget(renderSurface) {\n    let renderTarget = null;\n    if (CanvasSource.test(renderSurface)) {\n      renderSurface = getCanvasTexture(renderSurface).source;\n    }\n    if (renderSurface instanceof RenderTarget) {\n      renderTarget = renderSurface;\n    } else if (renderSurface instanceof TextureSource) {\n      renderTarget = new RenderTarget({\n        colorTextures: [renderSurface]\n      });\n      if (renderSurface.source instanceof CanvasSource) {\n        renderTarget.isRoot = true;\n      }\n      renderSurface.once(\"destroy\", () => {\n        renderTarget.destroy();\n        this._renderSurfaceToRenderTargetHash.delete(renderSurface);\n        const gpuRenderTarget = this._gpuRenderTargetHash[renderTarget.uid];\n        if (gpuRenderTarget) {\n          this._gpuRenderTargetHash[renderTarget.uid] = null;\n          this.adaptor.destroyGpuRenderTarget(gpuRenderTarget);\n        }\n      });\n    }\n    this._renderSurfaceToRenderTargetHash.set(renderSurface, renderTarget);\n    return renderTarget;\n  }\n  getGpuRenderTarget(renderTarget) {\n    return this._gpuRenderTargetHash[renderTarget.uid] || (this._gpuRenderTargetHash[renderTarget.uid] = this.adaptor.initGpuRenderTarget(renderTarget));\n  }\n  resetState() {\n    this.renderTarget = null;\n    this.renderSurface = null;\n  }\n}\n\nexport { RenderTargetSystem };\n//# sourceMappingURL=RenderTargetSystem.mjs.map\n","\"use strict\";\nfunction isRenderingToScreen(renderTarget) {\n  const resource = renderTarget.colorTexture.source.resource;\n  return globalThis.HTMLCanvasElement && resource instanceof HTMLCanvasElement && document.body.contains(resource);\n}\n\nexport { isRenderingToScreen };\n//# sourceMappingURL=isRenderingToScreen.mjs.map\n","\"use strict\";\nfunction calculateProjection(pm, x, y, width, height, flipY) {\n  const sign = flipY ? 1 : -1;\n  pm.identity();\n  pm.a = 1 / width * 2;\n  pm.d = sign * (1 / height * 2);\n  pm.tx = -1 - x * pm.a;\n  pm.ty = -sign - y * pm.d;\n  return pm;\n}\n\nexport { calculateProjection };\n//# sourceMappingURL=calculateProjection.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { RenderTargetSystem } from '../../shared/renderTarget/RenderTargetSystem.mjs';\nimport { GlRenderTargetAdaptor } from './GlRenderTargetAdaptor.mjs';\n\n\"use strict\";\nclass GlRenderTargetSystem extends RenderTargetSystem {\n  constructor(renderer) {\n    super(renderer);\n    this.adaptor = new GlRenderTargetAdaptor();\n    this.adaptor.init(renderer, this);\n  }\n}\n/** @ignore */\nGlRenderTargetSystem.extension = {\n  type: [ExtensionType.WebGLSystem],\n  name: \"renderTarget\"\n};\n\nexport { GlRenderTargetSystem };\n//# sourceMappingURL=GlRenderTargetSystem.mjs.map\n","import EventEmitter from 'eventemitter3';\nimport { uid } from '../../../../utils/data/uid.mjs';\n\n\"use strict\";\nclass BufferResource extends EventEmitter {\n  /**\n   * Create a new Buffer Resource.\n   * @param options - The options for the buffer resource\n   * @param options.buffer - The underlying buffer that this resource is using\n   * @param options.offset - The offset of the buffer this resource is using.\n   * If not provided, then it will use the offset of the buffer.\n   * @param options.size - The size of the buffer this resource is using.\n   * If not provided, then it will use the size of the buffer.\n   */\n  constructor({ buffer, offset, size }) {\n    super();\n    /**\n     * emits when the underlying buffer has changed shape (i.e. resized)\n     * letting the renderer know that it needs to discard the old buffer on the GPU and create a new one\n     * @event change\n     */\n    /** a unique id for this uniform group used through the renderer */\n    this.uid = uid(\"buffer\");\n    /**\n     * a resource type, used to identify how to handle it when its in a bind group / shader resource\n     * @internal\n     */\n    this._resourceType = \"bufferResource\";\n    /**\n     * used internally to know if a uniform group was used in the last render pass\n     * @internal\n     */\n    this._touched = 0;\n    /**\n     * the resource id used internally by the renderer to build bind group keys\n     * @internal\n     */\n    this._resourceId = uid(\"resource\");\n    /**\n     * A cheeky hint to the GL renderer to let it know this is a BufferResource\n     * @internal\n     */\n    this._bufferResource = true;\n    /**\n     * Has the Buffer resource been destroyed?\n     * @readonly\n     */\n    this.destroyed = false;\n    this.buffer = buffer;\n    this.offset = offset | 0;\n    this.size = size;\n    this.buffer.on(\"change\", this.onBufferChange, this);\n  }\n  onBufferChange() {\n    this._resourceId = uid(\"resource\");\n    this.emit(\"change\", this);\n  }\n  /**\n   * Destroys this resource. Make sure the underlying buffer is not used anywhere else\n   * if you want to destroy it as well, or code will explode\n   * @param destroyBuffer - Should the underlying buffer be destroyed as well?\n   */\n  destroy(destroyBuffer = false) {\n    this.destroyed = true;\n    if (destroyBuffer) {\n      this.buffer.destroy();\n    }\n    this.emit(\"change\", this);\n    this.buffer = null;\n  }\n}\n\nexport { BufferResource };\n//# sourceMappingURL=BufferResource.mjs.map\n","\"use strict\";\nclass IGLUniformData {\n}\nclass GlProgramData {\n  /**\n   * Makes a new Pixi program.\n   * @param program - webgl program\n   * @param uniformData - uniforms\n   */\n  constructor(program, uniformData) {\n    this.program = program;\n    this.uniformData = uniformData;\n    this.uniformGroups = {};\n    this.uniformDirtyGroups = {};\n    this.uniformBlockBindings = {};\n  }\n  /** Destroys this program. */\n  destroy() {\n    this.uniformData = null;\n    this.uniformGroups = null;\n    this.uniformDirtyGroups = null;\n    this.uniformBlockBindings = null;\n    this.program = null;\n  }\n}\n\nexport { GlProgramData, IGLUniformData };\n//# sourceMappingURL=GlProgramData.mjs.map\n","\"use strict\";\nfunction compileShader(gl, type, src) {\n  const shader = gl.createShader(type);\n  gl.shaderSource(shader, src);\n  gl.compileShader(shader);\n  return shader;\n}\n\nexport { compileShader };\n//# sourceMappingURL=compileShader.mjs.map\n","\"use strict\";\nfunction booleanArray(size) {\n  const array = new Array(size);\n  for (let i = 0; i < array.length; i++) {\n    array[i] = false;\n  }\n  return array;\n}\nfunction defaultValue(type, size) {\n  switch (type) {\n    case \"float\":\n      return 0;\n    case \"vec2\":\n      return new Float32Array(2 * size);\n    case \"vec3\":\n      return new Float32Array(3 * size);\n    case \"vec4\":\n      return new Float32Array(4 * size);\n    case \"int\":\n    case \"uint\":\n    case \"sampler2D\":\n    case \"sampler2DArray\":\n      return 0;\n    case \"ivec2\":\n      return new Int32Array(2 * size);\n    case \"ivec3\":\n      return new Int32Array(3 * size);\n    case \"ivec4\":\n      return new Int32Array(4 * size);\n    case \"uvec2\":\n      return new Uint32Array(2 * size);\n    case \"uvec3\":\n      return new Uint32Array(3 * size);\n    case \"uvec4\":\n      return new Uint32Array(4 * size);\n    case \"bool\":\n      return false;\n    case \"bvec2\":\n      return booleanArray(2 * size);\n    case \"bvec3\":\n      return booleanArray(3 * size);\n    case \"bvec4\":\n      return booleanArray(4 * size);\n    case \"mat2\":\n      return new Float32Array([\n        1,\n        0,\n        0,\n        1\n      ]);\n    case \"mat3\":\n      return new Float32Array([\n        1,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        1\n      ]);\n    case \"mat4\":\n      return new Float32Array([\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1,\n        0,\n        0,\n        0,\n        0,\n        1\n      ]);\n  }\n  return null;\n}\n\nexport { defaultValue };\n//# sourceMappingURL=defaultValue.mjs.map\n","\"use strict\";\nlet GL_TABLE = null;\nconst GL_TO_GLSL_TYPES = {\n  FLOAT: \"float\",\n  FLOAT_VEC2: \"vec2\",\n  FLOAT_VEC3: \"vec3\",\n  FLOAT_VEC4: \"vec4\",\n  INT: \"int\",\n  INT_VEC2: \"ivec2\",\n  INT_VEC3: \"ivec3\",\n  INT_VEC4: \"ivec4\",\n  UNSIGNED_INT: \"uint\",\n  UNSIGNED_INT_VEC2: \"uvec2\",\n  UNSIGNED_INT_VEC3: \"uvec3\",\n  UNSIGNED_INT_VEC4: \"uvec4\",\n  BOOL: \"bool\",\n  BOOL_VEC2: \"bvec2\",\n  BOOL_VEC3: \"bvec3\",\n  BOOL_VEC4: \"bvec4\",\n  FLOAT_MAT2: \"mat2\",\n  FLOAT_MAT3: \"mat3\",\n  FLOAT_MAT4: \"mat4\",\n  SAMPLER_2D: \"sampler2D\",\n  INT_SAMPLER_2D: \"sampler2D\",\n  UNSIGNED_INT_SAMPLER_2D: \"sampler2D\",\n  SAMPLER_CUBE: \"samplerCube\",\n  INT_SAMPLER_CUBE: \"samplerCube\",\n  UNSIGNED_INT_SAMPLER_CUBE: \"samplerCube\",\n  SAMPLER_2D_ARRAY: \"sampler2DArray\",\n  INT_SAMPLER_2D_ARRAY: \"sampler2DArray\",\n  UNSIGNED_INT_SAMPLER_2D_ARRAY: \"sampler2DArray\"\n};\nconst GLSL_TO_VERTEX_TYPES = {\n  float: \"float32\",\n  vec2: \"float32x2\",\n  vec3: \"float32x3\",\n  vec4: \"float32x4\",\n  int: \"sint32\",\n  ivec2: \"sint32x2\",\n  ivec3: \"sint32x3\",\n  ivec4: \"sint32x4\",\n  uint: \"uint32\",\n  uvec2: \"uint32x2\",\n  uvec3: \"uint32x3\",\n  uvec4: \"uint32x4\",\n  bool: \"uint32\",\n  bvec2: \"uint32x2\",\n  bvec3: \"uint32x3\",\n  bvec4: \"uint32x4\"\n};\nfunction mapType(gl, type) {\n  if (!GL_TABLE) {\n    const typeNames = Object.keys(GL_TO_GLSL_TYPES);\n    GL_TABLE = {};\n    for (let i = 0; i < typeNames.length; ++i) {\n      const tn = typeNames[i];\n      GL_TABLE[gl[tn]] = GL_TO_GLSL_TYPES[tn];\n    }\n  }\n  return GL_TABLE[type];\n}\nfunction mapGlToVertexFormat(gl, type) {\n  const typeValue = mapType(gl, type);\n  return GLSL_TO_VERTEX_TYPES[typeValue] || \"float32\";\n}\n\nexport { mapGlToVertexFormat, mapType };\n//# sourceMappingURL=mapType.mjs.map\n","\"use strict\";\nfunction logPrettyShaderError(gl, shader) {\n  const shaderSrc = gl.getShaderSource(shader).split(\"\\n\").map((line, index) => `${index}: ${line}`);\n  const shaderLog = gl.getShaderInfoLog(shader);\n  const splitShader = shaderLog.split(\"\\n\");\n  const dedupe = {};\n  const lineNumbers = splitShader.map((line) => parseFloat(line.replace(/^ERROR\\: 0\\:([\\d]+)\\:.*$/, \"$1\"))).filter((n) => {\n    if (n && !dedupe[n]) {\n      dedupe[n] = true;\n      return true;\n    }\n    return false;\n  });\n  const logArgs = [\"\"];\n  lineNumbers.forEach((number) => {\n    shaderSrc[number - 1] = `%c${shaderSrc[number - 1]}%c`;\n    logArgs.push(\"background: #FF0000; color:#FFFFFF; font-size: 10px\", \"font-size: 10px\");\n  });\n  const fragmentSourceToLog = shaderSrc.join(\"\\n\");\n  logArgs[0] = fragmentSourceToLog;\n  console.error(shaderLog);\n  console.groupCollapsed(\"click to view full shader code\");\n  console.warn(...logArgs);\n  console.groupEnd();\n}\nfunction logProgramError(gl, program, vertexShader, fragmentShader) {\n  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {\n    if (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n      logPrettyShaderError(gl, vertexShader);\n    }\n    if (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n      logPrettyShaderError(gl, fragmentShader);\n    }\n    console.error(\"PixiJS Error: Could not initialize shader.\");\n    if (gl.getProgramInfoLog(program) !== \"\") {\n      console.warn(\"PixiJS Warning: gl.getProgramInfoLog()\", gl.getProgramInfoLog(program));\n    }\n  }\n}\n\nexport { logProgramError };\n//# sourceMappingURL=logProgramError.mjs.map\n","import { warn } from '../../../../../utils/logging/warn.mjs';\nimport { GlProgramData } from '../GlProgramData.mjs';\nimport { compileShader } from './compileShader.mjs';\nimport { defaultValue } from './defaultValue.mjs';\nimport { extractAttributesFromGlProgram } from './extractAttributesFromGlProgram.mjs';\nimport { getUboData } from './getUboData.mjs';\nimport { getUniformData } from './getUniformData.mjs';\nimport { logProgramError } from './logProgramError.mjs';\n\n\"use strict\";\nfunction generateProgram(gl, program) {\n  const glVertShader = compileShader(gl, gl.VERTEX_SHADER, program.vertex);\n  const glFragShader = compileShader(gl, gl.FRAGMENT_SHADER, program.fragment);\n  const webGLProgram = gl.createProgram();\n  gl.attachShader(webGLProgram, glVertShader);\n  gl.attachShader(webGLProgram, glFragShader);\n  const transformFeedbackVaryings = program.transformFeedbackVaryings;\n  if (transformFeedbackVaryings) {\n    if (typeof gl.transformFeedbackVaryings !== \"function\") {\n      warn(`TransformFeedback is not supported but TransformFeedbackVaryings are given.`);\n    } else {\n      gl.transformFeedbackVaryings(\n        webGLProgram,\n        transformFeedbackVaryings.names,\n        transformFeedbackVaryings.bufferMode === \"separate\" ? gl.SEPARATE_ATTRIBS : gl.INTERLEAVED_ATTRIBS\n      );\n    }\n  }\n  gl.linkProgram(webGLProgram);\n  if (!gl.getProgramParameter(webGLProgram, gl.LINK_STATUS)) {\n    logProgramError(gl, webGLProgram, glVertShader, glFragShader);\n  }\n  program._attributeData = extractAttributesFromGlProgram(\n    webGLProgram,\n    gl,\n    !/^[ \\t]*#[ \\t]*version[ \\t]+300[ \\t]+es[ \\t]*$/m.test(program.vertex)\n  );\n  program._uniformData = getUniformData(webGLProgram, gl);\n  program._uniformBlockData = getUboData(webGLProgram, gl);\n  gl.deleteShader(glVertShader);\n  gl.deleteShader(glFragShader);\n  const uniformData = {};\n  for (const i in program._uniformData) {\n    const data = program._uniformData[i];\n    uniformData[i] = {\n      location: gl.getUniformLocation(webGLProgram, i),\n      value: defaultValue(data.type, data.size)\n    };\n  }\n  const glProgram = new GlProgramData(webGLProgram, uniformData);\n  return glProgram;\n}\n\nexport { generateProgram };\n//# sourceMappingURL=generateProgram.mjs.map\n","import { getAttributeInfoFromFormat } from '../../../shared/geometry/utils/getAttributeInfoFromFormat.mjs';\nimport { mapGlToVertexFormat } from './mapType.mjs';\n\n\"use strict\";\nfunction extractAttributesFromGlProgram(program, gl, sortAttributes = false) {\n  const attributes = {};\n  const totalAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n  for (let i = 0; i < totalAttributes; i++) {\n    const attribData = gl.getActiveAttrib(program, i);\n    if (attribData.name.startsWith(\"gl_\")) {\n      continue;\n    }\n    const format = mapGlToVertexFormat(gl, attribData.type);\n    attributes[attribData.name] = {\n      location: 0,\n      // set further down..\n      format,\n      stride: getAttributeInfoFromFormat(format).stride,\n      offset: 0,\n      instance: false,\n      start: 0\n    };\n  }\n  const keys = Object.keys(attributes);\n  if (sortAttributes) {\n    keys.sort((a, b) => a > b ? 1 : -1);\n    for (let i = 0; i < keys.length; i++) {\n      attributes[keys[i]].location = i;\n      gl.bindAttribLocation(program, i, keys[i]);\n    }\n    gl.linkProgram(program);\n  } else {\n    for (let i = 0; i < keys.length; i++) {\n      attributes[keys[i]].location = gl.getAttribLocation(program, keys[i]);\n    }\n  }\n  return attributes;\n}\n\nexport { extractAttributesFromGlProgram };\n//# sourceMappingURL=extractAttributesFromGlProgram.mjs.map\n","import { defaultValue } from './defaultValue.mjs';\nimport { mapType } from './mapType.mjs';\n\n\"use strict\";\nfunction getUniformData(program, gl) {\n  const uniforms = {};\n  const totalUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n  for (let i = 0; i < totalUniforms; i++) {\n    const uniformData = gl.getActiveUniform(program, i);\n    const name = uniformData.name.replace(/\\[.*?\\]$/, \"\");\n    const isArray = !!uniformData.name.match(/\\[.*?\\]$/);\n    const type = mapType(gl, uniformData.type);\n    uniforms[name] = {\n      name,\n      index: i,\n      type,\n      size: uniformData.size,\n      isArray,\n      value: defaultValue(type, uniformData.size)\n    };\n  }\n  return uniforms;\n}\n\nexport { getUniformData };\n//# sourceMappingURL=getUniformData.mjs.map\n","\"use strict\";\nfunction getUboData(program, gl) {\n  if (!gl.ACTIVE_UNIFORM_BLOCKS)\n    return {};\n  const uniformBlocks = {};\n  const totalUniformsBlocks = gl.getProgramParameter(program, gl.ACTIVE_UNIFORM_BLOCKS);\n  for (let i = 0; i < totalUniformsBlocks; i++) {\n    const name = gl.getActiveUniformBlockName(program, i);\n    const uniformBlockIndex = gl.getUniformBlockIndex(program, name);\n    const size = gl.getActiveUniformBlockParameter(program, i, gl.UNIFORM_BLOCK_DATA_SIZE);\n    uniformBlocks[name] = {\n      name,\n      index: uniformBlockIndex,\n      size\n    };\n  }\n  return uniformBlocks;\n}\n\nexport { getUboData };\n//# sourceMappingURL=getUboData.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { generateShaderSyncCode } from './GenerateShaderSyncCode.mjs';\nimport { generateProgram } from './program/generateProgram.mjs';\n\n\"use strict\";\nconst defaultSyncData = {\n  textureCount: 0,\n  blockIndex: 0\n};\nclass GlShaderSystem {\n  constructor(renderer) {\n    /** @internal */\n    this._activeProgram = null;\n    this._programDataHash = /* @__PURE__ */ Object.create(null);\n    this._shaderSyncFunctions = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n    this._renderer.renderableGC.addManagedHash(this, \"_programDataHash\");\n  }\n  contextChange(gl) {\n    this._gl = gl;\n    this._programDataHash = /* @__PURE__ */ Object.create(null);\n    this._shaderSyncFunctions = /* @__PURE__ */ Object.create(null);\n    this._activeProgram = null;\n  }\n  /**\n   * Changes the current shader to the one given in parameter.\n   * @param shader - the new shader\n   * @param skipSync - false if the shader should automatically sync its uniforms.\n   * @returns the glProgram that belongs to the shader.\n   */\n  bind(shader, skipSync) {\n    this._setProgram(shader.glProgram);\n    if (skipSync)\n      return;\n    defaultSyncData.textureCount = 0;\n    defaultSyncData.blockIndex = 0;\n    let syncFunction = this._shaderSyncFunctions[shader.glProgram._key];\n    if (!syncFunction) {\n      syncFunction = this._shaderSyncFunctions[shader.glProgram._key] = this._generateShaderSync(shader, this);\n    }\n    this._renderer.buffer.nextBindBase(!!shader.glProgram.transformFeedbackVaryings);\n    syncFunction(this._renderer, shader, defaultSyncData);\n  }\n  /**\n   * Updates the uniform group.\n   * @param uniformGroup - the uniform group to update\n   */\n  updateUniformGroup(uniformGroup) {\n    this._renderer.uniformGroup.updateUniformGroup(uniformGroup, this._activeProgram, defaultSyncData);\n  }\n  /**\n   * Binds a uniform block to the shader.\n   * @param uniformGroup - the uniform group to bind\n   * @param name - the name of the uniform block\n   * @param index - the index of the uniform block\n   */\n  bindUniformBlock(uniformGroup, name, index = 0) {\n    const bufferSystem = this._renderer.buffer;\n    const programData = this._getProgramData(this._activeProgram);\n    const isBufferResource = uniformGroup._bufferResource;\n    if (!isBufferResource) {\n      this._renderer.ubo.updateUniformGroup(uniformGroup);\n    }\n    const buffer = uniformGroup.buffer;\n    const glBuffer = bufferSystem.updateBuffer(buffer);\n    const boundLocation = bufferSystem.freeLocationForBufferBase(glBuffer);\n    if (isBufferResource) {\n      const { offset, size } = uniformGroup;\n      if (offset === 0 && size === buffer.data.byteLength) {\n        bufferSystem.bindBufferBase(glBuffer, boundLocation);\n      } else {\n        bufferSystem.bindBufferRange(glBuffer, boundLocation, offset);\n      }\n    } else if (bufferSystem.getLastBindBaseLocation(glBuffer) !== boundLocation) {\n      bufferSystem.bindBufferBase(glBuffer, boundLocation);\n    }\n    const uniformBlockIndex = this._activeProgram._uniformBlockData[name].index;\n    if (programData.uniformBlockBindings[index] === boundLocation)\n      return;\n    programData.uniformBlockBindings[index] = boundLocation;\n    this._renderer.gl.uniformBlockBinding(programData.program, uniformBlockIndex, boundLocation);\n  }\n  _setProgram(program) {\n    if (this._activeProgram === program)\n      return;\n    this._activeProgram = program;\n    const programData = this._getProgramData(program);\n    this._gl.useProgram(programData.program);\n  }\n  /**\n   * @param program - the program to get the data for\n   * @internal\n   */\n  _getProgramData(program) {\n    return this._programDataHash[program._key] || this._createProgramData(program);\n  }\n  _createProgramData(program) {\n    const key = program._key;\n    this._programDataHash[key] = generateProgram(this._gl, program);\n    return this._programDataHash[key];\n  }\n  destroy() {\n    for (const key of Object.keys(this._programDataHash)) {\n      const programData = this._programDataHash[key];\n      programData.destroy();\n      this._programDataHash[key] = null;\n    }\n    this._programDataHash = null;\n    this._shaderSyncFunctions = null;\n    this._activeProgram = null;\n    this._renderer = null;\n    this._gl = null;\n  }\n  /**\n   * Creates a function that can be executed that will sync the shader as efficiently as possible.\n   * Overridden by the unsafe eval package if you don't want eval used in your project.\n   * @param shader - the shader to generate the sync function for\n   * @param shaderSystem - the shader system to use\n   * @returns - the generated sync function\n   * @ignore\n   */\n  _generateShaderSync(shader, shaderSystem) {\n    return generateShaderSyncCode(shader, shaderSystem);\n  }\n  resetState() {\n    this._activeProgram = null;\n  }\n}\n/** @ignore */\nGlShaderSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem\n  ],\n  name: \"shader\"\n};\n\nexport { GlShaderSystem };\n//# sourceMappingURL=GlShaderSystem.mjs.map\n","import { BufferResource } from '../../shared/buffer/BufferResource.mjs';\nimport { UniformGroup } from '../../shared/shader/UniformGroup.mjs';\nimport { TextureSource } from '../../shared/texture/sources/TextureSource.mjs';\n\n\"use strict\";\nfunction generateShaderSyncCode(shader, shaderSystem) {\n  const funcFragments = [];\n  const headerFragments = [`\n        var g = s.groups;\n        var sS = r.shader;\n        var p = s.glProgram;\n        var ugS = r.uniformGroup;\n        var resources;\n    `];\n  let addedTextreSystem = false;\n  let textureCount = 0;\n  const programData = shaderSystem._getProgramData(shader.glProgram);\n  for (const i in shader.groups) {\n    const group = shader.groups[i];\n    funcFragments.push(`\n            resources = g[${i}].resources;\n        `);\n    for (const j in group.resources) {\n      const resource = group.resources[j];\n      if (resource instanceof UniformGroup) {\n        if (resource.ubo) {\n          const resName = shader._uniformBindMap[i][Number(j)];\n          funcFragments.push(`\n                        sS.bindUniformBlock(\n                            resources[${j}],\n                            '${resName}',\n                            ${shader.glProgram._uniformBlockData[resName].index}\n                        );\n                    `);\n        } else {\n          funcFragments.push(`\n                        ugS.updateUniformGroup(resources[${j}], p, sD);\n                    `);\n        }\n      } else if (resource instanceof BufferResource) {\n        const resName = shader._uniformBindMap[i][Number(j)];\n        funcFragments.push(`\n                    sS.bindUniformBlock(\n                        resources[${j}],\n                        '${resName}',\n                        ${shader.glProgram._uniformBlockData[resName].index}\n                    );\n                `);\n      } else if (resource instanceof TextureSource) {\n        const uniformName = shader._uniformBindMap[i][j];\n        const uniformData = programData.uniformData[uniformName];\n        if (uniformData) {\n          if (!addedTextreSystem) {\n            addedTextreSystem = true;\n            headerFragments.push(`\n                        var tS = r.texture;\n                        `);\n          }\n          shaderSystem._gl.uniform1i(uniformData.location, textureCount);\n          funcFragments.push(`\n                        tS.bind(resources[${j}], ${textureCount});\n                    `);\n          textureCount++;\n        }\n      }\n    }\n  }\n  const functionSource = [...headerFragments, ...funcFragments].join(\"\\n\");\n  return new Function(\"r\", \"s\", \"sD\", functionSource);\n}\n\nexport { generateShaderSyncCode };\n//# sourceMappingURL=GenerateShaderSyncCode.mjs.map\n","\"use strict\";\nconst UNIFORM_TO_SINGLE_SETTERS = {\n  f32: `if (cv !== v) {\n            cu.value = v;\n            gl.uniform1f(location, v);\n        }`,\n  \"vec2<f32>\": `if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2f(location, v[0], v[1]);\n        }`,\n  \"vec3<f32>\": `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3f(location, v[0], v[1], v[2]);\n        }`,\n  \"vec4<f32>\": `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4f(location, v[0], v[1], v[2], v[3]);\n        }`,\n  i32: `if (cv !== v) {\n            cu.value = v;\n            gl.uniform1i(location, v);\n        }`,\n  \"vec2<i32>\": `if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2i(location, v[0], v[1]);\n        }`,\n  \"vec3<i32>\": `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3i(location, v[0], v[1], v[2]);\n        }`,\n  \"vec4<i32>\": `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4i(location, v[0], v[1], v[2], v[3]);\n        }`,\n  u32: `if (cv !== v) {\n            cu.value = v;\n            gl.uniform1ui(location, v);\n        }`,\n  \"vec2<u32>\": `if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2ui(location, v[0], v[1]);\n        }`,\n  \"vec3<u32>\": `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3ui(location, v[0], v[1], v[2]);\n        }`,\n  \"vec4<u32>\": `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4ui(location, v[0], v[1], v[2], v[3]);\n        }`,\n  bool: `if (cv !== v) {\n            cu.value = v;\n            gl.uniform1i(location, v);\n        }`,\n  \"vec2<bool>\": `if (cv[0] !== v[0] || cv[1] !== v[1]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            gl.uniform2i(location, v[0], v[1]);\n        }`,\n  \"vec3<bool>\": `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            gl.uniform3i(location, v[0], v[1], v[2]);\n        }`,\n  \"vec4<bool>\": `if (cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3]) {\n            cv[0] = v[0];\n            cv[1] = v[1];\n            cv[2] = v[2];\n            cv[3] = v[3];\n            gl.uniform4i(location, v[0], v[1], v[2], v[3]);\n        }`,\n  \"mat2x2<f32>\": `gl.uniformMatrix2fv(location, false, v);`,\n  \"mat3x3<f32>\": `gl.uniformMatrix3fv(location, false, v);`,\n  \"mat4x4<f32>\": `gl.uniformMatrix4fv(location, false, v);`\n};\nconst UNIFORM_TO_ARRAY_SETTERS = {\n  f32: `gl.uniform1fv(location, v);`,\n  \"vec2<f32>\": `gl.uniform2fv(location, v);`,\n  \"vec3<f32>\": `gl.uniform3fv(location, v);`,\n  \"vec4<f32>\": `gl.uniform4fv(location, v);`,\n  \"mat2x2<f32>\": `gl.uniformMatrix2fv(location, false, v);`,\n  \"mat3x3<f32>\": `gl.uniformMatrix3fv(location, false, v);`,\n  \"mat4x4<f32>\": `gl.uniformMatrix4fv(location, false, v);`,\n  i32: `gl.uniform1iv(location, v);`,\n  \"vec2<i32>\": `gl.uniform2iv(location, v);`,\n  \"vec3<i32>\": `gl.uniform3iv(location, v);`,\n  \"vec4<i32>\": `gl.uniform4iv(location, v);`,\n  u32: `gl.uniform1iv(location, v);`,\n  \"vec2<u32>\": `gl.uniform2iv(location, v);`,\n  \"vec3<u32>\": `gl.uniform3iv(location, v);`,\n  \"vec4<u32>\": `gl.uniform4iv(location, v);`,\n  bool: `gl.uniform1iv(location, v);`,\n  \"vec2<bool>\": `gl.uniform2iv(location, v);`,\n  \"vec3<bool>\": `gl.uniform3iv(location, v);`,\n  \"vec4<bool>\": `gl.uniform4iv(location, v);`\n};\n\nexport { UNIFORM_TO_ARRAY_SETTERS, UNIFORM_TO_SINGLE_SETTERS };\n//# sourceMappingURL=generateUniformsSyncTypes.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { generateUniformsSync } from './utils/generateUniformsSync.mjs';\n\n\"use strict\";\nclass GlUniformGroupSystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    /** Cache to holds the generated functions. Stored against UniformObjects unique signature. */\n    this._cache = {};\n    this._uniformGroupSyncHash = {};\n    this._renderer = renderer;\n    this.gl = null;\n    this._cache = {};\n  }\n  contextChange(gl) {\n    this.gl = gl;\n  }\n  /**\n   * Uploads the uniforms values to the currently bound shader.\n   * @param group - the uniforms values that be applied to the current shader\n   * @param program\n   * @param syncData\n   * @param syncData.textureCount\n   */\n  updateUniformGroup(group, program, syncData) {\n    const programData = this._renderer.shader._getProgramData(program);\n    if (!group.isStatic || group._dirtyId !== programData.uniformDirtyGroups[group.uid]) {\n      programData.uniformDirtyGroups[group.uid] = group._dirtyId;\n      const syncFunc = this._getUniformSyncFunction(group, program);\n      syncFunc(programData.uniformData, group.uniforms, this._renderer, syncData);\n    }\n  }\n  /**\n   * Overridable by the pixi.js/unsafe-eval package to use static syncUniforms instead.\n   * @param group\n   * @param program\n   */\n  _getUniformSyncFunction(group, program) {\n    return this._uniformGroupSyncHash[group._signature]?.[program._key] || this._createUniformSyncFunction(group, program);\n  }\n  _createUniformSyncFunction(group, program) {\n    const uniformGroupSyncHash = this._uniformGroupSyncHash[group._signature] || (this._uniformGroupSyncHash[group._signature] = {});\n    const id = this._getSignature(group, program._uniformData, \"u\");\n    if (!this._cache[id]) {\n      this._cache[id] = this._generateUniformsSync(group, program._uniformData);\n    }\n    uniformGroupSyncHash[program._key] = this._cache[id];\n    return uniformGroupSyncHash[program._key];\n  }\n  _generateUniformsSync(group, uniformData) {\n    return generateUniformsSync(group, uniformData);\n  }\n  /**\n   * Takes a uniform group and data and generates a unique signature for them.\n   * @param group - The uniform group to get signature of\n   * @param group.uniforms\n   * @param uniformData - Uniform information generated by the shader\n   * @param preFix\n   * @returns Unique signature of the uniform group\n   */\n  _getSignature(group, uniformData, preFix) {\n    const uniforms = group.uniforms;\n    const strings = [`${preFix}-`];\n    for (const i in uniforms) {\n      strings.push(i);\n      if (uniformData[i]) {\n        strings.push(uniformData[i].type);\n      }\n    }\n    return strings.join(\"-\");\n  }\n  /** Destroys this System and removes all its textures. */\n  destroy() {\n    this._renderer = null;\n    this._cache = null;\n  }\n}\n/** @ignore */\nGlUniformGroupSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem\n  ],\n  name: \"uniformGroup\"\n};\n\nexport { GlUniformGroupSystem };\n//# sourceMappingURL=GlUniformGroupSystem.mjs.map\n","import { BufferResource } from '../../../shared/buffer/BufferResource.mjs';\nimport { UniformGroup } from '../../../shared/shader/UniformGroup.mjs';\nimport { uniformParsers } from '../../../shared/shader/utils/uniformParsers.mjs';\nimport { UNIFORM_TO_SINGLE_SETTERS, UNIFORM_TO_ARRAY_SETTERS } from './generateUniformsSyncTypes.mjs';\n\n\"use strict\";\nfunction generateUniformsSync(group, uniformData) {\n  const funcFragments = [`\n        var v = null;\n        var cv = null;\n        var cu = null;\n        var t = 0;\n        var gl = renderer.gl;\n        var name = null;\n    `];\n  for (const i in group.uniforms) {\n    if (!uniformData[i]) {\n      if (group.uniforms[i] instanceof UniformGroup) {\n        if (group.uniforms[i].ubo) {\n          funcFragments.push(`\n                        renderer.shader.bindUniformBlock(uv.${i}, \"${i}\");\n                    `);\n        } else {\n          funcFragments.push(`\n                        renderer.shader.updateUniformGroup(uv.${i});\n                    `);\n        }\n      } else if (group.uniforms[i] instanceof BufferResource) {\n        funcFragments.push(`\n                        renderer.shader.bindBufferResource(uv.${i}, \"${i}\");\n                    `);\n      }\n      continue;\n    }\n    const uniform = group.uniformStructures[i];\n    let parsed = false;\n    for (let j = 0; j < uniformParsers.length; j++) {\n      const parser = uniformParsers[j];\n      if (uniform.type === parser.type && parser.test(uniform)) {\n        funcFragments.push(`name = \"${i}\";`, uniformParsers[j].uniform);\n        parsed = true;\n        break;\n      }\n    }\n    if (!parsed) {\n      const templateType = uniform.size === 1 ? UNIFORM_TO_SINGLE_SETTERS : UNIFORM_TO_ARRAY_SETTERS;\n      const template = templateType[uniform.type].replace(\"location\", `ud[\"${i}\"].location`);\n      funcFragments.push(`\n            cu = ud[\"${i}\"];\n            cv = cu.value;\n            v = uv[\"${i}\"];\n            ${template};`);\n    }\n  }\n  return new Function(\"ud\", \"uv\", \"renderer\", \"syncData\", funcFragments.join(\"\\n\"));\n}\n\nexport { generateUniformsSync };\n//# sourceMappingURL=generateUniformsSync.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { State } from '../../shared/state/State.mjs';\nimport { mapWebGLBlendModesToPixi } from './mapWebGLBlendModesToPixi.mjs';\n\n\"use strict\";\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\nconst _GlStateSystem = class _GlStateSystem {\n  constructor(renderer) {\n    /**\n     * Whether to invert the front face when rendering\n     * This is used for render textures where the Y-coordinate is flipped\n     * @default false\n     */\n    this._invertFrontFace = false;\n    this.gl = null;\n    this.stateId = 0;\n    this.polygonOffset = 0;\n    this.blendMode = \"none\";\n    this._blendEq = false;\n    this.map = [];\n    this.map[BLEND] = this.setBlend;\n    this.map[OFFSET] = this.setOffset;\n    this.map[CULLING] = this.setCullFace;\n    this.map[DEPTH_TEST] = this.setDepthTest;\n    this.map[WINDING] = this.setFrontFace;\n    this.map[DEPTH_MASK] = this.setDepthMask;\n    this.checks = [];\n    this.defaultState = State.for2d();\n    renderer.renderTarget.onRenderTargetChange.add(this);\n  }\n  onRenderTargetChange(renderTarget) {\n    this._invertFrontFace = !renderTarget.isRoot;\n    if (this._cullFace) {\n      this.setFrontFace(this._frontFace);\n    } else {\n      this._frontFaceDirty = true;\n    }\n  }\n  contextChange(gl) {\n    this.gl = gl;\n    this.blendModesMap = mapWebGLBlendModesToPixi(gl);\n    this.resetState();\n  }\n  /**\n   * Sets the current state\n   * @param {*} state - The state to set.\n   */\n  set(state) {\n    state || (state = this.defaultState);\n    if (this.stateId !== state.data) {\n      let diff = this.stateId ^ state.data;\n      let i = 0;\n      while (diff) {\n        if (diff & 1) {\n          this.map[i].call(this, !!(state.data & 1 << i));\n        }\n        diff >>= 1;\n        i++;\n      }\n      this.stateId = state.data;\n    }\n    for (let i = 0; i < this.checks.length; i++) {\n      this.checks[i](this, state);\n    }\n  }\n  /**\n   * Sets the state, when previous state is unknown.\n   * @param {*} state - The state to set\n   */\n  forceState(state) {\n    state || (state = this.defaultState);\n    for (let i = 0; i < this.map.length; i++) {\n      this.map[i].call(this, !!(state.data & 1 << i));\n    }\n    for (let i = 0; i < this.checks.length; i++) {\n      this.checks[i](this, state);\n    }\n    this.stateId = state.data;\n  }\n  /**\n   * Sets whether to enable or disable blending.\n   * @param value - Turn on or off WebGl blending.\n   */\n  setBlend(value) {\n    this._updateCheck(_GlStateSystem._checkBlendMode, value);\n    this.gl[value ? \"enable\" : \"disable\"](this.gl.BLEND);\n  }\n  /**\n   * Sets whether to enable or disable polygon offset fill.\n   * @param value - Turn on or off webgl polygon offset testing.\n   */\n  setOffset(value) {\n    this._updateCheck(_GlStateSystem._checkPolygonOffset, value);\n    this.gl[value ? \"enable\" : \"disable\"](this.gl.POLYGON_OFFSET_FILL);\n  }\n  /**\n   * Sets whether to enable or disable depth test.\n   * @param value - Turn on or off webgl depth testing.\n   */\n  setDepthTest(value) {\n    this.gl[value ? \"enable\" : \"disable\"](this.gl.DEPTH_TEST);\n  }\n  /**\n   * Sets whether to enable or disable depth mask.\n   * @param value - Turn on or off webgl depth mask.\n   */\n  setDepthMask(value) {\n    this.gl.depthMask(value);\n  }\n  /**\n   * Sets whether to enable or disable cull face.\n   * @param {boolean} value - Turn on or off webgl cull face.\n   */\n  setCullFace(value) {\n    this._cullFace = value;\n    this.gl[value ? \"enable\" : \"disable\"](this.gl.CULL_FACE);\n    if (this._cullFace && this._frontFaceDirty) {\n      this.setFrontFace(this._frontFace);\n    }\n  }\n  /**\n   * Sets the gl front face.\n   * @param {boolean} value - true is clockwise and false is counter-clockwise\n   */\n  setFrontFace(value) {\n    this._frontFace = value;\n    this._frontFaceDirty = false;\n    const faceMode = this._invertFrontFace ? !value : value;\n    if (this._glFrontFace !== faceMode) {\n      this._glFrontFace = faceMode;\n      this.gl.frontFace(this.gl[faceMode ? \"CW\" : \"CCW\"]);\n    }\n  }\n  /**\n   * Sets the blend mode.\n   * @param {number} value - The blend mode to set to.\n   */\n  setBlendMode(value) {\n    if (!this.blendModesMap[value]) {\n      value = \"normal\";\n    }\n    if (value === this.blendMode) {\n      return;\n    }\n    this.blendMode = value;\n    const mode = this.blendModesMap[value];\n    const gl = this.gl;\n    if (mode.length === 2) {\n      gl.blendFunc(mode[0], mode[1]);\n    } else {\n      gl.blendFuncSeparate(mode[0], mode[1], mode[2], mode[3]);\n    }\n    if (mode.length === 6) {\n      this._blendEq = true;\n      gl.blendEquationSeparate(mode[4], mode[5]);\n    } else if (this._blendEq) {\n      this._blendEq = false;\n      gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n    }\n  }\n  /**\n   * Sets the polygon offset.\n   * @param {number} value - the polygon offset\n   * @param {number} scale - the polygon offset scale\n   */\n  setPolygonOffset(value, scale) {\n    this.gl.polygonOffset(value, scale);\n  }\n  /** Resets all the logic and disables the VAOs. */\n  resetState() {\n    this._glFrontFace = false;\n    this._frontFace = false;\n    this._cullFace = false;\n    this._frontFaceDirty = false;\n    this._invertFrontFace = false;\n    this.gl.frontFace(this.gl.CCW);\n    this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, false);\n    this.forceState(this.defaultState);\n    this._blendEq = true;\n    this.blendMode = \"\";\n    this.setBlendMode(\"normal\");\n  }\n  /**\n   * Checks to see which updates should be checked based on which settings have been activated.\n   *\n   * For example, if blend is enabled then we should check the blend modes each time the state is changed\n   * or if polygon fill is activated then we need to check if the polygon offset changes.\n   * The idea is that we only check what we have too.\n   * @param func - the checking function to add or remove\n   * @param value - should the check function be added or removed.\n   */\n  _updateCheck(func, value) {\n    const index = this.checks.indexOf(func);\n    if (value && index === -1) {\n      this.checks.push(func);\n    } else if (!value && index !== -1) {\n      this.checks.splice(index, 1);\n    }\n  }\n  /**\n   * A private little wrapper function that we call to check the blend mode.\n   * @param system - the System to perform the state check on\n   * @param state - the state that the blendMode will pulled from\n   */\n  static _checkBlendMode(system, state) {\n    system.setBlendMode(state.blendMode);\n  }\n  /**\n   * A private little wrapper function that we call to check the polygon offset.\n   * @param system - the System to perform the state check on\n   * @param state - the state that the blendMode will pulled from\n   */\n  static _checkPolygonOffset(system, state) {\n    system.setPolygonOffset(1, state.polygonOffset);\n  }\n  /** @ignore */\n  destroy() {\n    this.gl = null;\n    this.checks.length = 0;\n  }\n};\n/** @ignore */\n_GlStateSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem\n  ],\n  name: \"state\"\n};\nlet GlStateSystem = _GlStateSystem;\n\nexport { GlStateSystem };\n//# sourceMappingURL=GlStateSystem.mjs.map\n","import { DOMAdapter } from '../../../../environment/adapter.mjs';\n\n\"use strict\";\nfunction mapWebGLBlendModesToPixi(gl) {\n  const blendMap = {};\n  blendMap.normal = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n  blendMap.add = [gl.ONE, gl.ONE];\n  blendMap.multiply = [gl.DST_COLOR, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n  blendMap.screen = [gl.ONE, gl.ONE_MINUS_SRC_COLOR, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n  blendMap.none = [0, 0];\n  blendMap[\"normal-npm\"] = [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n  blendMap[\"add-npm\"] = [gl.SRC_ALPHA, gl.ONE, gl.ONE, gl.ONE];\n  blendMap[\"screen-npm\"] = [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_COLOR, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n  blendMap.erase = [gl.ZERO, gl.ONE_MINUS_SRC_ALPHA];\n  const isWebGl2 = !(gl instanceof DOMAdapter.get().getWebGLRenderingContext());\n  if (isWebGl2) {\n    blendMap.min = [gl.ONE, gl.ONE, gl.ONE, gl.ONE, gl.MIN, gl.MIN];\n    blendMap.max = [gl.ONE, gl.ONE, gl.ONE, gl.ONE, gl.MAX, gl.MAX];\n  } else {\n    const ext = gl.getExtension(\"EXT_blend_minmax\");\n    if (ext) {\n      blendMap.min = [gl.ONE, gl.ONE, gl.ONE, gl.ONE, ext.MIN_EXT, ext.MIN_EXT];\n      blendMap.max = [gl.ONE, gl.ONE, gl.ONE, gl.ONE, ext.MAX_EXT, ext.MAX_EXT];\n    }\n  }\n  return blendMap;\n}\n\nexport { mapWebGLBlendModesToPixi };\n//# sourceMappingURL=mapWebGLBlendModesToPixi.mjs.map\n","import { GL_TARGETS, GL_TYPES, GL_FORMATS } from './const.mjs';\n\n\"use strict\";\nclass GlTexture {\n  constructor(texture) {\n    this.target = GL_TARGETS.TEXTURE_2D;\n    this.texture = texture;\n    this.width = -1;\n    this.height = -1;\n    this.type = GL_TYPES.UNSIGNED_BYTE;\n    this.internalFormat = GL_FORMATS.RGBA;\n    this.format = GL_FORMATS.RGBA;\n    this.samplerType = 0;\n  }\n}\n\nexport { GlTexture };\n//# sourceMappingURL=GlTexture.mjs.map\n","\"use strict\";\nconst glUploadBufferImageResource = {\n  id: \"buffer\",\n  upload(source, glTexture, gl) {\n    if (glTexture.width === source.width || glTexture.height === source.height) {\n      gl.texSubImage2D(\n        gl.TEXTURE_2D,\n        0,\n        0,\n        0,\n        source.width,\n        source.height,\n        glTexture.format,\n        glTexture.type,\n        source.resource\n      );\n    } else {\n      gl.texImage2D(\n        glTexture.target,\n        0,\n        glTexture.internalFormat,\n        source.width,\n        source.height,\n        0,\n        glTexture.format,\n        glTexture.type,\n        source.resource\n      );\n    }\n    glTexture.width = source.width;\n    glTexture.height = source.height;\n  }\n};\n\nexport { glUploadBufferImageResource };\n//# sourceMappingURL=glUploadBufferImageResource.mjs.map\n","\"use strict\";\nconst compressedFormatMap = {\n  \"bc1-rgba-unorm\": true,\n  \"bc1-rgba-unorm-srgb\": true,\n  \"bc2-rgba-unorm\": true,\n  \"bc2-rgba-unorm-srgb\": true,\n  \"bc3-rgba-unorm\": true,\n  \"bc3-rgba-unorm-srgb\": true,\n  \"bc4-r-unorm\": true,\n  \"bc4-r-snorm\": true,\n  \"bc5-rg-unorm\": true,\n  \"bc5-rg-snorm\": true,\n  \"bc6h-rgb-ufloat\": true,\n  \"bc6h-rgb-float\": true,\n  \"bc7-rgba-unorm\": true,\n  \"bc7-rgba-unorm-srgb\": true,\n  // ETC2 compressed formats usable if \"texture-compression-etc2\" is both\n  // supported by the device/user agent and enabled in requestDevice.\n  \"etc2-rgb8unorm\": true,\n  \"etc2-rgb8unorm-srgb\": true,\n  \"etc2-rgb8a1unorm\": true,\n  \"etc2-rgb8a1unorm-srgb\": true,\n  \"etc2-rgba8unorm\": true,\n  \"etc2-rgba8unorm-srgb\": true,\n  \"eac-r11unorm\": true,\n  \"eac-r11snorm\": true,\n  \"eac-rg11unorm\": true,\n  \"eac-rg11snorm\": true,\n  // ASTC compressed formats usable if \"texture-compression-astc\" is both\n  // supported by the device/user agent and enabled in requestDevice.\n  \"astc-4x4-unorm\": true,\n  \"astc-4x4-unorm-srgb\": true,\n  \"astc-5x4-unorm\": true,\n  \"astc-5x4-unorm-srgb\": true,\n  \"astc-5x5-unorm\": true,\n  \"astc-5x5-unorm-srgb\": true,\n  \"astc-6x5-unorm\": true,\n  \"astc-6x5-unorm-srgb\": true,\n  \"astc-6x6-unorm\": true,\n  \"astc-6x6-unorm-srgb\": true,\n  \"astc-8x5-unorm\": true,\n  \"astc-8x5-unorm-srgb\": true,\n  \"astc-8x6-unorm\": true,\n  \"astc-8x6-unorm-srgb\": true,\n  \"astc-8x8-unorm\": true,\n  \"astc-8x8-unorm-srgb\": true,\n  \"astc-10x5-unorm\": true,\n  \"astc-10x5-unorm-srgb\": true,\n  \"astc-10x6-unorm\": true,\n  \"astc-10x6-unorm-srgb\": true,\n  \"astc-10x8-unorm\": true,\n  \"astc-10x8-unorm-srgb\": true,\n  \"astc-10x10-unorm\": true,\n  \"astc-10x10-unorm-srgb\": true,\n  \"astc-12x10-unorm\": true,\n  \"astc-12x10-unorm-srgb\": true,\n  \"astc-12x12-unorm\": true,\n  \"astc-12x12-unorm-srgb\": true\n};\nconst glUploadCompressedTextureResource = {\n  id: \"compressed\",\n  upload(source, glTexture, gl) {\n    gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);\n    let mipWidth = source.pixelWidth;\n    let mipHeight = source.pixelHeight;\n    const compressed = !!compressedFormatMap[source.format];\n    for (let i = 0; i < source.resource.length; i++) {\n      const levelBuffer = source.resource[i];\n      if (compressed) {\n        gl.compressedTexImage2D(\n          gl.TEXTURE_2D,\n          i,\n          glTexture.internalFormat,\n          mipWidth,\n          mipHeight,\n          0,\n          levelBuffer\n        );\n      } else {\n        gl.texImage2D(\n          gl.TEXTURE_2D,\n          i,\n          glTexture.internalFormat,\n          mipWidth,\n          mipHeight,\n          0,\n          glTexture.format,\n          glTexture.type,\n          levelBuffer\n        );\n      }\n      mipWidth = Math.max(mipWidth >> 1, 1);\n      mipHeight = Math.max(mipHeight >> 1, 1);\n    }\n  }\n};\n\nexport { glUploadCompressedTextureResource };\n//# sourceMappingURL=glUploadCompressedTextureResource.mjs.map\n","\"use strict\";\nconst glUploadImageResource = {\n  id: \"image\",\n  upload(source, glTexture, gl, webGLVersion) {\n    const glWidth = glTexture.width;\n    const glHeight = glTexture.height;\n    const textureWidth = source.pixelWidth;\n    const textureHeight = source.pixelHeight;\n    const resourceWidth = source.resourceWidth;\n    const resourceHeight = source.resourceHeight;\n    if (resourceWidth < textureWidth || resourceHeight < textureHeight) {\n      if (glWidth !== textureWidth || glHeight !== textureHeight) {\n        gl.texImage2D(\n          glTexture.target,\n          0,\n          glTexture.internalFormat,\n          textureWidth,\n          textureHeight,\n          0,\n          glTexture.format,\n          glTexture.type,\n          null\n        );\n      }\n      if (webGLVersion === 2) {\n        gl.texSubImage2D(\n          gl.TEXTURE_2D,\n          0,\n          0,\n          0,\n          resourceWidth,\n          resourceHeight,\n          glTexture.format,\n          glTexture.type,\n          source.resource\n        );\n      } else {\n        gl.texSubImage2D(\n          gl.TEXTURE_2D,\n          0,\n          0,\n          0,\n          glTexture.format,\n          glTexture.type,\n          source.resource\n        );\n      }\n    } else if (glWidth === textureWidth && glHeight === textureHeight) {\n      gl.texSubImage2D(\n        gl.TEXTURE_2D,\n        0,\n        0,\n        0,\n        glTexture.format,\n        glTexture.type,\n        source.resource\n      );\n    } else if (webGLVersion === 2) {\n      gl.texImage2D(\n        glTexture.target,\n        0,\n        glTexture.internalFormat,\n        textureWidth,\n        textureHeight,\n        0,\n        glTexture.format,\n        glTexture.type,\n        source.resource\n      );\n    } else {\n      gl.texImage2D(\n        glTexture.target,\n        0,\n        glTexture.internalFormat,\n        glTexture.format,\n        glTexture.type,\n        source.resource\n      );\n    }\n    glTexture.width = textureWidth;\n    glTexture.height = textureHeight;\n  }\n};\n\nexport { glUploadImageResource };\n//# sourceMappingURL=glUploadImageResource.mjs.map\n","import { glUploadImageResource } from './glUploadImageResource.mjs';\n\n\"use strict\";\nconst glUploadVideoResource = {\n  id: \"video\",\n  upload(source, glTexture, gl, webGLVersion) {\n    if (!source.isValid) {\n      gl.texImage2D(\n        glTexture.target,\n        0,\n        glTexture.internalFormat,\n        1,\n        1,\n        0,\n        glTexture.format,\n        glTexture.type,\n        null\n      );\n      return;\n    }\n    glUploadImageResource.upload(source, glTexture, gl, webGLVersion);\n  }\n};\n\nexport { glUploadVideoResource };\n//# sourceMappingURL=glUploadVideoResource.mjs.map\n","\"use strict\";\nconst scaleModeToGlFilter = {\n  linear: 9729,\n  nearest: 9728\n};\nconst mipmapScaleModeToGlFilter = {\n  linear: {\n    linear: 9987,\n    nearest: 9985\n  },\n  nearest: {\n    linear: 9986,\n    nearest: 9984\n  }\n};\nconst wrapModeToGlAddress = {\n  \"clamp-to-edge\": 33071,\n  repeat: 10497,\n  \"mirror-repeat\": 33648\n};\nconst compareModeToGlCompare = {\n  never: 512,\n  less: 513,\n  equal: 514,\n  \"less-equal\": 515,\n  greater: 516,\n  \"not-equal\": 517,\n  \"greater-equal\": 518,\n  always: 519\n};\n\nexport { compareModeToGlCompare, mipmapScaleModeToGlFilter, scaleModeToGlFilter, wrapModeToGlAddress };\n//# sourceMappingURL=pixiToGlMaps.mjs.map\n","import { wrapModeToGlAddress, scaleModeToGlFilter, mipmapScaleModeToGlFilter, compareModeToGlCompare } from './pixiToGlMaps.mjs';\n\n\"use strict\";\nfunction applyStyleParams(style, gl, mipmaps, anisotropicExt, glFunctionName, firstParam, forceClamp, firstCreation) {\n  const castParam = firstParam;\n  if (!firstCreation || style.addressModeU !== \"repeat\" || style.addressModeV !== \"repeat\" || style.addressModeW !== \"repeat\") {\n    const wrapModeS = wrapModeToGlAddress[forceClamp ? \"clamp-to-edge\" : style.addressModeU];\n    const wrapModeT = wrapModeToGlAddress[forceClamp ? \"clamp-to-edge\" : style.addressModeV];\n    const wrapModeR = wrapModeToGlAddress[forceClamp ? \"clamp-to-edge\" : style.addressModeW];\n    gl[glFunctionName](castParam, gl.TEXTURE_WRAP_S, wrapModeS);\n    gl[glFunctionName](castParam, gl.TEXTURE_WRAP_T, wrapModeT);\n    if (gl.TEXTURE_WRAP_R)\n      gl[glFunctionName](castParam, gl.TEXTURE_WRAP_R, wrapModeR);\n  }\n  if (!firstCreation || style.magFilter !== \"linear\") {\n    gl[glFunctionName](castParam, gl.TEXTURE_MAG_FILTER, scaleModeToGlFilter[style.magFilter]);\n  }\n  if (mipmaps) {\n    if (!firstCreation || style.mipmapFilter !== \"linear\") {\n      const glFilterMode = mipmapScaleModeToGlFilter[style.minFilter][style.mipmapFilter];\n      gl[glFunctionName](castParam, gl.TEXTURE_MIN_FILTER, glFilterMode);\n    }\n  } else {\n    gl[glFunctionName](castParam, gl.TEXTURE_MIN_FILTER, scaleModeToGlFilter[style.minFilter]);\n  }\n  if (anisotropicExt && style.maxAnisotropy > 1) {\n    const level = Math.min(style.maxAnisotropy, gl.getParameter(anisotropicExt.MAX_TEXTURE_MAX_ANISOTROPY_EXT));\n    gl[glFunctionName](castParam, anisotropicExt.TEXTURE_MAX_ANISOTROPY_EXT, level);\n  }\n  if (style.compare) {\n    gl[glFunctionName](castParam, gl.TEXTURE_COMPARE_FUNC, compareModeToGlCompare[style.compare]);\n  }\n}\n\nexport { applyStyleParams };\n//# sourceMappingURL=applyStyleParams.mjs.map\n","import { DOMAdapter } from '../../../../environment/adapter.mjs';\nimport { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Texture } from '../../shared/texture/Texture.mjs';\nimport { GlTexture } from './GlTexture.mjs';\nimport { glUploadBufferImageResource } from './uploaders/glUploadBufferImageResource.mjs';\nimport { glUploadCompressedTextureResource } from './uploaders/glUploadCompressedTextureResource.mjs';\nimport { glUploadImageResource } from './uploaders/glUploadImageResource.mjs';\nimport { glUploadVideoResource } from './uploaders/glUploadVideoResource.mjs';\nimport { applyStyleParams } from './utils/applyStyleParams.mjs';\nimport { mapFormatToGlFormat } from './utils/mapFormatToGlFormat.mjs';\nimport { mapFormatToGlInternalFormat } from './utils/mapFormatToGlInternalFormat.mjs';\nimport { mapFormatToGlType } from './utils/mapFormatToGlType.mjs';\nimport './utils/unpremultiplyAlpha.mjs';\n\n\"use strict\";\nconst BYTES_PER_PIXEL = 4;\nclass GlTextureSystem {\n  constructor(renderer) {\n    this.managedTextures = [];\n    this._glTextures = /* @__PURE__ */ Object.create(null);\n    this._glSamplers = /* @__PURE__ */ Object.create(null);\n    this._boundTextures = [];\n    this._activeTextureLocation = -1;\n    this._boundSamplers = /* @__PURE__ */ Object.create(null);\n    this._uploads = {\n      image: glUploadImageResource,\n      buffer: glUploadBufferImageResource,\n      video: glUploadVideoResource,\n      compressed: glUploadCompressedTextureResource\n    };\n    this._premultiplyAlpha = false;\n    // TODO - separate samplers will be a cool thing to add, but not right now!\n    this._useSeparateSamplers = false;\n    this._renderer = renderer;\n    this._renderer.renderableGC.addManagedHash(this, \"_glTextures\");\n    this._renderer.renderableGC.addManagedHash(this, \"_glSamplers\");\n  }\n  contextChange(gl) {\n    this._gl = gl;\n    if (!this._mapFormatToInternalFormat) {\n      this._mapFormatToInternalFormat = mapFormatToGlInternalFormat(gl, this._renderer.context.extensions);\n      this._mapFormatToType = mapFormatToGlType(gl);\n      this._mapFormatToFormat = mapFormatToGlFormat(gl);\n    }\n    this._glTextures = /* @__PURE__ */ Object.create(null);\n    this._glSamplers = /* @__PURE__ */ Object.create(null);\n    this._boundSamplers = /* @__PURE__ */ Object.create(null);\n    this._premultiplyAlpha = false;\n    for (let i = 0; i < 16; i++) {\n      this.bind(Texture.EMPTY, i);\n    }\n  }\n  /**\n   * Initializes a texture source, if it has already been initialized nothing will happen.\n   * @param source - The texture source to initialize.\n   * @returns The initialized texture source.\n   */\n  initSource(source) {\n    this.bind(source);\n  }\n  bind(texture, location = 0) {\n    const source = texture.source;\n    if (texture) {\n      this.bindSource(source, location);\n      if (this._useSeparateSamplers) {\n        this._bindSampler(source.style, location);\n      }\n    } else {\n      this.bindSource(null, location);\n      if (this._useSeparateSamplers) {\n        this._bindSampler(null, location);\n      }\n    }\n  }\n  bindSource(source, location = 0) {\n    const gl = this._gl;\n    source._touched = this._renderer.textureGC.count;\n    if (this._boundTextures[location] !== source) {\n      this._boundTextures[location] = source;\n      this._activateLocation(location);\n      source || (source = Texture.EMPTY.source);\n      const glTexture = this.getGlSource(source);\n      gl.bindTexture(glTexture.target, glTexture.texture);\n    }\n  }\n  _bindSampler(style, location = 0) {\n    const gl = this._gl;\n    if (!style) {\n      this._boundSamplers[location] = null;\n      gl.bindSampler(location, null);\n      return;\n    }\n    const sampler = this._getGlSampler(style);\n    if (this._boundSamplers[location] !== sampler) {\n      this._boundSamplers[location] = sampler;\n      gl.bindSampler(location, sampler);\n    }\n  }\n  unbind(texture) {\n    const source = texture.source;\n    const boundTextures = this._boundTextures;\n    const gl = this._gl;\n    for (let i = 0; i < boundTextures.length; i++) {\n      if (boundTextures[i] === source) {\n        this._activateLocation(i);\n        const glTexture = this.getGlSource(source);\n        gl.bindTexture(glTexture.target, null);\n        boundTextures[i] = null;\n      }\n    }\n  }\n  _activateLocation(location) {\n    if (this._activeTextureLocation !== location) {\n      this._activeTextureLocation = location;\n      this._gl.activeTexture(this._gl.TEXTURE0 + location);\n    }\n  }\n  _initSource(source) {\n    const gl = this._gl;\n    const glTexture = new GlTexture(gl.createTexture());\n    glTexture.type = this._mapFormatToType[source.format];\n    glTexture.internalFormat = this._mapFormatToInternalFormat[source.format];\n    glTexture.format = this._mapFormatToFormat[source.format];\n    if (source.autoGenerateMipmaps && (this._renderer.context.supports.nonPowOf2mipmaps || source.isPowerOfTwo)) {\n      const biggestDimension = Math.max(source.width, source.height);\n      source.mipLevelCount = Math.floor(Math.log2(biggestDimension)) + 1;\n    }\n    this._glTextures[source.uid] = glTexture;\n    if (!this.managedTextures.includes(source)) {\n      source.on(\"update\", this.onSourceUpdate, this);\n      source.on(\"resize\", this.onSourceUpdate, this);\n      source.on(\"styleChange\", this.onStyleChange, this);\n      source.on(\"destroy\", this.onSourceDestroy, this);\n      source.on(\"unload\", this.onSourceUnload, this);\n      source.on(\"updateMipmaps\", this.onUpdateMipmaps, this);\n      this.managedTextures.push(source);\n    }\n    this.onSourceUpdate(source);\n    this.updateStyle(source, false);\n    return glTexture;\n  }\n  onStyleChange(source) {\n    this.updateStyle(source, false);\n  }\n  updateStyle(source, firstCreation) {\n    const gl = this._gl;\n    const glTexture = this.getGlSource(source);\n    gl.bindTexture(gl.TEXTURE_2D, glTexture.texture);\n    this._boundTextures[this._activeTextureLocation] = source;\n    applyStyleParams(\n      source.style,\n      gl,\n      source.mipLevelCount > 1,\n      this._renderer.context.extensions.anisotropicFiltering,\n      \"texParameteri\",\n      gl.TEXTURE_2D,\n      // will force a clamp to edge if the texture is not a power of two\n      !this._renderer.context.supports.nonPowOf2wrapping && !source.isPowerOfTwo,\n      firstCreation\n    );\n  }\n  onSourceUnload(source) {\n    const glTexture = this._glTextures[source.uid];\n    if (!glTexture)\n      return;\n    this.unbind(source);\n    this._glTextures[source.uid] = null;\n    this._gl.deleteTexture(glTexture.texture);\n  }\n  onSourceUpdate(source) {\n    const gl = this._gl;\n    const glTexture = this.getGlSource(source);\n    gl.bindTexture(gl.TEXTURE_2D, glTexture.texture);\n    this._boundTextures[this._activeTextureLocation] = source;\n    const premultipliedAlpha = source.alphaMode === \"premultiply-alpha-on-upload\";\n    if (this._premultiplyAlpha !== premultipliedAlpha) {\n      this._premultiplyAlpha = premultipliedAlpha;\n      gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, premultipliedAlpha);\n    }\n    if (this._uploads[source.uploadMethodId]) {\n      this._uploads[source.uploadMethodId].upload(source, glTexture, gl, this._renderer.context.webGLVersion);\n    } else {\n      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, source.pixelWidth, source.pixelHeight, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n    }\n    if (source.autoGenerateMipmaps && source.mipLevelCount > 1) {\n      this.onUpdateMipmaps(source, false);\n    }\n  }\n  onUpdateMipmaps(source, bind = true) {\n    if (bind)\n      this.bindSource(source, 0);\n    const glTexture = this.getGlSource(source);\n    this._gl.generateMipmap(glTexture.target);\n  }\n  onSourceDestroy(source) {\n    source.off(\"destroy\", this.onSourceDestroy, this);\n    source.off(\"update\", this.onSourceUpdate, this);\n    source.off(\"resize\", this.onSourceUpdate, this);\n    source.off(\"unload\", this.onSourceUnload, this);\n    source.off(\"styleChange\", this.onStyleChange, this);\n    source.off(\"updateMipmaps\", this.onUpdateMipmaps, this);\n    this.managedTextures.splice(this.managedTextures.indexOf(source), 1);\n    this.onSourceUnload(source);\n  }\n  _initSampler(style) {\n    const gl = this._gl;\n    const glSampler = this._gl.createSampler();\n    this._glSamplers[style._resourceId] = glSampler;\n    applyStyleParams(\n      style,\n      gl,\n      this._boundTextures[this._activeTextureLocation].mipLevelCount > 1,\n      this._renderer.context.extensions.anisotropicFiltering,\n      \"samplerParameteri\",\n      glSampler,\n      false,\n      true\n    );\n    return this._glSamplers[style._resourceId];\n  }\n  _getGlSampler(sampler) {\n    return this._glSamplers[sampler._resourceId] || this._initSampler(sampler);\n  }\n  getGlSource(source) {\n    return this._glTextures[source.uid] || this._initSource(source);\n  }\n  generateCanvas(texture) {\n    const { pixels, width, height } = this.getPixels(texture);\n    const canvas = DOMAdapter.get().createCanvas();\n    canvas.width = width;\n    canvas.height = height;\n    const ctx = canvas.getContext(\"2d\");\n    if (ctx) {\n      const imageData = ctx.createImageData(width, height);\n      imageData.data.set(pixels);\n      ctx.putImageData(imageData, 0, 0);\n    }\n    return canvas;\n  }\n  getPixels(texture) {\n    const resolution = texture.source.resolution;\n    const frame = texture.frame;\n    const width = Math.max(Math.round(frame.width * resolution), 1);\n    const height = Math.max(Math.round(frame.height * resolution), 1);\n    const pixels = new Uint8Array(BYTES_PER_PIXEL * width * height);\n    const renderer = this._renderer;\n    const renderTarget = renderer.renderTarget.getRenderTarget(texture);\n    const glRenterTarget = renderer.renderTarget.getGpuRenderTarget(renderTarget);\n    const gl = renderer.gl;\n    gl.bindFramebuffer(gl.FRAMEBUFFER, glRenterTarget.resolveTargetFramebuffer);\n    gl.readPixels(\n      Math.round(frame.x * resolution),\n      Math.round(frame.y * resolution),\n      width,\n      height,\n      gl.RGBA,\n      gl.UNSIGNED_BYTE,\n      pixels\n    );\n    if (false) {\n      unpremultiplyAlpha(pixels);\n    }\n    return { pixels: new Uint8ClampedArray(pixels.buffer), width, height };\n  }\n  destroy() {\n    this.managedTextures.slice().forEach((source) => this.onSourceDestroy(source));\n    this.managedTextures = null;\n    this._glTextures = null;\n    this._glSamplers = null;\n    this._boundTextures = null;\n    this._boundSamplers = null;\n    this._mapFormatToInternalFormat = null;\n    this._mapFormatToType = null;\n    this._mapFormatToFormat = null;\n    this._uploads = null;\n    this._renderer = null;\n  }\n  resetState() {\n    this._activeTextureLocation = -1;\n    this._boundTextures.fill(Texture.EMPTY.source);\n    this._boundSamplers = /* @__PURE__ */ Object.create(null);\n    const gl = this._gl;\n    this._premultiplyAlpha = false;\n    gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, this._premultiplyAlpha);\n  }\n}\n/** @ignore */\nGlTextureSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem\n  ],\n  name: \"texture\"\n};\n\nexport { GlTextureSystem };\n//# sourceMappingURL=GlTextureSystem.mjs.map\n","import { DOMAdapter } from '../../../../../environment/adapter.mjs';\n\n\"use strict\";\nfunction mapFormatToGlInternalFormat(gl, extensions) {\n  let srgb = {};\n  let bgra8unorm = gl.RGBA;\n  if (!(gl instanceof DOMAdapter.get().getWebGLRenderingContext())) {\n    srgb = {\n      \"rgba8unorm-srgb\": gl.SRGB8_ALPHA8,\n      \"bgra8unorm-srgb\": gl.SRGB8_ALPHA8\n    };\n    bgra8unorm = gl.RGBA8;\n  } else if (extensions.srgb) {\n    srgb = {\n      \"rgba8unorm-srgb\": extensions.srgb.SRGB8_ALPHA8_EXT,\n      \"bgra8unorm-srgb\": extensions.srgb.SRGB8_ALPHA8_EXT\n    };\n  }\n  return {\n    // 8-bit formats\n    r8unorm: gl.R8,\n    r8snorm: gl.R8_SNORM,\n    r8uint: gl.R8UI,\n    r8sint: gl.R8I,\n    // 16-bit formats\n    r16uint: gl.R16UI,\n    r16sint: gl.R16I,\n    r16float: gl.R16F,\n    rg8unorm: gl.RG8,\n    rg8snorm: gl.RG8_SNORM,\n    rg8uint: gl.RG8UI,\n    rg8sint: gl.RG8I,\n    // 32-bit formats\n    r32uint: gl.R32UI,\n    r32sint: gl.R32I,\n    r32float: gl.R32F,\n    rg16uint: gl.RG16UI,\n    rg16sint: gl.RG16I,\n    rg16float: gl.RG16F,\n    rgba8unorm: gl.RGBA,\n    ...srgb,\n    // Packed 32-bit formats\n    rgba8snorm: gl.RGBA8_SNORM,\n    rgba8uint: gl.RGBA8UI,\n    rgba8sint: gl.RGBA8I,\n    bgra8unorm,\n    rgb9e5ufloat: gl.RGB9_E5,\n    rgb10a2unorm: gl.RGB10_A2,\n    rg11b10ufloat: gl.R11F_G11F_B10F,\n    // 64-bit formats\n    rg32uint: gl.RG32UI,\n    rg32sint: gl.RG32I,\n    rg32float: gl.RG32F,\n    rgba16uint: gl.RGBA16UI,\n    rgba16sint: gl.RGBA16I,\n    rgba16float: gl.RGBA16F,\n    // 128-bit formats\n    rgba32uint: gl.RGBA32UI,\n    rgba32sint: gl.RGBA32I,\n    rgba32float: gl.RGBA32F,\n    // Depth/stencil formats\n    stencil8: gl.STENCIL_INDEX8,\n    depth16unorm: gl.DEPTH_COMPONENT16,\n    depth24plus: gl.DEPTH_COMPONENT24,\n    \"depth24plus-stencil8\": gl.DEPTH24_STENCIL8,\n    depth32float: gl.DEPTH_COMPONENT32F,\n    \"depth32float-stencil8\": gl.DEPTH32F_STENCIL8,\n    // Compressed formats\n    ...extensions.s3tc ? {\n      \"bc1-rgba-unorm\": extensions.s3tc.COMPRESSED_RGBA_S3TC_DXT1_EXT,\n      \"bc2-rgba-unorm\": extensions.s3tc.COMPRESSED_RGBA_S3TC_DXT3_EXT,\n      \"bc3-rgba-unorm\": extensions.s3tc.COMPRESSED_RGBA_S3TC_DXT5_EXT\n    } : {},\n    ...extensions.s3tc_sRGB ? {\n      \"bc1-rgba-unorm-srgb\": extensions.s3tc_sRGB.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT,\n      \"bc2-rgba-unorm-srgb\": extensions.s3tc_sRGB.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT,\n      \"bc3-rgba-unorm-srgb\": extensions.s3tc_sRGB.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT\n    } : {},\n    ...extensions.rgtc ? {\n      \"bc4-r-unorm\": extensions.rgtc.COMPRESSED_RED_RGTC1_EXT,\n      \"bc4-r-snorm\": extensions.rgtc.COMPRESSED_SIGNED_RED_RGTC1_EXT,\n      \"bc5-rg-unorm\": extensions.rgtc.COMPRESSED_RED_GREEN_RGTC2_EXT,\n      \"bc5-rg-snorm\": extensions.rgtc.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT\n    } : {},\n    ...extensions.bptc ? {\n      \"bc6h-rgb-float\": extensions.bptc.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT,\n      \"bc6h-rgb-ufloat\": extensions.bptc.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT,\n      \"bc7-rgba-unorm\": extensions.bptc.COMPRESSED_RGBA_BPTC_UNORM_EXT,\n      \"bc7-rgba-unorm-srgb\": extensions.bptc.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT\n    } : {},\n    ...extensions.etc ? {\n      \"etc2-rgb8unorm\": extensions.etc.COMPRESSED_RGB8_ETC2,\n      \"etc2-rgb8unorm-srgb\": extensions.etc.COMPRESSED_SRGB8_ETC2,\n      \"etc2-rgb8a1unorm\": extensions.etc.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2,\n      \"etc2-rgb8a1unorm-srgb\": extensions.etc.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2,\n      \"etc2-rgba8unorm\": extensions.etc.COMPRESSED_RGBA8_ETC2_EAC,\n      \"etc2-rgba8unorm-srgb\": extensions.etc.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC,\n      \"eac-r11unorm\": extensions.etc.COMPRESSED_R11_EAC,\n      // 'eac-r11snorm'\n      \"eac-rg11unorm\": extensions.etc.COMPRESSED_SIGNED_RG11_EAC\n      // 'eac-rg11snorm'\n    } : {},\n    ...extensions.astc ? {\n      \"astc-4x4-unorm\": extensions.astc.COMPRESSED_RGBA_ASTC_4x4_KHR,\n      \"astc-4x4-unorm-srgb\": extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR,\n      \"astc-5x4-unorm\": extensions.astc.COMPRESSED_RGBA_ASTC_5x4_KHR,\n      \"astc-5x4-unorm-srgb\": extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR,\n      \"astc-5x5-unorm\": extensions.astc.COMPRESSED_RGBA_ASTC_5x5_KHR,\n      \"astc-5x5-unorm-srgb\": extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR,\n      \"astc-6x5-unorm\": extensions.astc.COMPRESSED_RGBA_ASTC_6x5_KHR,\n      \"astc-6x5-unorm-srgb\": extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR,\n      \"astc-6x6-unorm\": extensions.astc.COMPRESSED_RGBA_ASTC_6x6_KHR,\n      \"astc-6x6-unorm-srgb\": extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR,\n      \"astc-8x5-unorm\": extensions.astc.COMPRESSED_RGBA_ASTC_8x5_KHR,\n      \"astc-8x5-unorm-srgb\": extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR,\n      \"astc-8x6-unorm\": extensions.astc.COMPRESSED_RGBA_ASTC_8x6_KHR,\n      \"astc-8x6-unorm-srgb\": extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR,\n      \"astc-8x8-unorm\": extensions.astc.COMPRESSED_RGBA_ASTC_8x8_KHR,\n      \"astc-8x8-unorm-srgb\": extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR,\n      \"astc-10x5-unorm\": extensions.astc.COMPRESSED_RGBA_ASTC_10x5_KHR,\n      \"astc-10x5-unorm-srgb\": extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR,\n      \"astc-10x6-unorm\": extensions.astc.COMPRESSED_RGBA_ASTC_10x6_KHR,\n      \"astc-10x6-unorm-srgb\": extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR,\n      \"astc-10x8-unorm\": extensions.astc.COMPRESSED_RGBA_ASTC_10x8_KHR,\n      \"astc-10x8-unorm-srgb\": extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR,\n      \"astc-10x10-unorm\": extensions.astc.COMPRESSED_RGBA_ASTC_10x10_KHR,\n      \"astc-10x10-unorm-srgb\": extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR,\n      \"astc-12x10-unorm\": extensions.astc.COMPRESSED_RGBA_ASTC_12x10_KHR,\n      \"astc-12x10-unorm-srgb\": extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR,\n      \"astc-12x12-unorm\": extensions.astc.COMPRESSED_RGBA_ASTC_12x12_KHR,\n      \"astc-12x12-unorm-srgb\": extensions.astc.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR\n    } : {}\n  };\n}\n\nexport { mapFormatToGlInternalFormat };\n//# sourceMappingURL=mapFormatToGlInternalFormat.mjs.map\n","\"use strict\";\nfunction mapFormatToGlType(gl) {\n  return {\n    // 8-bit formats\n    r8unorm: gl.UNSIGNED_BYTE,\n    r8snorm: gl.BYTE,\n    r8uint: gl.UNSIGNED_BYTE,\n    r8sint: gl.BYTE,\n    // 16-bit formats\n    r16uint: gl.UNSIGNED_SHORT,\n    r16sint: gl.SHORT,\n    r16float: gl.HALF_FLOAT,\n    rg8unorm: gl.UNSIGNED_BYTE,\n    rg8snorm: gl.BYTE,\n    rg8uint: gl.UNSIGNED_BYTE,\n    rg8sint: gl.BYTE,\n    // 32-bit formats\n    r32uint: gl.UNSIGNED_INT,\n    r32sint: gl.INT,\n    r32float: gl.FLOAT,\n    rg16uint: gl.UNSIGNED_SHORT,\n    rg16sint: gl.SHORT,\n    rg16float: gl.HALF_FLOAT,\n    rgba8unorm: gl.UNSIGNED_BYTE,\n    \"rgba8unorm-srgb\": gl.UNSIGNED_BYTE,\n    // Packed 32-bit formats\n    rgba8snorm: gl.BYTE,\n    rgba8uint: gl.UNSIGNED_BYTE,\n    rgba8sint: gl.BYTE,\n    bgra8unorm: gl.UNSIGNED_BYTE,\n    \"bgra8unorm-srgb\": gl.UNSIGNED_BYTE,\n    rgb9e5ufloat: gl.UNSIGNED_INT_5_9_9_9_REV,\n    rgb10a2unorm: gl.UNSIGNED_INT_2_10_10_10_REV,\n    rg11b10ufloat: gl.UNSIGNED_INT_10F_11F_11F_REV,\n    // 64-bit formats\n    rg32uint: gl.UNSIGNED_INT,\n    rg32sint: gl.INT,\n    rg32float: gl.FLOAT,\n    rgba16uint: gl.UNSIGNED_SHORT,\n    rgba16sint: gl.SHORT,\n    rgba16float: gl.HALF_FLOAT,\n    // 128-bit formats\n    rgba32uint: gl.UNSIGNED_INT,\n    rgba32sint: gl.INT,\n    rgba32float: gl.FLOAT,\n    // Depth/stencil formats\n    stencil8: gl.UNSIGNED_BYTE,\n    depth16unorm: gl.UNSIGNED_SHORT,\n    depth24plus: gl.UNSIGNED_INT,\n    \"depth24plus-stencil8\": gl.UNSIGNED_INT_24_8,\n    depth32float: gl.FLOAT,\n    \"depth32float-stencil8\": gl.FLOAT_32_UNSIGNED_INT_24_8_REV\n  };\n}\n\nexport { mapFormatToGlType };\n//# sourceMappingURL=mapFormatToGlType.mjs.map\n","\"use strict\";\nfunction mapFormatToGlFormat(gl) {\n  return {\n    // 8-bit formats\n    r8unorm: gl.RED,\n    r8snorm: gl.RED,\n    r8uint: gl.RED,\n    r8sint: gl.RED,\n    // 16-bit formats\n    r16uint: gl.RED,\n    r16sint: gl.RED,\n    r16float: gl.RED,\n    rg8unorm: gl.RG,\n    rg8snorm: gl.RG,\n    rg8uint: gl.RG,\n    rg8sint: gl.RG,\n    // 32-bit formats\n    r32uint: gl.RED,\n    r32sint: gl.RED,\n    r32float: gl.RED,\n    rg16uint: gl.RG,\n    rg16sint: gl.RG,\n    rg16float: gl.RG,\n    rgba8unorm: gl.RGBA,\n    \"rgba8unorm-srgb\": gl.RGBA,\n    // Packed 32-bit formats\n    rgba8snorm: gl.RGBA,\n    rgba8uint: gl.RGBA,\n    rgba8sint: gl.RGBA,\n    bgra8unorm: gl.RGBA,\n    \"bgra8unorm-srgb\": gl.RGBA,\n    rgb9e5ufloat: gl.RGB,\n    rgb10a2unorm: gl.RGBA,\n    rg11b10ufloat: gl.RGB,\n    // 64-bit formats\n    rg32uint: gl.RG,\n    rg32sint: gl.RG,\n    rg32float: gl.RG,\n    rgba16uint: gl.RGBA,\n    rgba16sint: gl.RGBA,\n    rgba16float: gl.RGBA,\n    // 128-bit formats\n    rgba32uint: gl.RGBA,\n    rgba32sint: gl.RGBA,\n    rgba32float: gl.RGBA,\n    // Depth/stencil formats\n    stencil8: gl.STENCIL_INDEX8,\n    depth16unorm: gl.DEPTH_COMPONENT,\n    depth24plus: gl.DEPTH_COMPONENT,\n    \"depth24plus-stencil8\": gl.DEPTH_STENCIL,\n    depth32float: gl.DEPTH_COMPONENT,\n    \"depth32float-stencil8\": gl.DEPTH_STENCIL\n  };\n}\n\nexport { mapFormatToGlFormat };\n//# sourceMappingURL=mapFormatToGlFormat.mjs.map\n","import { Color } from '../../../../color/Color.mjs';\nimport { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { warn } from '../../../../utils/logging/warn.mjs';\n\n\"use strict\";\nconst _BackgroundSystem = class _BackgroundSystem {\n  constructor() {\n    this.clearBeforeRender = true;\n    this._backgroundColor = new Color(0);\n    this.color = this._backgroundColor;\n    this.alpha = 1;\n  }\n  /**\n   * initiates the background system\n   * @param options - the options for the background colors\n   */\n  init(options) {\n    options = { ..._BackgroundSystem.defaultOptions, ...options };\n    this.clearBeforeRender = options.clearBeforeRender;\n    this.color = options.background || options.backgroundColor || this._backgroundColor;\n    this.alpha = options.backgroundAlpha;\n    this._backgroundColor.setAlpha(options.backgroundAlpha);\n  }\n  /** The background color to fill if not transparent */\n  get color() {\n    return this._backgroundColor;\n  }\n  set color(value) {\n    const incoming = Color.shared.setValue(value);\n    if (incoming.alpha < 1 && this._backgroundColor.alpha === 1) {\n      warn(\n        \"Cannot set a transparent background on an opaque canvas. To enable transparency, set backgroundAlpha < 1 when initializing your Application.\"\n      );\n    }\n    this._backgroundColor.setValue(value);\n  }\n  /** The background color alpha. Setting this to 0 will make the canvas transparent. */\n  get alpha() {\n    return this._backgroundColor.alpha;\n  }\n  set alpha(value) {\n    this._backgroundColor.setAlpha(value);\n  }\n  /** The background color as an [R, G, B, A] array. */\n  get colorRgba() {\n    return this._backgroundColor.toArray();\n  }\n  /**\n   * destroys the background system\n   * @internal\n   */\n  destroy() {\n  }\n};\n/** @ignore */\n_BackgroundSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"background\",\n  priority: 0\n};\n/** default options used by the system */\n_BackgroundSystem.defaultOptions = {\n  /**\n   * {@link WebGLOptions.backgroundAlpha}\n   * @default 1\n   */\n  backgroundAlpha: 1,\n  /**\n   * {@link WebGLOptions.backgroundColor}\n   * @default 0x000000\n   */\n  backgroundColor: 0,\n  /**\n   * {@link WebGLOptions.clearBeforeRender}\n   * @default true\n   */\n  clearBeforeRender: true\n};\nlet BackgroundSystem = _BackgroundSystem;\n\nexport { BackgroundSystem };\n//# sourceMappingURL=BackgroundSystem.mjs.map\n","import { extensions, ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { FilterEffect } from '../../../../filters/FilterEffect.mjs';\nimport { RenderGroup } from '../../../../scene/container/RenderGroup.mjs';\nimport { warn } from '../../../../utils/logging/warn.mjs';\n\n\"use strict\";\nconst BLEND_MODE_FILTERS = {};\nextensions.handle(ExtensionType.BlendMode, (value) => {\n  if (!value.name) {\n    throw new Error(\"BlendMode extension must have a name property\");\n  }\n  BLEND_MODE_FILTERS[value.name] = value.ref;\n}, (value) => {\n  delete BLEND_MODE_FILTERS[value.name];\n});\nclass BlendModePipe {\n  constructor(renderer) {\n    this._blendModeStack = [];\n    this._isAdvanced = false;\n    this._filterHash = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n    this._renderer.runners.prerender.add(this);\n  }\n  prerender() {\n    this._activeBlendMode = \"normal\";\n    this._isAdvanced = false;\n  }\n  /**\n   * Push a blend mode onto the internal stack and apply it to the instruction set if needed.\n   * @param renderable - The renderable or {@link RenderGroup} associated with the change.\n   * @param blendMode - The blend mode to activate.\n   * @param instructionSet - The instruction set being built.\n   */\n  pushBlendMode(renderable, blendMode, instructionSet) {\n    this._blendModeStack.push(blendMode);\n    this.setBlendMode(renderable, blendMode, instructionSet);\n  }\n  /**\n   * Pop the last blend mode from the stack and apply the new top-of-stack mode.\n   * @param instructionSet - The instruction set being built.\n   */\n  popBlendMode(instructionSet) {\n    this._blendModeStack.pop();\n    const blendMode = this._blendModeStack[this._activeBlendMode.length - 1] ?? \"normal\";\n    this.setBlendMode(null, blendMode, instructionSet);\n  }\n  /**\n   * Ensure a blend mode switch is added to the instruction set when the mode changes.\n   * If an advanced blend mode is active, subsequent renderables will be collected so they can be\n   * rendered within a single filter pass.\n   * @param renderable - The renderable or {@link RenderGroup} to associate with the change, or null when unwinding.\n   * @param blendMode - The target blend mode.\n   * @param instructionSet - The instruction set being built.\n   */\n  setBlendMode(renderable, blendMode, instructionSet) {\n    const isRenderGroup = renderable instanceof RenderGroup;\n    if (this._activeBlendMode === blendMode) {\n      if (this._isAdvanced && renderable && !isRenderGroup) {\n        this._renderableList?.push(renderable);\n      }\n      return;\n    }\n    if (this._isAdvanced)\n      this._endAdvancedBlendMode(instructionSet);\n    this._activeBlendMode = blendMode;\n    if (!renderable)\n      return;\n    this._isAdvanced = !!BLEND_MODE_FILTERS[blendMode];\n    if (this._isAdvanced)\n      this._beginAdvancedBlendMode(renderable, instructionSet);\n  }\n  _beginAdvancedBlendMode(renderable, instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    const blendMode = this._activeBlendMode;\n    if (!BLEND_MODE_FILTERS[blendMode]) {\n      warn(`Unable to assign BlendMode: '${blendMode}'. You may want to include: import 'pixi.js/advanced-blend-modes'`);\n      return;\n    }\n    const filterEffect = this._ensureFilterEffect(blendMode);\n    const isRenderGroup = renderable instanceof RenderGroup;\n    const instruction = {\n      renderPipeId: \"filter\",\n      action: \"pushFilter\",\n      filterEffect,\n      renderables: isRenderGroup ? null : [renderable],\n      container: isRenderGroup ? renderable.root : null,\n      canBundle: false\n    };\n    this._renderableList = instruction.renderables;\n    instructionSet.add(instruction);\n  }\n  _ensureFilterEffect(blendMode) {\n    let filterEffect = this._filterHash[blendMode];\n    if (!filterEffect) {\n      filterEffect = this._filterHash[blendMode] = new FilterEffect();\n      filterEffect.filters = [new BLEND_MODE_FILTERS[blendMode]()];\n    }\n    return filterEffect;\n  }\n  _endAdvancedBlendMode(instructionSet) {\n    this._isAdvanced = false;\n    this._renderableList = null;\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add({\n      renderPipeId: \"filter\",\n      action: \"popFilter\",\n      canBundle: false\n    });\n  }\n  /**\n   * called when the instruction build process is starting this will reset internally to the default blend mode\n   * @internal\n   */\n  buildStart() {\n    this._isAdvanced = false;\n  }\n  /**\n   * called when the instruction build process is finished, ensuring that if there is an advanced blend mode\n   * active, we add the final render instructions added to the instruction set\n   * @param instructionSet - The instruction set we are adding to\n   * @internal\n   */\n  buildEnd(instructionSet) {\n    if (!this._isAdvanced)\n      return;\n    this._endAdvancedBlendMode(instructionSet);\n  }\n  /** @internal */\n  destroy() {\n    this._renderer = null;\n    this._renderableList = null;\n    for (const i in this._filterHash) {\n      this._filterHash[i].destroy();\n    }\n    this._filterHash = null;\n  }\n}\n/** @ignore */\nBlendModePipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"blendMode\"\n};\n\nexport { BlendModePipe };\n//# sourceMappingURL=BlendModePipe.mjs.map\n","import { DOMAdapter } from '../../../../environment/adapter.mjs';\nimport { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Container } from '../../../../scene/container/Container.mjs';\nimport { Texture } from '../texture/Texture.mjs';\n\n\"use strict\";\nconst imageTypes = {\n  png: \"image/png\",\n  jpg: \"image/jpeg\",\n  webp: \"image/webp\"\n};\nconst _ExtractSystem = class _ExtractSystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  _normalizeOptions(options, defaults = {}) {\n    if (options instanceof Container || options instanceof Texture) {\n      return {\n        target: options,\n        ...defaults\n      };\n    }\n    return {\n      ...defaults,\n      ...options\n    };\n  }\n  /**\n   * Creates an IImage from a display object or texture.\n   * @param options - Options for creating the image, or the target to extract\n   * @returns Promise that resolves with the generated IImage\n   * @example\n   * ```ts\n   * // Basic usage with a sprite\n   * const sprite = new Sprite(texture);\n   * const image = await renderer.extract.image(sprite);\n   * document.body.appendChild(image);\n   *\n   * // Advanced usage with options\n   * const image = await renderer.extract.image({\n   *     target: container,\n   *     format: 'webp',\n   *     quality: 0.8,\n   *     frame: new Rectangle(0, 0, 100, 100),\n   *     resolution: 2,\n   *     clearColor: '#ff0000',\n   *     antialias: true\n   * });\n   *\n   * // Extract directly from a texture\n   * const texture = Texture.from('myTexture.png');\n   * const image = await renderer.extract.image(texture);\n   * ```\n   * @see {@link ExtractImageOptions} For detailed options\n   * @see {@link ExtractSystem.base64} For base64 string output\n   * @see {@link ExtractSystem.canvas} For canvas output\n   * @see {@link ImageLike} For the image interface\n   * @category rendering\n   */\n  async image(options) {\n    const image = DOMAdapter.get().createImage();\n    image.src = await this.base64(options);\n    return image;\n  }\n  /**\n   * Converts the target into a base64 encoded string.\n   *\n   * This method works by first creating\n   * a canvas using `Extract.canvas` and then converting it to a base64 string.\n   * @param options - The options for creating the base64 string, or the target to extract\n   * @returns Promise that resolves with the base64 encoded string\n   * @example\n   * ```ts\n   * // Basic usage with a sprite\n   * const sprite = new Sprite(texture);\n   * const base64 = await renderer.extract.base64(sprite);\n   * console.log(base64); // data:image/png;base64,...\n   *\n   * // Advanced usage with options\n   * const base64 = await renderer.extract.base64({\n   *     target: container,\n   *     format: 'webp',\n   *     quality: 0.8,\n   *     frame: new Rectangle(0, 0, 100, 100),\n   *     resolution: 2\n   * });\n   * ```\n   * @throws Will throw an error if the platform doesn't support any of:\n   * - ICanvas.toDataURL\n   * - ICanvas.toBlob\n   * - ICanvas.convertToBlob\n   * @see {@link ExtractImageOptions} For detailed options\n   * @see {@link ExtractSystem.canvas} For canvas output\n   * @see {@link ExtractSystem.image} For HTMLImage output\n   * @category rendering\n   */\n  async base64(options) {\n    options = this._normalizeOptions(\n      options,\n      _ExtractSystem.defaultImageOptions\n    );\n    const { format, quality } = options;\n    const canvas = this.canvas(options);\n    if (canvas.toBlob !== void 0) {\n      return new Promise((resolve, reject) => {\n        canvas.toBlob((blob) => {\n          if (!blob) {\n            reject(new Error(\"ICanvas.toBlob failed!\"));\n            return;\n          }\n          const reader = new FileReader();\n          reader.onload = () => resolve(reader.result);\n          reader.onerror = reject;\n          reader.readAsDataURL(blob);\n        }, imageTypes[format], quality);\n      });\n    }\n    if (canvas.toDataURL !== void 0) {\n      return canvas.toDataURL(imageTypes[format], quality);\n    }\n    if (canvas.convertToBlob !== void 0) {\n      const blob = await canvas.convertToBlob({ type: imageTypes[format], quality });\n      return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onload = () => resolve(reader.result);\n        reader.onerror = reject;\n        reader.readAsDataURL(blob);\n      });\n    }\n    throw new Error(\"Extract.base64() requires ICanvas.toDataURL, ICanvas.toBlob, or ICanvas.convertToBlob to be implemented\");\n  }\n  /**\n   * Creates a Canvas element, renders the target to it and returns it.\n   * This method is useful for creating static images or when you need direct canvas access.\n   * @param options - The options for creating the canvas, or the target to extract\n   * @returns A Canvas element with the texture rendered on\n   * @example\n   * ```ts\n   * // Basic canvas extraction from a sprite\n   * const sprite = new Sprite(texture);\n   * const canvas = renderer.extract.canvas(sprite);\n   * document.body.appendChild(canvas);\n   *\n   * // Extract with custom region\n   * const canvas = renderer.extract.canvas({\n   *     target: container,\n   *     frame: new Rectangle(0, 0, 100, 100)\n   * });\n   *\n   * // Extract with high resolution\n   * const canvas = renderer.extract.canvas({\n   *     target: sprite,\n   *     resolution: 2,\n   *     clearColor: '#ff0000'\n   * });\n   *\n   * // Extract directly from a texture\n   * const texture = Texture.from('myTexture.png');\n   * const canvas = renderer.extract.canvas(texture);\n   *\n   * // Extract with anti-aliasing\n   * const canvas = renderer.extract.canvas({\n   *     target: graphics,\n   *     antialias: true\n   * });\n   * ```\n   * @see {@link ExtractOptions} For detailed options\n   * @see {@link ExtractSystem.image} For HTMLImage output\n   * @see {@link ExtractSystem.pixels} For raw pixel data\n   * @category rendering\n   */\n  canvas(options) {\n    options = this._normalizeOptions(options);\n    const target = options.target;\n    const renderer = this._renderer;\n    if (target instanceof Texture) {\n      return renderer.texture.generateCanvas(target);\n    }\n    const texture = renderer.textureGenerator.generateTexture(options);\n    const canvas = renderer.texture.generateCanvas(texture);\n    texture.destroy(true);\n    return canvas;\n  }\n  /**\n   * Returns a one-dimensional array containing the pixel data of the entire texture in RGBA order,\n   * with integer values between 0 and 255 (inclusive).\n   * > [!NOE] The returned array is a flat Uint8Array where every 4 values represent RGBA\n   * @param options - The options for extracting the image, or the target to extract\n   * @returns One-dimensional Uint8Array containing the pixel data in RGBA format\n   * @example\n   * ```ts\n   * // Basic pixel extraction\n   * const sprite = new Sprite(texture);\n   * const pixels = renderer.extract.pixels(sprite);\n   * console.log(pixels[0], pixels[1], pixels[2], pixels[3]); // R,G,B,A values\n   *\n   * // Extract with custom region\n   * const pixels = renderer.extract.pixels({\n   *     target: sprite,\n   *     frame: new Rectangle(0, 0, 100, 100)\n   * });\n   *\n   * // Extract with high resolution\n   * const pixels = renderer.extract.pixels({\n   *     target: sprite,\n   *     resolution: 2\n   * });\n   * ```\n   * @see {@link ExtractOptions} For detailed options\n   * @see {@link ExtractSystem.canvas} For canvas output\n   * @see {@link ExtractSystem.image} For image output\n   * @category rendering\n   */\n  pixels(options) {\n    options = this._normalizeOptions(options);\n    const target = options.target;\n    const renderer = this._renderer;\n    const texture = target instanceof Texture ? target : renderer.textureGenerator.generateTexture(options);\n    const pixelInfo = renderer.texture.getPixels(texture);\n    if (target instanceof Container) {\n      texture.destroy(true);\n    }\n    return pixelInfo;\n  }\n  /**\n   * Creates a texture from a display object or existing texture.\n   *\n   * This is useful for creating\n   * reusable textures from rendered content or making copies of existing textures.\n   * > [!NOTE] The returned texture should be destroyed when no longer needed\n   * @param options - The options for creating the texture, or the target to extract\n   * @returns A new texture containing the extracted content\n   * @example\n   * ```ts\n   * // Basic texture extraction from a sprite\n   * const sprite = new Sprite(texture);\n   * const extractedTexture = renderer.extract.texture(sprite);\n   *\n   * // Extract with custom region\n   * const regionTexture = renderer.extract.texture({\n   *     target: container,\n   *     frame: new Rectangle(0, 0, 100, 100)\n   * });\n   *\n   * // Extract with high resolution\n   * const hiResTexture = renderer.extract.texture({\n   *     target: sprite,\n   *     resolution: 2,\n   *     clearColor: '#ff0000'\n   * });\n   *\n   * // Create a new sprite from extracted texture\n   * const newSprite = new Sprite(\n   *     renderer.extract.texture({\n   *         target: graphics,\n   *         antialias: true\n   *     })\n   * );\n   *\n   * // Clean up when done\n   * extractedTexture.destroy(true);\n   * ```\n   * @see {@link ExtractOptions} For detailed options\n   * @see {@link Texture} For texture management\n   * @see {@link GenerateTextureSystem} For texture generation\n   * @category rendering\n   */\n  texture(options) {\n    options = this._normalizeOptions(options);\n    if (options.target instanceof Texture)\n      return options.target;\n    return this._renderer.textureGenerator.generateTexture(options);\n  }\n  /**\n   * Extracts and downloads content from the renderer as an image file.\n   * This is a convenient way to save screenshots or export rendered content.\n   * > [!NOTE] The download will use PNG format regardless of the filename extension\n   * @param options - The options for downloading and extracting the image, or the target to extract\n   * @example\n   * ```ts\n   * // Basic download with default filename\n   * const sprite = new Sprite(texture);\n   * renderer.extract.download(sprite); // Downloads as 'image.png'\n   *\n   * // Download with custom filename\n   * renderer.extract.download({\n   *     target: sprite,\n   *     filename: 'screenshot.png'\n   * });\n   *\n   * // Download with custom region\n   * renderer.extract.download({\n   *     target: container,\n   *     filename: 'region.png',\n   *     frame: new Rectangle(0, 0, 100, 100)\n   * });\n   *\n   * // Download with high resolution and background\n   * renderer.extract.download({\n   *     target: stage,\n   *     filename: 'hd-screenshot.png',\n   *     resolution: 2,\n   *     clearColor: '#ff0000'\n   * });\n   *\n   * // Download with anti-aliasing\n   * renderer.extract.download({\n   *     target: graphics,\n   *     filename: 'smooth.png',\n   *     antialias: true\n   * });\n   * ```\n   * @see {@link ExtractDownloadOptions} For detailed options\n   * @see {@link ExtractSystem.image} For creating images without download\n   * @see {@link ExtractSystem.canvas} For canvas output\n   * @category rendering\n   */\n  download(options) {\n    options = this._normalizeOptions(options);\n    const canvas = this.canvas(options);\n    const link = document.createElement(\"a\");\n    link.download = options.filename ?? \"image.png\";\n    link.href = canvas.toDataURL(\"image/png\");\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  }\n  /**\n   * Logs the target to the console as an image. This is a useful way to debug what's happening in the renderer.\n   * The image will be displayed in the browser's console using CSS background images.\n   * @param options - The options for logging the image, or the target to log\n   * @param options.width - The width of the logged image preview in the console (in pixels)\n   * @example\n   * ```ts\n   * // Basic usage\n   * const sprite = new Sprite(texture);\n   * renderer.extract.log(sprite);\n   * ```\n   * @see {@link ExtractSystem.canvas} For getting raw canvas output\n   * @see {@link ExtractSystem.pixels} For raw pixel data\n   * @category rendering\n   * @advanced\n   */\n  log(options) {\n    const width = options.width ?? 200;\n    options = this._normalizeOptions(options);\n    const canvas = this.canvas(options);\n    const base64 = canvas.toDataURL();\n    console.log(`[Pixi Texture] ${canvas.width}px ${canvas.height}px`);\n    const style = [\n      \"font-size: 1px;\",\n      `padding: ${width}px ${300}px;`,\n      `background: url(${base64}) no-repeat;`,\n      \"background-size: contain;\"\n    ].join(\" \");\n    console.log(\"%c \", style);\n  }\n  destroy() {\n    this._renderer = null;\n  }\n};\n/** @ignore */\n_ExtractSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"extract\"\n};\n/**\n * Default options for image extraction.\n * @example\n * ```ts\n * // Customize default options\n * ExtractSystem.defaultImageOptions.format = 'webp';\n * ExtractSystem.defaultImageOptions.quality = 0.8;\n *\n * // Use defaults\n * const image = await renderer.extract.image(sprite);\n * ```\n */\n_ExtractSystem.defaultImageOptions = {\n  format: \"png\",\n  quality: 1\n};\nlet ExtractSystem = _ExtractSystem;\n\nexport { ExtractSystem };\n//# sourceMappingURL=ExtractSystem.mjs.map\n","import { TextureSource } from './sources/TextureSource.mjs';\nimport { Texture } from './Texture.mjs';\n\n\"use strict\";\nclass RenderTexture extends Texture {\n  static create(options) {\n    return new RenderTexture({\n      source: new TextureSource(options)\n    });\n  }\n  /**\n   * Resizes the render texture.\n   * @param width - The new width of the render texture.\n   * @param height - The new height of the render texture.\n   * @param resolution - The new resolution of the render texture.\n   * @returns This texture.\n   */\n  resize(width, height, resolution) {\n    this.source.resize(width, height, resolution);\n    return this;\n  }\n}\n\nexport { RenderTexture };\n//# sourceMappingURL=RenderTexture.mjs.map\n","import { Color } from '../../../../color/Color.mjs';\nimport { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle.mjs';\nimport { Bounds } from '../../../../scene/container/bounds/Bounds.mjs';\nimport { getLocalBounds } from '../../../../scene/container/bounds/getLocalBounds.mjs';\nimport { Container } from '../../../../scene/container/Container.mjs';\nimport { RenderTexture } from '../texture/RenderTexture.mjs';\n\n\"use strict\";\nconst tempRect = new Rectangle();\nconst tempBounds = new Bounds();\nconst noColor = [0, 0, 0, 0];\nclass GenerateTextureSystem {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  /**\n   * Creates a texture from a display object that can be used for creating sprites and other textures.\n   * This is particularly useful for optimizing performance when a complex container needs to be reused.\n   * @param options - Generate texture options or a container to convert to texture\n   * @returns A new RenderTexture containing the rendered display object\n   * @example\n   * ```ts\n   * // Basic usage with a container\n   * const container = new Container();\n   * container.addChild(\n   *     new Graphics()\n   *         .circle(0, 0, 50)\n   *         .fill('red')\n   * );\n   *\n   * const texture = renderer.textureGenerator.generateTexture(container);\n   *\n   * // Advanced usage with options\n   * const texture = renderer.textureGenerator.generateTexture({\n   *     target: container,\n   *     frame: new Rectangle(0, 0, 100, 100), // Specific region\n   *     resolution: 2,                        // High DPI\n   *     clearColor: '#ff0000',               // Red background\n   *     antialias: true                      // Smooth edges\n   * });\n   *\n   * // Create a sprite from the generated texture\n   * const sprite = new Sprite(texture);\n   *\n   * // Clean up when done\n   * texture.destroy(true);\n   * ```\n   * @see {@link GenerateTextureOptions} For detailed texture generation options\n   * @see {@link RenderTexture} For the type of texture created\n   * @category rendering\n   */\n  generateTexture(options) {\n    if (options instanceof Container) {\n      options = {\n        target: options,\n        frame: void 0,\n        textureSourceOptions: {},\n        resolution: void 0\n      };\n    }\n    const resolution = options.resolution || this._renderer.resolution;\n    const antialias = options.antialias || this._renderer.view.antialias;\n    const container = options.target;\n    let clearColor = options.clearColor;\n    if (clearColor) {\n      const isRGBAArray = Array.isArray(clearColor) && clearColor.length === 4;\n      clearColor = isRGBAArray ? clearColor : Color.shared.setValue(clearColor).toArray();\n    } else {\n      clearColor = noColor;\n    }\n    const region = options.frame?.copyTo(tempRect) || getLocalBounds(container, tempBounds).rectangle;\n    region.width = Math.max(region.width, 1 / resolution) | 0;\n    region.height = Math.max(region.height, 1 / resolution) | 0;\n    const target = RenderTexture.create({\n      ...options.textureSourceOptions,\n      width: region.width,\n      height: region.height,\n      resolution,\n      antialias\n    });\n    const transform = Matrix.shared.translate(-region.x, -region.y);\n    this._renderer.render({\n      container,\n      transform,\n      target,\n      clearColor\n    });\n    target.source.updateMipmaps();\n    return target;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\n/** @ignore */\nGenerateTextureSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"textureGenerator\"\n};\n\nexport { GenerateTextureSystem };\n//# sourceMappingURL=GenerateTextureSystem.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { Point } from '../../../../maths/point/Point.mjs';\nimport { color32BitToUniform } from '../../../../scene/graphics/gpu/colorToUniform.mjs';\nimport { BindGroup } from '../../gpu/shader/BindGroup.mjs';\nimport { RendererType } from '../../types.mjs';\nimport { UniformGroup } from '../shader/UniformGroup.mjs';\n\n\"use strict\";\nclass GlobalUniformSystem {\n  constructor(renderer) {\n    this._stackIndex = 0;\n    this._globalUniformDataStack = [];\n    this._uniformsPool = [];\n    this._activeUniforms = [];\n    this._bindGroupPool = [];\n    this._activeBindGroups = [];\n    this._renderer = renderer;\n  }\n  reset() {\n    this._stackIndex = 0;\n    for (let i = 0; i < this._activeUniforms.length; i++) {\n      this._uniformsPool.push(this._activeUniforms[i]);\n    }\n    for (let i = 0; i < this._activeBindGroups.length; i++) {\n      this._bindGroupPool.push(this._activeBindGroups[i]);\n    }\n    this._activeUniforms.length = 0;\n    this._activeBindGroups.length = 0;\n  }\n  start(options) {\n    this.reset();\n    this.push(options);\n  }\n  bind({\n    size,\n    projectionMatrix,\n    worldTransformMatrix,\n    worldColor,\n    offset\n  }) {\n    const renderTarget = this._renderer.renderTarget.renderTarget;\n    const currentGlobalUniformData = this._stackIndex ? this._globalUniformDataStack[this._stackIndex - 1] : {\n      projectionData: renderTarget,\n      worldTransformMatrix: new Matrix(),\n      worldColor: 4294967295,\n      offset: new Point()\n    };\n    const globalUniformData = {\n      projectionMatrix: projectionMatrix || this._renderer.renderTarget.projectionMatrix,\n      resolution: size || renderTarget.size,\n      worldTransformMatrix: worldTransformMatrix || currentGlobalUniformData.worldTransformMatrix,\n      worldColor: worldColor || currentGlobalUniformData.worldColor,\n      offset: offset || currentGlobalUniformData.offset,\n      bindGroup: null\n    };\n    const uniformGroup = this._uniformsPool.pop() || this._createUniforms();\n    this._activeUniforms.push(uniformGroup);\n    const uniforms = uniformGroup.uniforms;\n    uniforms.uProjectionMatrix = globalUniformData.projectionMatrix;\n    uniforms.uResolution = globalUniformData.resolution;\n    uniforms.uWorldTransformMatrix.copyFrom(globalUniformData.worldTransformMatrix);\n    uniforms.uWorldTransformMatrix.tx -= globalUniformData.offset.x;\n    uniforms.uWorldTransformMatrix.ty -= globalUniformData.offset.y;\n    color32BitToUniform(\n      globalUniformData.worldColor,\n      uniforms.uWorldColorAlpha,\n      0\n    );\n    uniformGroup.update();\n    let bindGroup;\n    if (this._renderer.renderPipes.uniformBatch) {\n      bindGroup = this._renderer.renderPipes.uniformBatch.getUniformBindGroup(uniformGroup, false);\n    } else {\n      bindGroup = this._bindGroupPool.pop() || new BindGroup();\n      this._activeBindGroups.push(bindGroup);\n      bindGroup.setResource(uniformGroup, 0);\n    }\n    globalUniformData.bindGroup = bindGroup;\n    this._currentGlobalUniformData = globalUniformData;\n  }\n  push(options) {\n    this.bind(options);\n    this._globalUniformDataStack[this._stackIndex++] = this._currentGlobalUniformData;\n  }\n  pop() {\n    this._currentGlobalUniformData = this._globalUniformDataStack[--this._stackIndex - 1];\n    if (this._renderer.type === RendererType.WEBGL) {\n      this._currentGlobalUniformData.bindGroup.resources[0].update();\n    }\n  }\n  get bindGroup() {\n    return this._currentGlobalUniformData.bindGroup;\n  }\n  get globalUniformData() {\n    return this._currentGlobalUniformData;\n  }\n  get uniformGroup() {\n    return this._currentGlobalUniformData.bindGroup.resources[0];\n  }\n  _createUniforms() {\n    const globalUniforms = new UniformGroup({\n      uProjectionMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uWorldTransformMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      // TODO - someone smart - set this to be a unorm8x4 rather than a vec4<f32>\n      uWorldColorAlpha: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uResolution: { value: [0, 0], type: \"vec2<f32>\" }\n    }, {\n      isStatic: true\n    });\n    return globalUniforms;\n  }\n  destroy() {\n    this._renderer = null;\n    this._globalUniformDataStack.length = 0;\n    this._uniformsPool.length = 0;\n    this._activeUniforms.length = 0;\n    this._bindGroupPool.length = 0;\n    this._activeBindGroups.length = 0;\n    this._currentGlobalUniformData = null;\n  }\n}\n/** @ignore */\nGlobalUniformSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"globalUniforms\"\n};\n\nexport { GlobalUniformSystem };\n//# sourceMappingURL=GlobalUniformSystem.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { Ticker } from '../../../ticker/Ticker.mjs';\n\n\"use strict\";\nlet uid = 1;\nclass SchedulerSystem {\n  constructor() {\n    this._tasks = [];\n    /** a small off set to apply to the repeat schedules. This is just to make sure they run at slightly different times */\n    this._offset = 0;\n  }\n  /** Initializes the scheduler system and starts the ticker. */\n  init() {\n    Ticker.system.add(this._update, this);\n  }\n  /**\n   * Schedules a repeating task.\n   * @param func - The function to execute.\n   * @param duration - The interval duration in milliseconds.\n   * @param useOffset - this will spread out tasks so that they do not all run at the same time\n   * @returns The unique identifier for the scheduled task.\n   */\n  repeat(func, duration, useOffset = true) {\n    const id = uid++;\n    let offset = 0;\n    if (useOffset) {\n      this._offset += 1e3;\n      offset = this._offset;\n    }\n    this._tasks.push({\n      func,\n      duration,\n      start: performance.now(),\n      offset,\n      last: performance.now(),\n      repeat: true,\n      id\n    });\n    return id;\n  }\n  /**\n   * Cancels a scheduled task.\n   * @param id - The unique identifier of the task to cancel.\n   */\n  cancel(id) {\n    for (let i = 0; i < this._tasks.length; i++) {\n      if (this._tasks[i].id === id) {\n        this._tasks.splice(i, 1);\n        return;\n      }\n    }\n  }\n  /**\n   * Updates and executes the scheduled tasks.\n   * @private\n   */\n  _update() {\n    const now = performance.now();\n    for (let i = 0; i < this._tasks.length; i++) {\n      const task = this._tasks[i];\n      if (now - task.offset - task.last >= task.duration) {\n        const elapsed = now - task.start;\n        task.func(elapsed);\n        task.last = now;\n      }\n    }\n  }\n  /**\n   * Destroys the scheduler system and removes all tasks.\n   * @internal\n   */\n  destroy() {\n    Ticker.system.remove(this._update, this);\n    this._tasks.length = 0;\n  }\n}\n/** @ignore */\nSchedulerSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"scheduler\",\n  priority: 0\n};\n\nexport { SchedulerSystem };\n//# sourceMappingURL=SchedulerSystem.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { sayHello } from '../../../../utils/sayHello.mjs';\nimport { RendererType } from '../../types.mjs';\n\n\"use strict\";\nclass HelloSystem {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  /**\n   * It all starts here! This initiates every system, passing in the options for any system by name.\n   * @param options - the config for the renderer and all its systems\n   */\n  init(options) {\n    if (options.hello) {\n      let name = this._renderer.name;\n      if (this._renderer.type === RendererType.WEBGL) {\n        name += ` ${this._renderer.context.webGLVersion}`;\n      }\n      sayHello(name);\n    }\n  }\n}\n/** @ignore */\nHelloSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"hello\",\n  priority: -2\n};\n/** The default options for the system. */\nHelloSystem.defaultOptions = {\n  /** {@link WebGLOptions.hello} */\n  hello: false\n};\n\nexport { HelloSystem };\n//# sourceMappingURL=HelloSystem.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { cleanHash, cleanArray } from '../../../../utils/data/clean.mjs';\n\n\"use strict\";\nlet renderableGCTick = 0;\nconst _RenderableGCSystem = class _RenderableGCSystem {\n  /**\n   * Creates a new RenderableGCSystem instance.\n   * @param renderer - The renderer this garbage collection system works for\n   */\n  constructor(renderer) {\n    /** Array of renderables being tracked for garbage collection */\n    this._managedRenderables = [];\n    /** Array of hash objects being tracked for cleanup */\n    this._managedHashes = [];\n    /** Array of arrays being tracked for cleanup */\n    this._managedArrays = [];\n    this._renderer = renderer;\n  }\n  /**\n   * Initializes the garbage collection system with the provided options.\n   * @param options - Configuration options for the renderer\n   */\n  init(options) {\n    options = { ..._RenderableGCSystem.defaultOptions, ...options };\n    this.maxUnusedTime = options.renderableGCMaxUnusedTime;\n    this._frequency = options.renderableGCFrequency;\n    this.enabled = options.renderableGCActive;\n  }\n  /**\n   * Gets whether the garbage collection system is currently enabled.\n   * @returns True if GC is enabled, false otherwise\n   */\n  get enabled() {\n    return !!this._handler;\n  }\n  /**\n   * Enables or disables the garbage collection system.\n   * When enabled, schedules periodic cleanup of resources.\n   * When disabled, cancels all scheduled cleanups.\n   */\n  set enabled(value) {\n    if (this.enabled === value)\n      return;\n    if (value) {\n      this._handler = this._renderer.scheduler.repeat(\n        () => this.run(),\n        this._frequency,\n        false\n      );\n      this._hashHandler = this._renderer.scheduler.repeat(\n        () => {\n          for (const hash of this._managedHashes) {\n            hash.context[hash.hash] = cleanHash(hash.context[hash.hash]);\n          }\n        },\n        this._frequency\n      );\n      this._arrayHandler = this._renderer.scheduler.repeat(\n        () => {\n          for (const array of this._managedArrays) {\n            cleanArray(array.context[array.hash]);\n          }\n        },\n        this._frequency\n      );\n    } else {\n      this._renderer.scheduler.cancel(this._handler);\n      this._renderer.scheduler.cancel(this._hashHandler);\n      this._renderer.scheduler.cancel(this._arrayHandler);\n    }\n  }\n  /**\n   * Adds a hash table to be managed by the garbage collector.\n   * @param context - The object containing the hash table\n   * @param hash - The property name of the hash table\n   */\n  addManagedHash(context, hash) {\n    this._managedHashes.push({ context, hash });\n  }\n  /**\n   * Adds an array to be managed by the garbage collector.\n   * @param context - The object containing the array\n   * @param hash - The property name of the array\n   */\n  addManagedArray(context, hash) {\n    this._managedArrays.push({ context, hash });\n  }\n  /**\n   * Updates the GC timestamp and tracking before rendering.\n   * @param options - The render options\n   * @param options.container - The container to render\n   */\n  prerender({\n    container\n  }) {\n    this._now = performance.now();\n    container.renderGroup.gcTick = renderableGCTick++;\n    this._updateInstructionGCTick(container.renderGroup, container.renderGroup.gcTick);\n  }\n  /**\n   * Starts tracking a renderable for garbage collection.\n   * @param renderable - The renderable to track\n   */\n  addRenderable(renderable) {\n    if (!this.enabled)\n      return;\n    if (renderable._lastUsed === -1) {\n      this._managedRenderables.push(renderable);\n      renderable.once(\"destroyed\", this._removeRenderable, this);\n    }\n    renderable._lastUsed = this._now;\n  }\n  /**\n   * Performs garbage collection by cleaning up unused renderables.\n   * Removes renderables that haven't been used for longer than maxUnusedTime.\n   */\n  run() {\n    const now = this._now;\n    const managedRenderables = this._managedRenderables;\n    const renderPipes = this._renderer.renderPipes;\n    let offset = 0;\n    for (let i = 0; i < managedRenderables.length; i++) {\n      const renderable = managedRenderables[i];\n      if (renderable === null) {\n        offset++;\n        continue;\n      }\n      const renderGroup = renderable.renderGroup ?? renderable.parentRenderGroup;\n      const currentTick = renderGroup?.instructionSet?.gcTick ?? -1;\n      if ((renderGroup?.gcTick ?? 0) === currentTick) {\n        renderable._lastUsed = now;\n      }\n      if (now - renderable._lastUsed > this.maxUnusedTime) {\n        if (!renderable.destroyed) {\n          const rp = renderPipes;\n          if (renderGroup)\n            renderGroup.structureDidChange = true;\n          rp[renderable.renderPipeId].destroyRenderable(renderable);\n        }\n        renderable._lastUsed = -1;\n        offset++;\n        renderable.off(\"destroyed\", this._removeRenderable, this);\n      } else {\n        managedRenderables[i - offset] = renderable;\n      }\n    }\n    managedRenderables.length -= offset;\n  }\n  /** Cleans up the garbage collection system. Disables GC and removes all tracked resources. */\n  destroy() {\n    this.enabled = false;\n    this._renderer = null;\n    this._managedRenderables.length = 0;\n    this._managedHashes.length = 0;\n    this._managedArrays.length = 0;\n  }\n  /**\n   * Removes a renderable from being tracked when it's destroyed.\n   * @param renderable - The renderable to stop tracking\n   */\n  _removeRenderable(renderable) {\n    const index = this._managedRenderables.indexOf(renderable);\n    if (index >= 0) {\n      renderable.off(\"destroyed\", this._removeRenderable, this);\n      this._managedRenderables[index] = null;\n    }\n  }\n  /**\n   * Updates the GC tick counter for a render group and its children.\n   * @param renderGroup - The render group to update\n   * @param gcTick - The new tick value\n   */\n  _updateInstructionGCTick(renderGroup, gcTick) {\n    renderGroup.instructionSet.gcTick = gcTick;\n    for (const child of renderGroup.renderGroupChildren) {\n      this._updateInstructionGCTick(child, gcTick);\n    }\n  }\n};\n/**\n * Extension metadata for registering this system with the renderer.\n * @ignore\n */\n_RenderableGCSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"renderableGC\",\n  priority: 0\n};\n/**\n * Default configuration options for the garbage collection system.\n * These can be overridden when initializing the renderer.\n */\n_RenderableGCSystem.defaultOptions = {\n  /** Enable/disable the garbage collector */\n  renderableGCActive: true,\n  /** Time in ms before an unused resource is collected (default 1 minute) */\n  renderableGCMaxUnusedTime: 6e4,\n  /** How often to run garbage collection in ms (default 30 seconds) */\n  renderableGCFrequency: 3e4\n};\nlet RenderableGCSystem = _RenderableGCSystem;\n\nexport { RenderableGCSystem };\n//# sourceMappingURL=RenderableGCSystem.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\n\n\"use strict\";\nconst _TextureGCSystem = class _TextureGCSystem {\n  /** @param renderer - The renderer this System works for. */\n  constructor(renderer) {\n    this._renderer = renderer;\n    this.count = 0;\n    this.checkCount = 0;\n  }\n  init(options) {\n    options = { ..._TextureGCSystem.defaultOptions, ...options };\n    this.checkCountMax = options.textureGCCheckCountMax;\n    this.maxIdle = options.textureGCAMaxIdle ?? options.textureGCMaxIdle;\n    this.active = options.textureGCActive;\n  }\n  /**\n   * Checks to see when the last time a texture was used.\n   * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n   */\n  postrender() {\n    if (!this._renderer.renderingToScreen) {\n      return;\n    }\n    this.count++;\n    if (!this.active)\n      return;\n    this.checkCount++;\n    if (this.checkCount > this.checkCountMax) {\n      this.checkCount = 0;\n      this.run();\n    }\n  }\n  /**\n   * Checks to see when the last time a texture was used.\n   * If the texture has not been used for a specified amount of time, it will be removed from the GPU.\n   */\n  run() {\n    const managedTextures = this._renderer.texture.managedTextures;\n    for (let i = 0; i < managedTextures.length; i++) {\n      const texture = managedTextures[i];\n      if (texture.autoGarbageCollect && texture.resource && texture._touched > -1 && this.count - texture._touched > this.maxIdle) {\n        texture._touched = -1;\n        texture.unload();\n      }\n    }\n  }\n  destroy() {\n    this._renderer = null;\n  }\n};\n/** @ignore */\n_TextureGCSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"textureGC\"\n};\n/** default options for the TextureGCSystem */\n_TextureGCSystem.defaultOptions = {\n  /**\n   * If set to true, this will enable the garbage collector on the GPU.\n   * @default true\n   */\n  textureGCActive: true,\n  /**\n   * @deprecated since 8.3.0\n   * @see {@link TextureGCSystemOptions.textureGCMaxIdle}\n   */\n  textureGCAMaxIdle: null,\n  /**\n   * The maximum idle frames before a texture is destroyed by garbage collection.\n   * @default 60 * 60\n   */\n  textureGCMaxIdle: 60 * 60,\n  /**\n   * Frames between two garbage collections.\n   * @default 600\n   */\n  textureGCCheckCountMax: 600\n};\nlet TextureGCSystem = _TextureGCSystem;\n\nexport { TextureGCSystem };\n//# sourceMappingURL=TextureGCSystem.mjs.map\n","import { DOMAdapter } from '../../../../environment/adapter.mjs';\nimport { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle.mjs';\nimport { deprecation, v8_0_0 } from '../../../../utils/logging/deprecation.mjs';\nimport { RenderTarget } from '../renderTarget/RenderTarget.mjs';\nimport { getCanvasTexture } from '../texture/utils/getCanvasTexture.mjs';\n\n\"use strict\";\nconst _ViewSystem = class _ViewSystem {\n  /**\n   * Whether CSS dimensions of canvas view should be resized to screen dimensions automatically.\n   * This is only supported for HTMLCanvasElement and will be ignored if the canvas is an OffscreenCanvas.\n   * @type {boolean}\n   */\n  get autoDensity() {\n    return this.texture.source.autoDensity;\n  }\n  set autoDensity(value) {\n    this.texture.source.autoDensity = value;\n  }\n  /** The resolution / device pixel ratio of the renderer. */\n  get resolution() {\n    return this.texture.source._resolution;\n  }\n  set resolution(value) {\n    this.texture.source.resize(\n      this.texture.source.width,\n      this.texture.source.height,\n      value\n    );\n  }\n  /**\n   * initiates the view system\n   * @param options - the options for the view\n   */\n  init(options) {\n    options = {\n      ..._ViewSystem.defaultOptions,\n      ...options\n    };\n    if (options.view) {\n      deprecation(v8_0_0, \"ViewSystem.view has been renamed to ViewSystem.canvas\");\n      options.canvas = options.view;\n    }\n    this.screen = new Rectangle(0, 0, options.width, options.height);\n    this.canvas = options.canvas || DOMAdapter.get().createCanvas();\n    this.antialias = !!options.antialias;\n    this.texture = getCanvasTexture(this.canvas, options);\n    this.renderTarget = new RenderTarget({\n      colorTextures: [this.texture],\n      depth: !!options.depth,\n      isRoot: true\n    });\n    this.texture.source.transparent = options.backgroundAlpha < 1;\n    this.resolution = options.resolution;\n  }\n  /**\n   * Resizes the screen and canvas to the specified dimensions.\n   * @param desiredScreenWidth - The new width of the screen.\n   * @param desiredScreenHeight - The new height of the screen.\n   * @param resolution\n   */\n  resize(desiredScreenWidth, desiredScreenHeight, resolution) {\n    this.texture.source.resize(desiredScreenWidth, desiredScreenHeight, resolution);\n    this.screen.width = this.texture.frame.width;\n    this.screen.height = this.texture.frame.height;\n  }\n  /**\n   * Destroys this System and optionally removes the canvas from the dom.\n   * @param {options | false} options - The options for destroying the view, or \"false\".\n   * @example\n   * viewSystem.destroy();\n   * viewSystem.destroy(true);\n   * viewSystem.destroy({ removeView: true });\n   */\n  destroy(options = false) {\n    const removeView = typeof options === \"boolean\" ? options : !!options?.removeView;\n    if (removeView && this.canvas.parentNode) {\n      this.canvas.parentNode.removeChild(this.canvas);\n    }\n    this.texture.destroy();\n  }\n};\n/** @ignore */\n_ViewSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"view\",\n  priority: 0\n};\n/** The default options for the view system. */\n_ViewSystem.defaultOptions = {\n  /**\n   * {@link WebGLOptions.width}\n   * @default 800\n   */\n  width: 800,\n  /**\n   * {@link WebGLOptions.height}\n   * @default 600\n   */\n  height: 600,\n  /**\n   * {@link WebGLOptions.autoDensity}\n   * @default false\n   */\n  autoDensity: false,\n  /**\n   * {@link WebGLOptions.antialias}\n   * @default false\n   */\n  antialias: false\n};\nlet ViewSystem = _ViewSystem;\n\nexport { ViewSystem };\n//# sourceMappingURL=ViewSystem.mjs.map\n","import { CustomRenderPipe } from '../../../../scene/container/CustomRenderPipe.mjs';\nimport { RenderGroupPipe } from '../../../../scene/container/RenderGroupPipe.mjs';\nimport { RenderGroupSystem } from '../../../../scene/container/RenderGroupSystem.mjs';\nimport { SpritePipe } from '../../../../scene/sprite/SpritePipe.mjs';\nimport { RendererInitHook } from '../../../../utils/global/globalHooks.mjs';\nimport { BatcherPipe } from '../../../batcher/shared/BatcherPipe.mjs';\nimport { AlphaMaskPipe } from '../../../mask/alpha/AlphaMaskPipe.mjs';\nimport { ColorMaskPipe } from '../../../mask/color/ColorMaskPipe.mjs';\nimport { StencilMaskPipe } from '../../../mask/stencil/StencilMaskPipe.mjs';\nimport { BackgroundSystem } from '../background/BackgroundSystem.mjs';\nimport { BlendModePipe } from '../blendModes/BlendModePipe.mjs';\nimport { ExtractSystem } from '../extract/ExtractSystem.mjs';\nimport { GenerateTextureSystem } from '../extract/GenerateTextureSystem.mjs';\nimport { GlobalUniformSystem } from '../renderTarget/GlobalUniformSystem.mjs';\nimport { SchedulerSystem } from '../SchedulerSystem.mjs';\nimport { HelloSystem } from '../startup/HelloSystem.mjs';\nimport { RenderableGCSystem } from '../texture/RenderableGCSystem.mjs';\nimport { TextureGCSystem } from '../texture/TextureGCSystem.mjs';\nimport { ViewSystem } from '../view/ViewSystem.mjs';\n\n\"use strict\";\nconst SharedSystems = [\n  BackgroundSystem,\n  GlobalUniformSystem,\n  HelloSystem,\n  ViewSystem,\n  RenderGroupSystem,\n  TextureGCSystem,\n  GenerateTextureSystem,\n  ExtractSystem,\n  RendererInitHook,\n  RenderableGCSystem,\n  SchedulerSystem\n];\nconst SharedRenderPipes = [\n  BlendModePipe,\n  BatcherPipe,\n  SpritePipe,\n  RenderGroupPipe,\n  AlphaMaskPipe,\n  StencilMaskPipe,\n  ColorMaskPipe,\n  CustomRenderPipe\n];\n\nexport { SharedRenderPipes, SharedSystems };\n//# sourceMappingURL=SharedSystems.mjs.map\n","import { extensions, ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { GlGraphicsAdaptor } from '../../../scene/graphics/gl/GlGraphicsAdaptor.mjs';\nimport { GlMeshAdaptor } from '../../../scene/mesh/gl/GlMeshAdaptor.mjs';\nimport { GlBatchAdaptor } from '../../batcher/gl/GlBatchAdaptor.mjs';\nimport { AbstractRenderer } from '../shared/system/AbstractRenderer.mjs';\nimport { SharedSystems, SharedRenderPipes } from '../shared/system/SharedSystems.mjs';\nimport { RendererType } from '../types.mjs';\nimport { GlBufferSystem } from './buffer/GlBufferSystem.mjs';\nimport { GlContextSystem } from './context/GlContextSystem.mjs';\nimport { GlGeometrySystem } from './geometry/GlGeometrySystem.mjs';\nimport { GlBackBufferSystem } from './GlBackBufferSystem.mjs';\nimport { GlColorMaskSystem } from './GlColorMaskSystem.mjs';\nimport { GlEncoderSystem } from './GlEncoderSystem.mjs';\nimport { GlLimitsSystem } from './GlLimitsSystem.mjs';\nimport { GlStencilSystem } from './GlStencilSystem.mjs';\nimport { GlUboSystem } from './GlUboSystem.mjs';\nimport { GlRenderTargetSystem } from './renderTarget/GlRenderTargetSystem.mjs';\nimport { GlShaderSystem } from './shader/GlShaderSystem.mjs';\nimport { GlUniformGroupSystem } from './shader/GlUniformGroupSystem.mjs';\nimport { GlStateSystem } from './state/GlStateSystem.mjs';\nimport { GlTextureSystem } from './texture/GlTextureSystem.mjs';\n\n\"use strict\";\nconst DefaultWebGLSystems = [\n  ...SharedSystems,\n  GlUboSystem,\n  GlBackBufferSystem,\n  GlContextSystem,\n  GlLimitsSystem,\n  GlBufferSystem,\n  GlTextureSystem,\n  GlRenderTargetSystem,\n  GlGeometrySystem,\n  GlUniformGroupSystem,\n  GlShaderSystem,\n  GlEncoderSystem,\n  GlStateSystem,\n  GlStencilSystem,\n  GlColorMaskSystem\n];\nconst DefaultWebGLPipes = [...SharedRenderPipes];\nconst DefaultWebGLAdapters = [GlBatchAdaptor, GlMeshAdaptor, GlGraphicsAdaptor];\nconst systems = [];\nconst renderPipes = [];\nconst renderPipeAdaptors = [];\nextensions.handleByNamedList(ExtensionType.WebGLSystem, systems);\nextensions.handleByNamedList(ExtensionType.WebGLPipes, renderPipes);\nextensions.handleByNamedList(ExtensionType.WebGLPipesAdaptor, renderPipeAdaptors);\nextensions.add(...DefaultWebGLSystems, ...DefaultWebGLPipes, ...DefaultWebGLAdapters);\nclass WebGLRenderer extends AbstractRenderer {\n  constructor() {\n    const systemConfig = {\n      name: \"webgl\",\n      type: RendererType.WEBGL,\n      systems,\n      renderPipes,\n      renderPipeAdaptors\n    };\n    super(systemConfig);\n  }\n}\n\nexport { WebGLRenderer };\n//# sourceMappingURL=WebGLRenderer.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\n\n\"use strict\";\nclass BindGroupSystem {\n  constructor(renderer) {\n    this._hash = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n    this._renderer.renderableGC.addManagedHash(this, \"_hash\");\n  }\n  contextChange(gpu) {\n    this._gpu = gpu;\n  }\n  getBindGroup(bindGroup, program, groupIndex) {\n    bindGroup._updateKey();\n    const gpuBindGroup = this._hash[bindGroup._key] || this._createBindGroup(bindGroup, program, groupIndex);\n    return gpuBindGroup;\n  }\n  _createBindGroup(group, program, groupIndex) {\n    const device = this._gpu.device;\n    const groupLayout = program.layout[groupIndex];\n    const entries = [];\n    const renderer = this._renderer;\n    for (const j in groupLayout) {\n      const resource = group.resources[j] ?? group.resources[groupLayout[j]];\n      let gpuResource;\n      if (resource._resourceType === \"uniformGroup\") {\n        const uniformGroup = resource;\n        renderer.ubo.updateUniformGroup(uniformGroup);\n        const buffer = uniformGroup.buffer;\n        gpuResource = {\n          buffer: renderer.buffer.getGPUBuffer(buffer),\n          offset: 0,\n          size: buffer.descriptor.size\n        };\n      } else if (resource._resourceType === \"buffer\") {\n        const buffer = resource;\n        gpuResource = {\n          buffer: renderer.buffer.getGPUBuffer(buffer),\n          offset: 0,\n          size: buffer.descriptor.size\n        };\n      } else if (resource._resourceType === \"bufferResource\") {\n        const bufferResource = resource;\n        gpuResource = {\n          buffer: renderer.buffer.getGPUBuffer(bufferResource.buffer),\n          offset: bufferResource.offset,\n          size: bufferResource.size\n        };\n      } else if (resource._resourceType === \"textureSampler\") {\n        const sampler = resource;\n        gpuResource = renderer.texture.getGpuSampler(sampler);\n      } else if (resource._resourceType === \"textureSource\") {\n        const texture = resource;\n        gpuResource = renderer.texture.getGpuSource(texture).createView({});\n      }\n      entries.push({\n        binding: groupLayout[j],\n        resource: gpuResource\n      });\n    }\n    const layout = renderer.shader.getProgramData(program).bindGroups[groupIndex];\n    const gpuBindGroup = device.createBindGroup({\n      layout,\n      entries\n    });\n    this._hash[group._key] = gpuBindGroup;\n    return gpuBindGroup;\n  }\n  destroy() {\n    for (const key of Object.keys(this._hash)) {\n      this._hash[key] = null;\n    }\n    this._hash = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nBindGroupSystem.extension = {\n  type: [\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"bindGroup\"\n};\n\nexport { BindGroupSystem };\n//# sourceMappingURL=BindGroupSystem.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { fastCopy } from '../../shared/buffer/utils/fastCopy.mjs';\n\n\"use strict\";\nclass GpuBufferSystem {\n  constructor(renderer) {\n    this._gpuBuffers = /* @__PURE__ */ Object.create(null);\n    this._managedBuffers = [];\n    renderer.renderableGC.addManagedHash(this, \"_gpuBuffers\");\n  }\n  contextChange(gpu) {\n    this._gpu = gpu;\n  }\n  getGPUBuffer(buffer) {\n    return this._gpuBuffers[buffer.uid] || this.createGPUBuffer(buffer);\n  }\n  updateBuffer(buffer) {\n    const gpuBuffer = this._gpuBuffers[buffer.uid] || this.createGPUBuffer(buffer);\n    const data = buffer.data;\n    if (buffer._updateID && data) {\n      buffer._updateID = 0;\n      this._gpu.device.queue.writeBuffer(\n        gpuBuffer,\n        0,\n        data.buffer,\n        0,\n        // round to the nearest 4 bytes\n        (buffer._updateSize || data.byteLength) + 3 & ~3\n      );\n    }\n    return gpuBuffer;\n  }\n  /** dispose all WebGL resources of all managed buffers */\n  destroyAll() {\n    for (const id in this._gpuBuffers) {\n      this._gpuBuffers[id].destroy();\n    }\n    this._gpuBuffers = {};\n  }\n  createGPUBuffer(buffer) {\n    if (!this._gpuBuffers[buffer.uid]) {\n      buffer.on(\"update\", this.updateBuffer, this);\n      buffer.on(\"change\", this.onBufferChange, this);\n      buffer.on(\"destroy\", this.onBufferDestroy, this);\n      this._managedBuffers.push(buffer);\n    }\n    const gpuBuffer = this._gpu.device.createBuffer(buffer.descriptor);\n    buffer._updateID = 0;\n    if (buffer.data) {\n      fastCopy(buffer.data.buffer, gpuBuffer.getMappedRange());\n      gpuBuffer.unmap();\n    }\n    this._gpuBuffers[buffer.uid] = gpuBuffer;\n    return gpuBuffer;\n  }\n  onBufferChange(buffer) {\n    const gpuBuffer = this._gpuBuffers[buffer.uid];\n    gpuBuffer.destroy();\n    buffer._updateID = 0;\n    this._gpuBuffers[buffer.uid] = this.createGPUBuffer(buffer);\n  }\n  /**\n   * Disposes buffer\n   * @param buffer - buffer with data\n   */\n  onBufferDestroy(buffer) {\n    this._managedBuffers.splice(this._managedBuffers.indexOf(buffer), 1);\n    this._destroyBuffer(buffer);\n  }\n  destroy() {\n    this._managedBuffers.forEach((buffer) => this._destroyBuffer(buffer));\n    this._managedBuffers = null;\n    this._gpuBuffers = null;\n  }\n  _destroyBuffer(buffer) {\n    const gpuBuffer = this._gpuBuffers[buffer.uid];\n    gpuBuffer.destroy();\n    buffer.off(\"update\", this.updateBuffer, this);\n    buffer.off(\"change\", this.onBufferChange, this);\n    buffer.off(\"destroy\", this.onBufferDestroy, this);\n    this._gpuBuffers[buffer.uid] = null;\n  }\n}\n/** @ignore */\nGpuBufferSystem.extension = {\n  type: [\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"buffer\"\n};\n\nexport { GpuBufferSystem };\n//# sourceMappingURL=GpuBufferSystem.mjs.map\n","\"use strict\";\nclass UboBatch {\n  constructor({ minUniformOffsetAlignment }) {\n    this._minUniformOffsetAlignment = 256;\n    this.byteIndex = 0;\n    this._minUniformOffsetAlignment = minUniformOffsetAlignment;\n    this.data = new Float32Array(65535);\n  }\n  clear() {\n    this.byteIndex = 0;\n  }\n  addEmptyGroup(size) {\n    if (size > this._minUniformOffsetAlignment / 4) {\n      throw new Error(`UniformBufferBatch: array is too large: ${size * 4}`);\n    }\n    const start = this.byteIndex;\n    let newSize = start + size * 4;\n    newSize = Math.ceil(newSize / this._minUniformOffsetAlignment) * this._minUniformOffsetAlignment;\n    if (newSize > this.data.length * 4) {\n      throw new Error(\"UniformBufferBatch: ubo batch got too big\");\n    }\n    this.byteIndex = newSize;\n    return start;\n  }\n  addGroup(array) {\n    const offset = this.addEmptyGroup(array.length);\n    for (let i = 0; i < array.length; i++) {\n      this.data[offset / 4 + i] = array[i];\n    }\n    return offset;\n  }\n  destroy() {\n    this.data = null;\n  }\n}\n\nexport { UboBatch };\n//# sourceMappingURL=UboBatch.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\n\n\"use strict\";\nclass GpuColorMaskSystem {\n  constructor(renderer) {\n    this._colorMaskCache = 15;\n    this._renderer = renderer;\n  }\n  setMask(colorMask) {\n    if (this._colorMaskCache === colorMask)\n      return;\n    this._colorMaskCache = colorMask;\n    this._renderer.pipeline.setColorMask(colorMask);\n  }\n  destroy() {\n    this._renderer = null;\n    this._colorMaskCache = null;\n  }\n}\n/** @ignore */\nGpuColorMaskSystem.extension = {\n  type: [\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"colorMask\"\n};\n\nexport { GpuColorMaskSystem };\n//# sourceMappingURL=GpuColorMaskSystem.mjs.map\n","import { DOMAdapter } from '../../../environment/adapter.mjs';\nimport { ExtensionType } from '../../../extensions/Extensions.mjs';\n\n\"use strict\";\nclass GpuDeviceSystem {\n  /**\n   * @param {WebGPURenderer} renderer - The renderer this System works for.\n   */\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  async init(options) {\n    if (this._initPromise)\n      return this._initPromise;\n    this._initPromise = (options.gpu ? Promise.resolve(options.gpu) : this._createDeviceAndAdaptor(options)).then((gpu) => {\n      this.gpu = gpu;\n      this._renderer.runners.contextChange.emit(this.gpu);\n    });\n    return this._initPromise;\n  }\n  /**\n   * Handle the context change event\n   * @param gpu\n   */\n  contextChange(gpu) {\n    this._renderer.gpu = gpu;\n  }\n  /**\n   * Helper class to create a WebGL Context\n   * @param {object} options - An options object that gets passed in to the canvas element containing the\n   *    context attributes\n   * @see https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/getContext\n   * @returns {WebGLRenderingContext} the WebGL context\n   */\n  async _createDeviceAndAdaptor(options) {\n    const adapter = await DOMAdapter.get().getNavigator().gpu.requestAdapter({\n      powerPreference: options.powerPreference,\n      forceFallbackAdapter: options.forceFallbackAdapter\n    });\n    const requiredFeatures = [\n      \"texture-compression-bc\",\n      \"texture-compression-astc\",\n      \"texture-compression-etc2\"\n    ].filter((feature) => adapter.features.has(feature));\n    const device = await adapter.requestDevice({\n      requiredFeatures\n    });\n    return { adapter, device };\n  }\n  destroy() {\n    this.gpu = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nGpuDeviceSystem.extension = {\n  type: [\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"device\"\n};\n/** The default options for the GpuDeviceSystem. */\nGpuDeviceSystem.defaultOptions = {\n  /**\n   * {@link WebGPUOptions.powerPreference}\n   * @default default\n   */\n  powerPreference: void 0,\n  /**\n   * Force the use of the fallback adapter\n   * @default false\n   */\n  forceFallbackAdapter: false\n};\n\nexport { GpuDeviceSystem };\n//# sourceMappingURL=GpuDeviceSystem.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\n\n\"use strict\";\nclass GpuEncoderSystem {\n  constructor(renderer) {\n    this._boundBindGroup = /* @__PURE__ */ Object.create(null);\n    this._boundVertexBuffer = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n  }\n  renderStart() {\n    this.commandFinished = new Promise((resolve) => {\n      this._resolveCommandFinished = resolve;\n    });\n    this.commandEncoder = this._renderer.gpu.device.createCommandEncoder();\n  }\n  beginRenderPass(gpuRenderTarget) {\n    this.endRenderPass();\n    this._clearCache();\n    this.renderPassEncoder = this.commandEncoder.beginRenderPass(gpuRenderTarget.descriptor);\n  }\n  endRenderPass() {\n    if (this.renderPassEncoder) {\n      this.renderPassEncoder.end();\n    }\n    this.renderPassEncoder = null;\n  }\n  setViewport(viewport) {\n    this.renderPassEncoder.setViewport(viewport.x, viewport.y, viewport.width, viewport.height, 0, 1);\n  }\n  setPipelineFromGeometryProgramAndState(geometry, program, state, topology) {\n    const pipeline = this._renderer.pipeline.getPipeline(geometry, program, state, topology);\n    this.setPipeline(pipeline);\n  }\n  setPipeline(pipeline) {\n    if (this._boundPipeline === pipeline)\n      return;\n    this._boundPipeline = pipeline;\n    this.renderPassEncoder.setPipeline(pipeline);\n  }\n  _setVertexBuffer(index, buffer) {\n    if (this._boundVertexBuffer[index] === buffer)\n      return;\n    this._boundVertexBuffer[index] = buffer;\n    this.renderPassEncoder.setVertexBuffer(index, this._renderer.buffer.updateBuffer(buffer));\n  }\n  _setIndexBuffer(buffer) {\n    if (this._boundIndexBuffer === buffer)\n      return;\n    this._boundIndexBuffer = buffer;\n    const indexFormat = buffer.data.BYTES_PER_ELEMENT === 2 ? \"uint16\" : \"uint32\";\n    this.renderPassEncoder.setIndexBuffer(this._renderer.buffer.updateBuffer(buffer), indexFormat);\n  }\n  resetBindGroup(index) {\n    this._boundBindGroup[index] = null;\n  }\n  setBindGroup(index, bindGroup, program) {\n    if (this._boundBindGroup[index] === bindGroup)\n      return;\n    this._boundBindGroup[index] = bindGroup;\n    bindGroup._touch(this._renderer.textureGC.count);\n    const gpuBindGroup = this._renderer.bindGroup.getBindGroup(bindGroup, program, index);\n    this.renderPassEncoder.setBindGroup(index, gpuBindGroup);\n  }\n  setGeometry(geometry, program) {\n    const buffersToBind = this._renderer.pipeline.getBufferNamesToBind(geometry, program);\n    for (const i in buffersToBind) {\n      this._setVertexBuffer(parseInt(i, 10), geometry.attributes[buffersToBind[i]].buffer);\n    }\n    if (geometry.indexBuffer) {\n      this._setIndexBuffer(geometry.indexBuffer);\n    }\n  }\n  _setShaderBindGroups(shader, skipSync) {\n    for (const i in shader.groups) {\n      const bindGroup = shader.groups[i];\n      if (!skipSync) {\n        this._syncBindGroup(bindGroup);\n      }\n      this.setBindGroup(i, bindGroup, shader.gpuProgram);\n    }\n  }\n  _syncBindGroup(bindGroup) {\n    for (const j in bindGroup.resources) {\n      const resource = bindGroup.resources[j];\n      if (resource.isUniformGroup) {\n        this._renderer.ubo.updateUniformGroup(resource);\n      }\n    }\n  }\n  draw(options) {\n    const { geometry, shader, state, topology, size, start, instanceCount, skipSync } = options;\n    this.setPipelineFromGeometryProgramAndState(geometry, shader.gpuProgram, state, topology);\n    this.setGeometry(geometry, shader.gpuProgram);\n    this._setShaderBindGroups(shader, skipSync);\n    if (geometry.indexBuffer) {\n      this.renderPassEncoder.drawIndexed(\n        size || geometry.indexBuffer.data.length,\n        instanceCount ?? geometry.instanceCount,\n        start || 0\n      );\n    } else {\n      this.renderPassEncoder.draw(size || geometry.getSize(), instanceCount ?? geometry.instanceCount, start || 0);\n    }\n  }\n  finishRenderPass() {\n    if (this.renderPassEncoder) {\n      this.renderPassEncoder.end();\n      this.renderPassEncoder = null;\n    }\n  }\n  postrender() {\n    this.finishRenderPass();\n    this._gpu.device.queue.submit([this.commandEncoder.finish()]);\n    this._resolveCommandFinished();\n    this.commandEncoder = null;\n  }\n  // restores a render pass if finishRenderPass was called\n  // not optimised as really used for debugging!\n  // used when we want to stop drawing and log a texture..\n  restoreRenderPass() {\n    const descriptor = this._renderer.renderTarget.adaptor.getDescriptor(\n      this._renderer.renderTarget.renderTarget,\n      false,\n      [0, 0, 0, 1]\n    );\n    this.renderPassEncoder = this.commandEncoder.beginRenderPass(descriptor);\n    const boundPipeline = this._boundPipeline;\n    const boundVertexBuffer = { ...this._boundVertexBuffer };\n    const boundIndexBuffer = this._boundIndexBuffer;\n    const boundBindGroup = { ...this._boundBindGroup };\n    this._clearCache();\n    const viewport = this._renderer.renderTarget.viewport;\n    this.renderPassEncoder.setViewport(viewport.x, viewport.y, viewport.width, viewport.height, 0, 1);\n    this.setPipeline(boundPipeline);\n    for (const i in boundVertexBuffer) {\n      this._setVertexBuffer(i, boundVertexBuffer[i]);\n    }\n    for (const i in boundBindGroup) {\n      this.setBindGroup(i, boundBindGroup[i], null);\n    }\n    this._setIndexBuffer(boundIndexBuffer);\n  }\n  _clearCache() {\n    for (let i = 0; i < 16; i++) {\n      this._boundBindGroup[i] = null;\n      this._boundVertexBuffer[i] = null;\n    }\n    this._boundIndexBuffer = null;\n    this._boundPipeline = null;\n  }\n  destroy() {\n    this._renderer = null;\n    this._gpu = null;\n    this._boundBindGroup = null;\n    this._boundVertexBuffer = null;\n    this._boundIndexBuffer = null;\n    this._boundPipeline = null;\n  }\n  contextChange(gpu) {\n    this._gpu = gpu;\n  }\n}\n/** @ignore */\nGpuEncoderSystem.extension = {\n  type: [ExtensionType.WebGPUSystem],\n  name: \"encoder\",\n  priority: 1\n};\n\nexport { GpuEncoderSystem };\n//# sourceMappingURL=GpuEncoderSystem.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\n\n\"use strict\";\nclass GpuLimitsSystem {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  contextChange() {\n    this.maxTextures = this._renderer.device.gpu.device.limits.maxSampledTexturesPerShaderStage;\n    this.maxBatchableTextures = this.maxTextures;\n  }\n  destroy() {\n  }\n}\n/** @ignore */\nGpuLimitsSystem.extension = {\n  type: [\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"limits\"\n};\n\nexport { GpuLimitsSystem };\n//# sourceMappingURL=GpuLimitsSystem.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { STENCIL_MODES } from '../shared/state/const.mjs';\n\n\"use strict\";\nclass GpuStencilSystem {\n  constructor(renderer) {\n    this._renderTargetStencilState = /* @__PURE__ */ Object.create(null);\n    this._renderer = renderer;\n    renderer.renderTarget.onRenderTargetChange.add(this);\n  }\n  onRenderTargetChange(renderTarget) {\n    let stencilState = this._renderTargetStencilState[renderTarget.uid];\n    if (!stencilState) {\n      stencilState = this._renderTargetStencilState[renderTarget.uid] = {\n        stencilMode: STENCIL_MODES.DISABLED,\n        stencilReference: 0\n      };\n    }\n    this._activeRenderTarget = renderTarget;\n    this.setStencilMode(stencilState.stencilMode, stencilState.stencilReference);\n  }\n  setStencilMode(stencilMode, stencilReference) {\n    const stencilState = this._renderTargetStencilState[this._activeRenderTarget.uid];\n    stencilState.stencilMode = stencilMode;\n    stencilState.stencilReference = stencilReference;\n    const renderer = this._renderer;\n    renderer.pipeline.setStencilMode(stencilMode);\n    renderer.encoder.renderPassEncoder.setStencilReference(stencilReference);\n  }\n  destroy() {\n    this._renderer.renderTarget.onRenderTargetChange.remove(this);\n    this._renderer = null;\n    this._activeRenderTarget = null;\n    this._renderTargetStencilState = null;\n  }\n}\n/** @ignore */\nGpuStencilSystem.extension = {\n  type: [\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"stencil\"\n};\n\nexport { GpuStencilSystem };\n//# sourceMappingURL=GpuStencilSystem.mjs.map\n","\"use strict\";\nconst WGSL_ALIGN_SIZE_DATA = {\n  i32: { align: 4, size: 4 },\n  u32: { align: 4, size: 4 },\n  f32: { align: 4, size: 4 },\n  f16: { align: 2, size: 2 },\n  \"vec2<i32>\": { align: 8, size: 8 },\n  \"vec2<u32>\": { align: 8, size: 8 },\n  \"vec2<f32>\": { align: 8, size: 8 },\n  \"vec2<f16>\": { align: 4, size: 4 },\n  \"vec3<i32>\": { align: 16, size: 12 },\n  \"vec3<u32>\": { align: 16, size: 12 },\n  \"vec3<f32>\": { align: 16, size: 12 },\n  \"vec3<f16>\": { align: 8, size: 6 },\n  \"vec4<i32>\": { align: 16, size: 16 },\n  \"vec4<u32>\": { align: 16, size: 16 },\n  \"vec4<f32>\": { align: 16, size: 16 },\n  \"vec4<f16>\": { align: 8, size: 8 },\n  \"mat2x2<f32>\": { align: 8, size: 16 },\n  \"mat2x2<f16>\": { align: 4, size: 8 },\n  \"mat3x2<f32>\": { align: 8, size: 24 },\n  \"mat3x2<f16>\": { align: 4, size: 12 },\n  \"mat4x2<f32>\": { align: 8, size: 32 },\n  \"mat4x2<f16>\": { align: 4, size: 16 },\n  \"mat2x3<f32>\": { align: 16, size: 32 },\n  \"mat2x3<f16>\": { align: 8, size: 16 },\n  \"mat3x3<f32>\": { align: 16, size: 48 },\n  \"mat3x3<f16>\": { align: 8, size: 24 },\n  \"mat4x3<f32>\": { align: 16, size: 64 },\n  \"mat4x3<f16>\": { align: 8, size: 32 },\n  \"mat2x4<f32>\": { align: 16, size: 32 },\n  \"mat2x4<f16>\": { align: 8, size: 16 },\n  \"mat3x4<f32>\": { align: 16, size: 48 },\n  \"mat3x4<f16>\": { align: 8, size: 24 },\n  \"mat4x4<f32>\": { align: 16, size: 64 },\n  \"mat4x4<f16>\": { align: 8, size: 32 }\n};\nfunction createUboElementsWGSL(uniformData) {\n  const uboElements = uniformData.map((data) => ({\n    data,\n    offset: 0,\n    size: 0\n  }));\n  let offset = 0;\n  for (let i = 0; i < uboElements.length; i++) {\n    const uboElement = uboElements[i];\n    let size = WGSL_ALIGN_SIZE_DATA[uboElement.data.type].size;\n    const align = WGSL_ALIGN_SIZE_DATA[uboElement.data.type].align;\n    if (!WGSL_ALIGN_SIZE_DATA[uboElement.data.type]) {\n      throw new Error(`[Pixi.js] WebGPU UniformBuffer: Unknown type ${uboElement.data.type}`);\n    }\n    if (uboElement.data.size > 1) {\n      size = Math.max(size, align) * uboElement.data.size;\n    }\n    offset = Math.ceil(offset / align) * align;\n    uboElement.size = size;\n    uboElement.offset = offset;\n    offset += size;\n  }\n  offset = Math.ceil(offset / 16) * 16;\n  return { uboElements, size: offset };\n}\n\nexport { WGSL_ALIGN_SIZE_DATA, createUboElementsWGSL };\n//# sourceMappingURL=createUboElementsWGSL.mjs.map\n","import { WGSL_ALIGN_SIZE_DATA } from './createUboElementsWGSL.mjs';\n\n\"use strict\";\nfunction generateArraySyncWGSL(uboElement, offsetToAdd) {\n  const { size, align } = WGSL_ALIGN_SIZE_DATA[uboElement.data.type];\n  const remainder = (align - size) / 4;\n  const data = uboElement.data.type.indexOf(\"i32\") >= 0 ? \"dataInt32\" : \"data\";\n  return `\n         v = uv.${uboElement.data.name};\n         ${offsetToAdd !== 0 ? `offset += ${offsetToAdd};` : \"\"}\n\n         arrayOffset = offset;\n\n         t = 0;\n\n         for(var i=0; i < ${uboElement.data.size * (size / 4)}; i++)\n         {\n             for(var j = 0; j < ${size / 4}; j++)\n             {\n                 ${data}[arrayOffset++] = v[t++];\n             }\n             ${remainder !== 0 ? `arrayOffset += ${remainder};` : \"\"}\n         }\n     `;\n}\n\nexport { generateArraySyncWGSL };\n//# sourceMappingURL=generateArraySyncWGSL.mjs.map\n","import { createUboSyncFunction } from '../../../shared/shader/utils/createUboSyncFunction.mjs';\nimport { uboSyncFunctionsWGSL } from '../../../shared/shader/utils/uboSyncFunctions.mjs';\nimport { generateArraySyncWGSL } from './generateArraySyncWGSL.mjs';\n\n\"use strict\";\nfunction createUboSyncFunctionWGSL(uboElements) {\n  return createUboSyncFunction(\n    uboElements,\n    \"uboWgsl\",\n    generateArraySyncWGSL,\n    uboSyncFunctionsWGSL\n  );\n}\n\nexport { createUboSyncFunctionWGSL };\n//# sourceMappingURL=createUboSyncFunctionWGSL.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { UboSystem } from '../shared/shader/UboSystem.mjs';\nimport { createUboElementsWGSL } from './shader/utils/createUboElementsWGSL.mjs';\nimport { createUboSyncFunctionWGSL } from './shader/utils/createUboSyncFunctionWGSL.mjs';\n\n\"use strict\";\nclass GpuUboSystem extends UboSystem {\n  constructor() {\n    super({\n      createUboElements: createUboElementsWGSL,\n      generateUboSync: createUboSyncFunctionWGSL\n    });\n  }\n}\n/** @ignore */\nGpuUboSystem.extension = {\n  type: [ExtensionType.WebGPUSystem],\n  name: \"ubo\"\n};\n\nexport { GpuUboSystem };\n//# sourceMappingURL=GpuUboSystem.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { Buffer } from '../shared/buffer/Buffer.mjs';\nimport { BufferResource } from '../shared/buffer/BufferResource.mjs';\nimport { BufferUsage } from '../shared/buffer/const.mjs';\nimport { UboBatch } from './buffer/UboBatch.mjs';\nimport { BindGroup } from './shader/BindGroup.mjs';\n\n\"use strict\";\nconst minUniformOffsetAlignment = 128;\nclass GpuUniformBatchPipe {\n  constructor(renderer) {\n    this._bindGroupHash = /* @__PURE__ */ Object.create(null);\n    // number of buffers..\n    this._buffers = [];\n    this._bindGroups = [];\n    this._bufferResources = [];\n    this._renderer = renderer;\n    this._renderer.renderableGC.addManagedHash(this, \"_bindGroupHash\");\n    this._batchBuffer = new UboBatch({ minUniformOffsetAlignment });\n    const totalBuffers = 256 / minUniformOffsetAlignment;\n    for (let i = 0; i < totalBuffers; i++) {\n      let usage = BufferUsage.UNIFORM | BufferUsage.COPY_DST;\n      if (i === 0)\n        usage |= BufferUsage.COPY_SRC;\n      this._buffers.push(new Buffer({\n        data: this._batchBuffer.data,\n        usage\n      }));\n    }\n  }\n  renderEnd() {\n    this._uploadBindGroups();\n    this._resetBindGroups();\n  }\n  _resetBindGroups() {\n    for (const i in this._bindGroupHash) {\n      this._bindGroupHash[i] = null;\n    }\n    this._batchBuffer.clear();\n  }\n  // just works for single bind groups for now\n  getUniformBindGroup(group, duplicate) {\n    if (!duplicate && this._bindGroupHash[group.uid]) {\n      return this._bindGroupHash[group.uid];\n    }\n    this._renderer.ubo.ensureUniformGroup(group);\n    const data = group.buffer.data;\n    const offset = this._batchBuffer.addEmptyGroup(data.length);\n    this._renderer.ubo.syncUniformGroup(group, this._batchBuffer.data, offset / 4);\n    this._bindGroupHash[group.uid] = this._getBindGroup(offset / minUniformOffsetAlignment);\n    return this._bindGroupHash[group.uid];\n  }\n  getUboResource(group) {\n    this._renderer.ubo.updateUniformGroup(group);\n    const data = group.buffer.data;\n    const offset = this._batchBuffer.addGroup(data);\n    return this._getBufferResource(offset / minUniformOffsetAlignment);\n  }\n  getArrayBindGroup(data) {\n    const offset = this._batchBuffer.addGroup(data);\n    return this._getBindGroup(offset / minUniformOffsetAlignment);\n  }\n  getArrayBufferResource(data) {\n    const offset = this._batchBuffer.addGroup(data);\n    const index = offset / minUniformOffsetAlignment;\n    return this._getBufferResource(index);\n  }\n  _getBufferResource(index) {\n    if (!this._bufferResources[index]) {\n      const buffer = this._buffers[index % 2];\n      this._bufferResources[index] = new BufferResource({\n        buffer,\n        offset: (index / 2 | 0) * 256,\n        size: minUniformOffsetAlignment\n      });\n    }\n    return this._bufferResources[index];\n  }\n  _getBindGroup(index) {\n    if (!this._bindGroups[index]) {\n      const bindGroup = new BindGroup({\n        0: this._getBufferResource(index)\n      });\n      this._bindGroups[index] = bindGroup;\n    }\n    return this._bindGroups[index];\n  }\n  _uploadBindGroups() {\n    const bufferSystem = this._renderer.buffer;\n    const firstBuffer = this._buffers[0];\n    firstBuffer.update(this._batchBuffer.byteIndex);\n    bufferSystem.updateBuffer(firstBuffer);\n    const commandEncoder = this._renderer.gpu.device.createCommandEncoder();\n    for (let i = 1; i < this._buffers.length; i++) {\n      const buffer = this._buffers[i];\n      commandEncoder.copyBufferToBuffer(\n        bufferSystem.getGPUBuffer(firstBuffer),\n        minUniformOffsetAlignment,\n        bufferSystem.getGPUBuffer(buffer),\n        0,\n        this._batchBuffer.byteIndex\n      );\n    }\n    this._renderer.gpu.device.queue.submit([commandEncoder.finish()]);\n  }\n  destroy() {\n    for (let i = 0; i < this._bindGroups.length; i++) {\n      this._bindGroups[i]?.destroy();\n    }\n    this._bindGroups = null;\n    this._bindGroupHash = null;\n    for (let i = 0; i < this._buffers.length; i++) {\n      this._buffers[i].destroy();\n    }\n    this._buffers = null;\n    for (let i = 0; i < this._bufferResources.length; i++) {\n      this._bufferResources[i].destroy();\n    }\n    this._bufferResources = null;\n    this._batchBuffer.destroy();\n    this._bindGroupHash = null;\n    this._renderer = null;\n  }\n}\n/** @ignore */\nGpuUniformBatchPipe.extension = {\n  type: [\n    ExtensionType.WebGPUPipes\n  ],\n  name: \"uniformBatch\"\n};\n\nexport { GpuUniformBatchPipe };\n//# sourceMappingURL=GpuUniformBatchPipe.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { warn } from '../../../../utils/logging/warn.mjs';\nimport { ensureAttributes } from '../../gl/shader/program/ensureAttributes.mjs';\nimport { STENCIL_MODES } from '../../shared/state/const.mjs';\nimport { createIdFromString } from '../../shared/utils/createIdFromString.mjs';\nimport { GpuStencilModesToPixi } from '../state/GpuStencilModesToPixi.mjs';\n\n\"use strict\";\nconst topologyStringToId = {\n  \"point-list\": 0,\n  \"line-list\": 1,\n  \"line-strip\": 2,\n  \"triangle-list\": 3,\n  \"triangle-strip\": 4\n};\nfunction getGraphicsStateKey(geometryLayout, shaderKey, state, blendMode, topology) {\n  return geometryLayout << 24 | shaderKey << 16 | state << 10 | blendMode << 5 | topology;\n}\nfunction getGlobalStateKey(stencilStateId, multiSampleCount, colorMask, renderTarget) {\n  return colorMask << 6 | stencilStateId << 3 | renderTarget << 1 | multiSampleCount;\n}\nclass PipelineSystem {\n  constructor(renderer) {\n    this._moduleCache = /* @__PURE__ */ Object.create(null);\n    this._bufferLayoutsCache = /* @__PURE__ */ Object.create(null);\n    this._bindingNamesCache = /* @__PURE__ */ Object.create(null);\n    this._pipeCache = /* @__PURE__ */ Object.create(null);\n    this._pipeStateCaches = /* @__PURE__ */ Object.create(null);\n    this._colorMask = 15;\n    this._multisampleCount = 1;\n    this._renderer = renderer;\n  }\n  contextChange(gpu) {\n    this._gpu = gpu;\n    this.setStencilMode(STENCIL_MODES.DISABLED);\n    this._updatePipeHash();\n  }\n  setMultisampleCount(multisampleCount) {\n    if (this._multisampleCount === multisampleCount)\n      return;\n    this._multisampleCount = multisampleCount;\n    this._updatePipeHash();\n  }\n  setRenderTarget(renderTarget) {\n    this._multisampleCount = renderTarget.msaaSamples;\n    this._depthStencilAttachment = renderTarget.descriptor.depthStencilAttachment ? 1 : 0;\n    this._updatePipeHash();\n  }\n  setColorMask(colorMask) {\n    if (this._colorMask === colorMask)\n      return;\n    this._colorMask = colorMask;\n    this._updatePipeHash();\n  }\n  setStencilMode(stencilMode) {\n    if (this._stencilMode === stencilMode)\n      return;\n    this._stencilMode = stencilMode;\n    this._stencilState = GpuStencilModesToPixi[stencilMode];\n    this._updatePipeHash();\n  }\n  setPipeline(geometry, program, state, passEncoder) {\n    const pipeline = this.getPipeline(geometry, program, state);\n    passEncoder.setPipeline(pipeline);\n  }\n  getPipeline(geometry, program, state, topology) {\n    if (!geometry._layoutKey) {\n      ensureAttributes(geometry, program.attributeData);\n      this._generateBufferKey(geometry);\n    }\n    topology || (topology = geometry.topology);\n    const key = getGraphicsStateKey(\n      geometry._layoutKey,\n      program._layoutKey,\n      state.data,\n      state._blendModeId,\n      topologyStringToId[topology]\n    );\n    if (this._pipeCache[key])\n      return this._pipeCache[key];\n    this._pipeCache[key] = this._createPipeline(geometry, program, state, topology);\n    return this._pipeCache[key];\n  }\n  _createPipeline(geometry, program, state, topology) {\n    const device = this._gpu.device;\n    const buffers = this._createVertexBufferLayouts(geometry, program);\n    const blendModes = this._renderer.state.getColorTargets(state);\n    blendModes[0].writeMask = this._stencilMode === STENCIL_MODES.RENDERING_MASK_ADD ? 0 : this._colorMask;\n    const layout = this._renderer.shader.getProgramData(program).pipeline;\n    const descriptor = {\n      // TODO later check if its helpful to create..\n      // layout,\n      vertex: {\n        module: this._getModule(program.vertex.source),\n        entryPoint: program.vertex.entryPoint,\n        // geometry..\n        buffers\n      },\n      fragment: {\n        module: this._getModule(program.fragment.source),\n        entryPoint: program.fragment.entryPoint,\n        targets: blendModes\n      },\n      primitive: {\n        topology,\n        cullMode: state.cullMode\n      },\n      layout,\n      multisample: {\n        count: this._multisampleCount\n      },\n      // depthStencil,\n      label: `PIXI Pipeline`\n    };\n    if (this._depthStencilAttachment) {\n      descriptor.depthStencil = {\n        ...this._stencilState,\n        format: \"depth24plus-stencil8\",\n        depthWriteEnabled: state.depthTest,\n        depthCompare: state.depthTest ? \"less\" : \"always\"\n      };\n    }\n    const pipeline = device.createRenderPipeline(descriptor);\n    return pipeline;\n  }\n  _getModule(code) {\n    return this._moduleCache[code] || this._createModule(code);\n  }\n  _createModule(code) {\n    const device = this._gpu.device;\n    this._moduleCache[code] = device.createShaderModule({\n      code\n    });\n    return this._moduleCache[code];\n  }\n  _generateBufferKey(geometry) {\n    const keyGen = [];\n    let index = 0;\n    const attributeKeys = Object.keys(geometry.attributes).sort();\n    for (let i = 0; i < attributeKeys.length; i++) {\n      const attribute = geometry.attributes[attributeKeys[i]];\n      keyGen[index++] = attribute.offset;\n      keyGen[index++] = attribute.format;\n      keyGen[index++] = attribute.stride;\n      keyGen[index++] = attribute.instance;\n    }\n    const stringKey = keyGen.join(\"|\");\n    geometry._layoutKey = createIdFromString(stringKey, \"geometry\");\n    return geometry._layoutKey;\n  }\n  _generateAttributeLocationsKey(program) {\n    const keyGen = [];\n    let index = 0;\n    const attributeKeys = Object.keys(program.attributeData).sort();\n    for (let i = 0; i < attributeKeys.length; i++) {\n      const attribute = program.attributeData[attributeKeys[i]];\n      keyGen[index++] = attribute.location;\n    }\n    const stringKey = keyGen.join(\"|\");\n    program._attributeLocationsKey = createIdFromString(stringKey, \"programAttributes\");\n    return program._attributeLocationsKey;\n  }\n  /**\n   * Returns a hash of buffer names mapped to bind locations.\n   * This is used to bind the correct buffer to the correct location in the shader.\n   * @param geometry - The geometry where to get the buffer names\n   * @param program - The program where to get the buffer names\n   * @returns An object of buffer names mapped to the bind location.\n   */\n  getBufferNamesToBind(geometry, program) {\n    const key = geometry._layoutKey << 16 | program._attributeLocationsKey;\n    if (this._bindingNamesCache[key])\n      return this._bindingNamesCache[key];\n    const data = this._createVertexBufferLayouts(geometry, program);\n    const bufferNamesToBind = /* @__PURE__ */ Object.create(null);\n    const attributeData = program.attributeData;\n    for (let i = 0; i < data.length; i++) {\n      const attributes = Object.values(data[i].attributes);\n      const shaderLocation = attributes[0].shaderLocation;\n      for (const j in attributeData) {\n        if (attributeData[j].location === shaderLocation) {\n          bufferNamesToBind[i] = j;\n          break;\n        }\n      }\n    }\n    this._bindingNamesCache[key] = bufferNamesToBind;\n    return bufferNamesToBind;\n  }\n  _createVertexBufferLayouts(geometry, program) {\n    if (!program._attributeLocationsKey)\n      this._generateAttributeLocationsKey(program);\n    const key = geometry._layoutKey << 16 | program._attributeLocationsKey;\n    if (this._bufferLayoutsCache[key]) {\n      return this._bufferLayoutsCache[key];\n    }\n    const vertexBuffersLayout = [];\n    geometry.buffers.forEach((buffer) => {\n      const bufferEntry = {\n        arrayStride: 0,\n        stepMode: \"vertex\",\n        attributes: []\n      };\n      const bufferEntryAttributes = bufferEntry.attributes;\n      for (const i in program.attributeData) {\n        const attribute = geometry.attributes[i];\n        if ((attribute.divisor ?? 1) !== 1) {\n          warn(`Attribute ${i} has an invalid divisor value of '${attribute.divisor}'. WebGPU only supports a divisor value of 1`);\n        }\n        if (attribute.buffer === buffer) {\n          bufferEntry.arrayStride = attribute.stride;\n          bufferEntry.stepMode = attribute.instance ? \"instance\" : \"vertex\";\n          bufferEntryAttributes.push({\n            shaderLocation: program.attributeData[i].location,\n            offset: attribute.offset,\n            format: attribute.format\n          });\n        }\n      }\n      if (bufferEntryAttributes.length) {\n        vertexBuffersLayout.push(bufferEntry);\n      }\n    });\n    this._bufferLayoutsCache[key] = vertexBuffersLayout;\n    return vertexBuffersLayout;\n  }\n  _updatePipeHash() {\n    const key = getGlobalStateKey(\n      this._stencilMode,\n      this._multisampleCount,\n      this._colorMask,\n      this._depthStencilAttachment\n    );\n    if (!this._pipeStateCaches[key]) {\n      this._pipeStateCaches[key] = /* @__PURE__ */ Object.create(null);\n    }\n    this._pipeCache = this._pipeStateCaches[key];\n  }\n  destroy() {\n    this._renderer = null;\n    this._bufferLayoutsCache = null;\n  }\n}\n/** @ignore */\nPipelineSystem.extension = {\n  type: [ExtensionType.WebGPUSystem],\n  name: \"pipeline\"\n};\n\nexport { PipelineSystem };\n//# sourceMappingURL=PipelineSystem.mjs.map\n","\"use strict\";\nclass GpuRenderTarget {\n  constructor() {\n    this.contexts = [];\n    this.msaaTextures = [];\n    this.msaaSamples = 1;\n  }\n}\n\nexport { GpuRenderTarget };\n//# sourceMappingURL=GpuRenderTarget.mjs.map\n","import { CLEAR } from '../../gl/const.mjs';\nimport { CanvasSource } from '../../shared/texture/sources/CanvasSource.mjs';\nimport { TextureSource } from '../../shared/texture/sources/TextureSource.mjs';\nimport { GpuRenderTarget } from './GpuRenderTarget.mjs';\n\n\"use strict\";\nclass GpuRenderTargetAdaptor {\n  init(renderer, renderTargetSystem) {\n    this._renderer = renderer;\n    this._renderTargetSystem = renderTargetSystem;\n  }\n  copyToTexture(sourceRenderSurfaceTexture, destinationTexture, originSrc, size, originDest) {\n    const renderer = this._renderer;\n    const baseGpuTexture = this._getGpuColorTexture(\n      sourceRenderSurfaceTexture\n    );\n    const backGpuTexture = renderer.texture.getGpuSource(\n      destinationTexture.source\n    );\n    renderer.encoder.commandEncoder.copyTextureToTexture(\n      {\n        texture: baseGpuTexture,\n        origin: originSrc\n      },\n      {\n        texture: backGpuTexture,\n        origin: originDest\n      },\n      size\n    );\n    return destinationTexture;\n  }\n  startRenderPass(renderTarget, clear = true, clearColor, viewport) {\n    const renderTargetSystem = this._renderTargetSystem;\n    const gpuRenderTarget = renderTargetSystem.getGpuRenderTarget(renderTarget);\n    const descriptor = this.getDescriptor(renderTarget, clear, clearColor);\n    gpuRenderTarget.descriptor = descriptor;\n    this._renderer.pipeline.setRenderTarget(gpuRenderTarget);\n    this._renderer.encoder.beginRenderPass(gpuRenderTarget);\n    this._renderer.encoder.setViewport(viewport);\n  }\n  finishRenderPass() {\n    this._renderer.encoder.endRenderPass();\n  }\n  /**\n   * returns the gpu texture for the first color texture in the render target\n   * mainly used by the filter manager to get copy the texture for blending\n   * @param renderTarget\n   * @returns a gpu texture\n   */\n  _getGpuColorTexture(renderTarget) {\n    const gpuRenderTarget = this._renderTargetSystem.getGpuRenderTarget(renderTarget);\n    if (gpuRenderTarget.contexts[0]) {\n      return gpuRenderTarget.contexts[0].getCurrentTexture();\n    }\n    return this._renderer.texture.getGpuSource(\n      renderTarget.colorTextures[0].source\n    );\n  }\n  getDescriptor(renderTarget, clear, clearValue) {\n    if (typeof clear === \"boolean\") {\n      clear = clear ? CLEAR.ALL : CLEAR.NONE;\n    }\n    const renderTargetSystem = this._renderTargetSystem;\n    const gpuRenderTarget = renderTargetSystem.getGpuRenderTarget(renderTarget);\n    const colorAttachments = renderTarget.colorTextures.map(\n      (texture, i) => {\n        const context = gpuRenderTarget.contexts[i];\n        let view;\n        let resolveTarget;\n        if (context) {\n          const currentTexture = context.getCurrentTexture();\n          const canvasTextureView = currentTexture.createView();\n          view = canvasTextureView;\n        } else {\n          view = this._renderer.texture.getGpuSource(texture).createView({\n            mipLevelCount: 1\n          });\n        }\n        if (gpuRenderTarget.msaaTextures[i]) {\n          resolveTarget = view;\n          view = this._renderer.texture.getTextureView(\n            gpuRenderTarget.msaaTextures[i]\n          );\n        }\n        const loadOp = clear & CLEAR.COLOR ? \"clear\" : \"load\";\n        clearValue ?? (clearValue = renderTargetSystem.defaultClearColor);\n        return {\n          view,\n          resolveTarget,\n          clearValue,\n          storeOp: \"store\",\n          loadOp\n        };\n      }\n    );\n    let depthStencilAttachment;\n    if ((renderTarget.stencil || renderTarget.depth) && !renderTarget.depthStencilTexture) {\n      renderTarget.ensureDepthStencilTexture();\n      renderTarget.depthStencilTexture.source.sampleCount = gpuRenderTarget.msaa ? 4 : 1;\n    }\n    if (renderTarget.depthStencilTexture) {\n      const stencilLoadOp = clear & CLEAR.STENCIL ? \"clear\" : \"load\";\n      const depthLoadOp = clear & CLEAR.DEPTH ? \"clear\" : \"load\";\n      depthStencilAttachment = {\n        view: this._renderer.texture.getGpuSource(renderTarget.depthStencilTexture.source).createView(),\n        stencilStoreOp: \"store\",\n        stencilLoadOp,\n        depthClearValue: 1,\n        depthLoadOp,\n        depthStoreOp: \"store\"\n      };\n    }\n    const descriptor = {\n      colorAttachments,\n      depthStencilAttachment\n    };\n    return descriptor;\n  }\n  clear(renderTarget, clear = true, clearColor, viewport) {\n    if (!clear)\n      return;\n    const { gpu, encoder } = this._renderer;\n    const device = gpu.device;\n    const standAlone = encoder.commandEncoder === null;\n    if (standAlone) {\n      const commandEncoder = device.createCommandEncoder();\n      const renderPassDescriptor = this.getDescriptor(renderTarget, clear, clearColor);\n      const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n      passEncoder.setViewport(viewport.x, viewport.y, viewport.width, viewport.height, 0, 1);\n      passEncoder.end();\n      const gpuCommands = commandEncoder.finish();\n      device.queue.submit([gpuCommands]);\n    } else {\n      this.startRenderPass(renderTarget, clear, clearColor, viewport);\n    }\n  }\n  initGpuRenderTarget(renderTarget) {\n    renderTarget.isRoot = true;\n    const gpuRenderTarget = new GpuRenderTarget();\n    renderTarget.colorTextures.forEach((colorTexture, i) => {\n      if (colorTexture instanceof CanvasSource) {\n        const context = colorTexture.resource.getContext(\n          \"webgpu\"\n        );\n        const alphaMode = colorTexture.transparent ? \"premultiplied\" : \"opaque\";\n        try {\n          context.configure({\n            device: this._renderer.gpu.device,\n            usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n            format: \"bgra8unorm\",\n            alphaMode\n          });\n        } catch (e) {\n          console.error(e);\n        }\n        gpuRenderTarget.contexts[i] = context;\n      }\n      gpuRenderTarget.msaa = colorTexture.source.antialias;\n      if (colorTexture.source.antialias) {\n        const msaaTexture = new TextureSource({\n          width: 0,\n          height: 0,\n          sampleCount: 4\n        });\n        gpuRenderTarget.msaaTextures[i] = msaaTexture;\n      }\n    });\n    if (gpuRenderTarget.msaa) {\n      gpuRenderTarget.msaaSamples = 4;\n      if (renderTarget.depthStencilTexture) {\n        renderTarget.depthStencilTexture.source.sampleCount = 4;\n      }\n    }\n    return gpuRenderTarget;\n  }\n  destroyGpuRenderTarget(gpuRenderTarget) {\n    gpuRenderTarget.contexts.forEach((context) => {\n      context.unconfigure();\n    });\n    gpuRenderTarget.msaaTextures.forEach((texture) => {\n      texture.destroy();\n    });\n    gpuRenderTarget.msaaTextures.length = 0;\n    gpuRenderTarget.contexts.length = 0;\n  }\n  ensureDepthStencilTexture(renderTarget) {\n    const gpuRenderTarget = this._renderTargetSystem.getGpuRenderTarget(renderTarget);\n    if (renderTarget.depthStencilTexture && gpuRenderTarget.msaa) {\n      renderTarget.depthStencilTexture.source.sampleCount = 4;\n    }\n  }\n  resizeGpuRenderTarget(renderTarget) {\n    const gpuRenderTarget = this._renderTargetSystem.getGpuRenderTarget(renderTarget);\n    gpuRenderTarget.width = renderTarget.width;\n    gpuRenderTarget.height = renderTarget.height;\n    if (gpuRenderTarget.msaa) {\n      renderTarget.colorTextures.forEach((colorTexture, i) => {\n        const msaaTexture = gpuRenderTarget.msaaTextures[i];\n        msaaTexture?.resize(\n          colorTexture.source.width,\n          colorTexture.source.height,\n          colorTexture.source._resolution\n        );\n      });\n    }\n  }\n}\n\nexport { GpuRenderTargetAdaptor };\n//# sourceMappingURL=GpuRenderTargetAdaptor.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { RenderTargetSystem } from '../../shared/renderTarget/RenderTargetSystem.mjs';\nimport { GpuRenderTargetAdaptor } from './GpuRenderTargetAdaptor.mjs';\n\n\"use strict\";\nclass GpuRenderTargetSystem extends RenderTargetSystem {\n  constructor(renderer) {\n    super(renderer);\n    this.adaptor = new GpuRenderTargetAdaptor();\n    this.adaptor.init(renderer, this);\n  }\n}\n/** @ignore */\nGpuRenderTargetSystem.extension = {\n  type: [ExtensionType.WebGPUSystem],\n  name: \"renderTarget\"\n};\n\nexport { GpuRenderTargetSystem };\n//# sourceMappingURL=GpuRenderTargetSystem.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\n\n\"use strict\";\nclass GpuShaderSystem {\n  constructor() {\n    this._gpuProgramData = /* @__PURE__ */ Object.create(null);\n  }\n  contextChange(gpu) {\n    this._gpu = gpu;\n  }\n  getProgramData(program) {\n    return this._gpuProgramData[program._layoutKey] || this._createGPUProgramData(program);\n  }\n  _createGPUProgramData(program) {\n    const device = this._gpu.device;\n    const bindGroups = program.gpuLayout.map((group) => device.createBindGroupLayout({ entries: group }));\n    const pipelineLayoutDesc = { bindGroupLayouts: bindGroups };\n    this._gpuProgramData[program._layoutKey] = {\n      bindGroups,\n      pipeline: device.createPipelineLayout(pipelineLayoutDesc)\n    };\n    return this._gpuProgramData[program._layoutKey];\n  }\n  destroy() {\n    this._gpu = null;\n    this._gpuProgramData = null;\n  }\n}\n/** @ignore */\nGpuShaderSystem.extension = {\n  type: [\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"shader\"\n};\n\nexport { GpuShaderSystem };\n//# sourceMappingURL=GpuShaderSystem.mjs.map\n","\"use strict\";\nconst GpuBlendModesToPixi = {};\nGpuBlendModesToPixi.normal = {\n  alpha: {\n    srcFactor: \"one\",\n    dstFactor: \"one-minus-src-alpha\",\n    operation: \"add\"\n  },\n  color: {\n    srcFactor: \"one\",\n    dstFactor: \"one-minus-src-alpha\",\n    operation: \"add\"\n  }\n};\nGpuBlendModesToPixi.add = {\n  alpha: {\n    srcFactor: \"src-alpha\",\n    dstFactor: \"one-minus-src-alpha\",\n    operation: \"add\"\n  },\n  color: {\n    srcFactor: \"one\",\n    dstFactor: \"one\",\n    operation: \"add\"\n  }\n};\nGpuBlendModesToPixi.multiply = {\n  alpha: {\n    srcFactor: \"one\",\n    dstFactor: \"one-minus-src-alpha\",\n    operation: \"add\"\n  },\n  color: {\n    srcFactor: \"dst\",\n    dstFactor: \"one-minus-src-alpha\",\n    operation: \"add\"\n  }\n};\nGpuBlendModesToPixi.screen = {\n  alpha: {\n    srcFactor: \"one\",\n    dstFactor: \"one-minus-src-alpha\",\n    operation: \"add\"\n  },\n  color: {\n    srcFactor: \"one\",\n    dstFactor: \"one-minus-src\",\n    operation: \"add\"\n  }\n};\nGpuBlendModesToPixi.overlay = {\n  alpha: {\n    srcFactor: \"one\",\n    dstFactor: \"one-minus-src-alpha\",\n    operation: \"add\"\n  },\n  color: {\n    srcFactor: \"one\",\n    dstFactor: \"one-minus-src\",\n    operation: \"add\"\n  }\n};\nGpuBlendModesToPixi.none = {\n  alpha: {\n    srcFactor: \"one\",\n    dstFactor: \"one-minus-src-alpha\",\n    operation: \"add\"\n  },\n  color: {\n    srcFactor: \"zero\",\n    dstFactor: \"zero\",\n    operation: \"add\"\n  }\n};\nGpuBlendModesToPixi[\"normal-npm\"] = {\n  alpha: {\n    srcFactor: \"one\",\n    dstFactor: \"one-minus-src-alpha\",\n    operation: \"add\"\n  },\n  color: {\n    srcFactor: \"src-alpha\",\n    dstFactor: \"one-minus-src-alpha\",\n    operation: \"add\"\n  }\n};\nGpuBlendModesToPixi[\"add-npm\"] = {\n  alpha: {\n    srcFactor: \"one\",\n    dstFactor: \"one\",\n    operation: \"add\"\n  },\n  color: {\n    srcFactor: \"src-alpha\",\n    dstFactor: \"one\",\n    operation: \"add\"\n  }\n};\nGpuBlendModesToPixi[\"screen-npm\"] = {\n  alpha: {\n    srcFactor: \"one\",\n    dstFactor: \"one-minus-src-alpha\",\n    operation: \"add\"\n  },\n  color: {\n    srcFactor: \"src-alpha\",\n    dstFactor: \"one-minus-src\",\n    operation: \"add\"\n  }\n};\nGpuBlendModesToPixi.erase = {\n  alpha: {\n    srcFactor: \"zero\",\n    dstFactor: \"one-minus-src-alpha\",\n    operation: \"add\"\n  },\n  color: {\n    srcFactor: \"zero\",\n    dstFactor: \"one-minus-src\",\n    operation: \"add\"\n  }\n};\nGpuBlendModesToPixi.min = {\n  alpha: {\n    srcFactor: \"one\",\n    dstFactor: \"one\",\n    operation: \"min\"\n  },\n  color: {\n    srcFactor: \"one\",\n    dstFactor: \"one\",\n    operation: \"min\"\n  }\n};\nGpuBlendModesToPixi.max = {\n  alpha: {\n    srcFactor: \"one\",\n    dstFactor: \"one\",\n    operation: \"max\"\n  },\n  color: {\n    srcFactor: \"one\",\n    dstFactor: \"one\",\n    operation: \"max\"\n  }\n};\n\nexport { GpuBlendModesToPixi };\n//# sourceMappingURL=GpuBlendModesToPixi.mjs.map\n","import { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { State } from '../../shared/state/State.mjs';\nimport { GpuBlendModesToPixi } from './GpuBlendModesToPixi.mjs';\n\n\"use strict\";\nclass GpuStateSystem {\n  constructor() {\n    this.defaultState = new State();\n    this.defaultState.blend = true;\n  }\n  contextChange(gpu) {\n    this.gpu = gpu;\n  }\n  /**\n   * Gets the blend mode data for the current state\n   * @param state - The state to get the blend mode from\n   */\n  getColorTargets(state) {\n    const blend = GpuBlendModesToPixi[state.blendMode] || GpuBlendModesToPixi.normal;\n    return [\n      {\n        format: \"bgra8unorm\",\n        writeMask: 0,\n        blend\n      }\n    ];\n  }\n  destroy() {\n    this.gpu = null;\n  }\n}\n/** @ignore */\nGpuStateSystem.extension = {\n  type: [\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"state\"\n};\n\nexport { GpuStateSystem };\n//# sourceMappingURL=GpuStateSystem.mjs.map\n","\"use strict\";\nconst gpuUploadBufferImageResource = {\n  type: \"image\",\n  upload(source, gpuTexture, gpu) {\n    const resource = source.resource;\n    const total = (source.pixelWidth | 0) * (source.pixelHeight | 0);\n    const bytesPerPixel = resource.byteLength / total;\n    gpu.device.queue.writeTexture(\n      { texture: gpuTexture },\n      resource,\n      {\n        offset: 0,\n        rowsPerImage: source.pixelHeight,\n        bytesPerRow: source.pixelHeight * bytesPerPixel\n      },\n      {\n        width: source.pixelWidth,\n        height: source.pixelHeight,\n        depthOrArrayLayers: 1\n      }\n    );\n  }\n};\n\nexport { gpuUploadBufferImageResource };\n//# sourceMappingURL=gpuUploadBufferImageResource.mjs.map\n","\"use strict\";\nconst blockDataMap = {\n  \"bc1-rgba-unorm\": { blockBytes: 8, blockWidth: 4, blockHeight: 4 },\n  \"bc2-rgba-unorm\": { blockBytes: 16, blockWidth: 4, blockHeight: 4 },\n  \"bc3-rgba-unorm\": { blockBytes: 16, blockWidth: 4, blockHeight: 4 },\n  \"bc7-rgba-unorm\": { blockBytes: 16, blockWidth: 4, blockHeight: 4 },\n  \"etc1-rgb-unorm\": { blockBytes: 8, blockWidth: 4, blockHeight: 4 },\n  \"etc2-rgba8unorm\": { blockBytes: 16, blockWidth: 4, blockHeight: 4 },\n  \"astc-4x4-unorm\": { blockBytes: 16, blockWidth: 4, blockHeight: 4 }\n};\nconst defaultBlockData = { blockBytes: 4, blockWidth: 1, blockHeight: 1 };\nconst gpuUploadCompressedTextureResource = {\n  type: \"compressed\",\n  upload(source, gpuTexture, gpu) {\n    let mipWidth = source.pixelWidth;\n    let mipHeight = source.pixelHeight;\n    const blockData = blockDataMap[source.format] || defaultBlockData;\n    for (let i = 0; i < source.resource.length; i++) {\n      const levelBuffer = source.resource[i];\n      const bytesPerRow = Math.ceil(mipWidth / blockData.blockWidth) * blockData.blockBytes;\n      gpu.device.queue.writeTexture(\n        {\n          texture: gpuTexture,\n          mipLevel: i\n        },\n        levelBuffer,\n        {\n          offset: 0,\n          bytesPerRow\n        },\n        {\n          width: Math.ceil(mipWidth / blockData.blockWidth) * blockData.blockWidth,\n          height: Math.ceil(mipHeight / blockData.blockHeight) * blockData.blockHeight,\n          depthOrArrayLayers: 1\n        }\n      );\n      mipWidth = Math.max(mipWidth >> 1, 1);\n      mipHeight = Math.max(mipHeight >> 1, 1);\n    }\n  }\n};\n\nexport { blockDataMap, gpuUploadCompressedTextureResource };\n//# sourceMappingURL=gpuUploadCompressedTextureResource.mjs.map\n","import { DOMAdapter } from '../../../../../environment/adapter.mjs';\nimport { warn } from '../../../../../utils/logging/warn.mjs';\n\n\"use strict\";\nconst gpuUploadImageResource = {\n  type: \"image\",\n  upload(source, gpuTexture, gpu) {\n    const resource = source.resource;\n    if (!resource)\n      return;\n    if (globalThis.HTMLImageElement && resource instanceof HTMLImageElement) {\n      const canvas = DOMAdapter.get().createCanvas(resource.width, resource.height);\n      const context = canvas.getContext(\"2d\");\n      context.drawImage(resource, 0, 0, resource.width, resource.height);\n      source.resource = canvas;\n      warn(\"ImageSource: Image element passed, converting to canvas and replacing resource.\");\n    }\n    const width = Math.min(gpuTexture.width, source.resourceWidth || source.pixelWidth);\n    const height = Math.min(gpuTexture.height, source.resourceHeight || source.pixelHeight);\n    const premultipliedAlpha = source.alphaMode === \"premultiply-alpha-on-upload\";\n    gpu.device.queue.copyExternalImageToTexture(\n      { source: resource },\n      { texture: gpuTexture, premultipliedAlpha },\n      {\n        width,\n        height\n      }\n    );\n  }\n};\n\nexport { gpuUploadImageResource };\n//# sourceMappingURL=gpuUploadImageSource.mjs.map\n","import { gpuUploadImageResource } from './gpuUploadImageSource.mjs';\n\n\"use strict\";\nconst gpuUploadVideoResource = {\n  type: \"video\",\n  upload(source, gpuTexture, gpu) {\n    gpuUploadImageResource.upload(source, gpuTexture, gpu);\n  }\n};\n\nexport { gpuUploadVideoResource };\n//# sourceMappingURL=gpuUploadVideoSource.mjs.map\n","\"use strict\";\nclass GpuMipmapGenerator {\n  constructor(device) {\n    this.device = device;\n    this.sampler = device.createSampler({ minFilter: \"linear\" });\n    this.pipelines = {};\n  }\n  _getMipmapPipeline(format) {\n    let pipeline = this.pipelines[format];\n    if (!pipeline) {\n      if (!this.mipmapShaderModule) {\n        this.mipmapShaderModule = this.device.createShaderModule({\n          code: (\n            /* wgsl */\n            `\n                        var<private> pos : array<vec2<f32>, 3> = array<vec2<f32>, 3>(\n                        vec2<f32>(-1.0, -1.0), vec2<f32>(-1.0, 3.0), vec2<f32>(3.0, -1.0));\n\n                        struct VertexOutput {\n                        @builtin(position) position : vec4<f32>,\n                        @location(0) texCoord : vec2<f32>,\n                        };\n\n                        @vertex\n                        fn vertexMain(@builtin(vertex_index) vertexIndex : u32) -> VertexOutput {\n                        var output : VertexOutput;\n                        output.texCoord = pos[vertexIndex] * vec2<f32>(0.5, -0.5) + vec2<f32>(0.5);\n                        output.position = vec4<f32>(pos[vertexIndex], 0.0, 1.0);\n                        return output;\n                        }\n\n                        @group(0) @binding(0) var imgSampler : sampler;\n                        @group(0) @binding(1) var img : texture_2d<f32>;\n\n                        @fragment\n                        fn fragmentMain(@location(0) texCoord : vec2<f32>) -> @location(0) vec4<f32> {\n                        return textureSample(img, imgSampler, texCoord);\n                        }\n                    `\n          )\n        });\n      }\n      pipeline = this.device.createRenderPipeline({\n        layout: \"auto\",\n        vertex: {\n          module: this.mipmapShaderModule,\n          entryPoint: \"vertexMain\"\n        },\n        fragment: {\n          module: this.mipmapShaderModule,\n          entryPoint: \"fragmentMain\",\n          targets: [{ format }]\n        }\n      });\n      this.pipelines[format] = pipeline;\n    }\n    return pipeline;\n  }\n  /**\n   * Generates mipmaps for the given GPUTexture from the data in level 0.\n   * @param {module:External.GPUTexture} texture - Texture to generate mipmaps for.\n   * @returns {module:External.GPUTexture} - The originally passed texture\n   */\n  generateMipmap(texture) {\n    const pipeline = this._getMipmapPipeline(texture.format);\n    if (texture.dimension === \"3d\" || texture.dimension === \"1d\") {\n      throw new Error(\"Generating mipmaps for non-2d textures is currently unsupported!\");\n    }\n    let mipTexture = texture;\n    const arrayLayerCount = texture.depthOrArrayLayers || 1;\n    const renderToSource = texture.usage & GPUTextureUsage.RENDER_ATTACHMENT;\n    if (!renderToSource) {\n      const mipTextureDescriptor = {\n        size: {\n          width: Math.ceil(texture.width / 2),\n          height: Math.ceil(texture.height / 2),\n          depthOrArrayLayers: arrayLayerCount\n        },\n        format: texture.format,\n        usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n        mipLevelCount: texture.mipLevelCount - 1\n      };\n      mipTexture = this.device.createTexture(mipTextureDescriptor);\n    }\n    const commandEncoder = this.device.createCommandEncoder({});\n    const bindGroupLayout = pipeline.getBindGroupLayout(0);\n    for (let arrayLayer = 0; arrayLayer < arrayLayerCount; ++arrayLayer) {\n      let srcView = texture.createView({\n        baseMipLevel: 0,\n        mipLevelCount: 1,\n        dimension: \"2d\",\n        baseArrayLayer: arrayLayer,\n        arrayLayerCount: 1\n      });\n      let dstMipLevel = renderToSource ? 1 : 0;\n      for (let i = 1; i < texture.mipLevelCount; ++i) {\n        const dstView = mipTexture.createView({\n          baseMipLevel: dstMipLevel++,\n          mipLevelCount: 1,\n          dimension: \"2d\",\n          baseArrayLayer: arrayLayer,\n          arrayLayerCount: 1\n        });\n        const passEncoder = commandEncoder.beginRenderPass({\n          colorAttachments: [{\n            view: dstView,\n            storeOp: \"store\",\n            loadOp: \"clear\",\n            clearValue: { r: 0, g: 0, b: 0, a: 0 }\n          }]\n        });\n        const bindGroup = this.device.createBindGroup({\n          layout: bindGroupLayout,\n          entries: [{\n            binding: 0,\n            resource: this.sampler\n          }, {\n            binding: 1,\n            resource: srcView\n          }]\n        });\n        passEncoder.setPipeline(pipeline);\n        passEncoder.setBindGroup(0, bindGroup);\n        passEncoder.draw(3, 1, 0, 0);\n        passEncoder.end();\n        srcView = dstView;\n      }\n    }\n    if (!renderToSource) {\n      const mipLevelSize = {\n        width: Math.ceil(texture.width / 2),\n        height: Math.ceil(texture.height / 2),\n        depthOrArrayLayers: arrayLayerCount\n      };\n      for (let i = 1; i < texture.mipLevelCount; ++i) {\n        commandEncoder.copyTextureToTexture({\n          texture: mipTexture,\n          mipLevel: i - 1\n        }, {\n          texture,\n          mipLevel: i\n        }, mipLevelSize);\n        mipLevelSize.width = Math.ceil(mipLevelSize.width / 2);\n        mipLevelSize.height = Math.ceil(mipLevelSize.height / 2);\n      }\n    }\n    this.device.queue.submit([commandEncoder.finish()]);\n    if (!renderToSource) {\n      mipTexture.destroy();\n    }\n    return texture;\n  }\n}\n\nexport { GpuMipmapGenerator };\n//# sourceMappingURL=GpuMipmapGenerator.mjs.map\n","import { DOMAdapter } from '../../../../environment/adapter.mjs';\nimport { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { UniformGroup } from '../../shared/shader/UniformGroup.mjs';\nimport { CanvasPool } from '../../shared/texture/CanvasPool.mjs';\nimport { BindGroup } from '../shader/BindGroup.mjs';\nimport { gpuUploadBufferImageResource } from './uploaders/gpuUploadBufferImageResource.mjs';\nimport { gpuUploadCompressedTextureResource, blockDataMap } from './uploaders/gpuUploadCompressedTextureResource.mjs';\nimport { gpuUploadImageResource } from './uploaders/gpuUploadImageSource.mjs';\nimport { gpuUploadVideoResource } from './uploaders/gpuUploadVideoSource.mjs';\nimport { GpuMipmapGenerator } from './utils/GpuMipmapGenerator.mjs';\n\n\"use strict\";\nclass GpuTextureSystem {\n  constructor(renderer) {\n    this.managedTextures = [];\n    this._gpuSources = /* @__PURE__ */ Object.create(null);\n    this._gpuSamplers = /* @__PURE__ */ Object.create(null);\n    this._bindGroupHash = /* @__PURE__ */ Object.create(null);\n    this._textureViewHash = /* @__PURE__ */ Object.create(null);\n    this._uploads = {\n      image: gpuUploadImageResource,\n      buffer: gpuUploadBufferImageResource,\n      video: gpuUploadVideoResource,\n      compressed: gpuUploadCompressedTextureResource\n    };\n    this._renderer = renderer;\n    renderer.renderableGC.addManagedHash(this, \"_gpuSources\");\n    renderer.renderableGC.addManagedHash(this, \"_gpuSamplers\");\n    renderer.renderableGC.addManagedHash(this, \"_bindGroupHash\");\n    renderer.renderableGC.addManagedHash(this, \"_textureViewHash\");\n  }\n  contextChange(gpu) {\n    this._gpu = gpu;\n  }\n  /**\n   * Initializes a texture source, if it has already been initialized nothing will happen.\n   * @param source - The texture source to initialize.\n   * @returns The initialized texture source.\n   */\n  initSource(source) {\n    if (this._gpuSources[source.uid]) {\n      return this._gpuSources[source.uid];\n    }\n    return this._initSource(source);\n  }\n  _initSource(source) {\n    if (source.autoGenerateMipmaps) {\n      const biggestDimension = Math.max(source.pixelWidth, source.pixelHeight);\n      source.mipLevelCount = Math.floor(Math.log2(biggestDimension)) + 1;\n    }\n    let usage = GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST;\n    if (source.uploadMethodId !== \"compressed\") {\n      usage |= GPUTextureUsage.RENDER_ATTACHMENT;\n      usage |= GPUTextureUsage.COPY_SRC;\n    }\n    const blockData = blockDataMap[source.format] || { blockBytes: 4, blockWidth: 1, blockHeight: 1 };\n    const width = Math.ceil(source.pixelWidth / blockData.blockWidth) * blockData.blockWidth;\n    const height = Math.ceil(source.pixelHeight / blockData.blockHeight) * blockData.blockHeight;\n    const textureDescriptor = {\n      label: source.label,\n      size: { width, height },\n      format: source.format,\n      sampleCount: source.sampleCount,\n      mipLevelCount: source.mipLevelCount,\n      dimension: source.dimension,\n      usage\n    };\n    const gpuTexture = this._gpuSources[source.uid] = this._gpu.device.createTexture(textureDescriptor);\n    if (!this.managedTextures.includes(source)) {\n      source.on(\"update\", this.onSourceUpdate, this);\n      source.on(\"resize\", this.onSourceResize, this);\n      source.on(\"destroy\", this.onSourceDestroy, this);\n      source.on(\"unload\", this.onSourceUnload, this);\n      source.on(\"updateMipmaps\", this.onUpdateMipmaps, this);\n      this.managedTextures.push(source);\n    }\n    this.onSourceUpdate(source);\n    return gpuTexture;\n  }\n  onSourceUpdate(source) {\n    const gpuTexture = this.getGpuSource(source);\n    if (!gpuTexture)\n      return;\n    if (this._uploads[source.uploadMethodId]) {\n      this._uploads[source.uploadMethodId].upload(source, gpuTexture, this._gpu);\n    }\n    if (source.autoGenerateMipmaps && source.mipLevelCount > 1) {\n      this.onUpdateMipmaps(source);\n    }\n  }\n  onSourceUnload(source) {\n    const gpuTexture = this._gpuSources[source.uid];\n    if (gpuTexture) {\n      this._gpuSources[source.uid] = null;\n      gpuTexture.destroy();\n    }\n  }\n  onUpdateMipmaps(source) {\n    if (!this._mipmapGenerator) {\n      this._mipmapGenerator = new GpuMipmapGenerator(this._gpu.device);\n    }\n    const gpuTexture = this.getGpuSource(source);\n    this._mipmapGenerator.generateMipmap(gpuTexture);\n  }\n  onSourceDestroy(source) {\n    source.off(\"update\", this.onSourceUpdate, this);\n    source.off(\"unload\", this.onSourceUnload, this);\n    source.off(\"destroy\", this.onSourceDestroy, this);\n    source.off(\"resize\", this.onSourceResize, this);\n    source.off(\"updateMipmaps\", this.onUpdateMipmaps, this);\n    this.managedTextures.splice(this.managedTextures.indexOf(source), 1);\n    this.onSourceUnload(source);\n  }\n  onSourceResize(source) {\n    const gpuTexture = this._gpuSources[source.uid];\n    if (!gpuTexture) {\n      this.initSource(source);\n    } else if (gpuTexture.width !== source.pixelWidth || gpuTexture.height !== source.pixelHeight) {\n      this._textureViewHash[source.uid] = null;\n      this._bindGroupHash[source.uid] = null;\n      this.onSourceUnload(source);\n      this.initSource(source);\n    }\n  }\n  _initSampler(sampler) {\n    this._gpuSamplers[sampler._resourceId] = this._gpu.device.createSampler(sampler);\n    return this._gpuSamplers[sampler._resourceId];\n  }\n  getGpuSampler(sampler) {\n    return this._gpuSamplers[sampler._resourceId] || this._initSampler(sampler);\n  }\n  getGpuSource(source) {\n    return this._gpuSources[source.uid] || this.initSource(source);\n  }\n  /**\n   * this returns s bind group for a specific texture, the bind group contains\n   * - the texture source\n   * - the texture style\n   * - the texture matrix\n   * This is cached so the bind group should only be created once per texture\n   * @param texture - the texture you want the bindgroup for\n   * @returns the bind group for the texture\n   */\n  getTextureBindGroup(texture) {\n    return this._bindGroupHash[texture.uid] ?? this._createTextureBindGroup(texture);\n  }\n  _createTextureBindGroup(texture) {\n    const source = texture.source;\n    this._bindGroupHash[texture.uid] = new BindGroup({\n      0: source,\n      1: source.style,\n      2: new UniformGroup({\n        uTextureMatrix: { type: \"mat3x3<f32>\", value: texture.textureMatrix.mapCoord }\n      })\n    });\n    return this._bindGroupHash[texture.uid];\n  }\n  getTextureView(texture) {\n    const source = texture.source;\n    return this._textureViewHash[source.uid] ?? this._createTextureView(source);\n  }\n  _createTextureView(texture) {\n    this._textureViewHash[texture.uid] = this.getGpuSource(texture).createView();\n    return this._textureViewHash[texture.uid];\n  }\n  generateCanvas(texture) {\n    const renderer = this._renderer;\n    const commandEncoder = renderer.gpu.device.createCommandEncoder();\n    const canvas = DOMAdapter.get().createCanvas();\n    canvas.width = texture.source.pixelWidth;\n    canvas.height = texture.source.pixelHeight;\n    const context = canvas.getContext(\"webgpu\");\n    context.configure({\n      device: renderer.gpu.device,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC,\n      format: DOMAdapter.get().getNavigator().gpu.getPreferredCanvasFormat(),\n      alphaMode: \"premultiplied\"\n    });\n    commandEncoder.copyTextureToTexture({\n      texture: renderer.texture.getGpuSource(texture.source),\n      origin: {\n        x: 0,\n        y: 0\n      }\n    }, {\n      texture: context.getCurrentTexture()\n    }, {\n      width: canvas.width,\n      height: canvas.height\n    });\n    renderer.gpu.device.queue.submit([commandEncoder.finish()]);\n    return canvas;\n  }\n  getPixels(texture) {\n    const webGPUCanvas = this.generateCanvas(texture);\n    const canvasAndContext = CanvasPool.getOptimalCanvasAndContext(webGPUCanvas.width, webGPUCanvas.height);\n    const context = canvasAndContext.context;\n    context.drawImage(webGPUCanvas, 0, 0);\n    const { width, height } = webGPUCanvas;\n    const imageData = context.getImageData(0, 0, width, height);\n    const pixels = new Uint8ClampedArray(imageData.data.buffer);\n    CanvasPool.returnCanvasAndContext(canvasAndContext);\n    return { pixels, width, height };\n  }\n  destroy() {\n    this.managedTextures.slice().forEach((source) => this.onSourceDestroy(source));\n    this.managedTextures = null;\n    for (const k of Object.keys(this._bindGroupHash)) {\n      const key = Number(k);\n      const bindGroup = this._bindGroupHash[key];\n      bindGroup?.destroy();\n      this._bindGroupHash[key] = null;\n    }\n    this._gpu = null;\n    this._mipmapGenerator = null;\n    this._gpuSources = null;\n    this._bindGroupHash = null;\n    this._textureViewHash = null;\n    this._gpuSamplers = null;\n  }\n}\n/** @ignore */\nGpuTextureSystem.extension = {\n  type: [\n    ExtensionType.WebGPUSystem\n  ],\n  name: \"texture\"\n};\n\nexport { GpuTextureSystem };\n//# sourceMappingURL=GpuTextureSystem.mjs.map\n","import { extensions, ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { GpuGraphicsAdaptor } from '../../../scene/graphics/gpu/GpuGraphicsAdaptor.mjs';\nimport { GpuMeshAdapter } from '../../../scene/mesh/gpu/GpuMeshAdapter.mjs';\nimport { GpuBatchAdaptor } from '../../batcher/gpu/GpuBatchAdaptor.mjs';\nimport { AbstractRenderer } from '../shared/system/AbstractRenderer.mjs';\nimport { SharedSystems, SharedRenderPipes } from '../shared/system/SharedSystems.mjs';\nimport { RendererType } from '../types.mjs';\nimport { BindGroupSystem } from './BindGroupSystem.mjs';\nimport { GpuBufferSystem } from './buffer/GpuBufferSystem.mjs';\nimport { GpuColorMaskSystem } from './GpuColorMaskSystem.mjs';\nimport { GpuDeviceSystem } from './GpuDeviceSystem.mjs';\nimport { GpuEncoderSystem } from './GpuEncoderSystem.mjs';\nimport { GpuLimitsSystem } from './GpuLimitsSystem.mjs';\nimport { GpuStencilSystem } from './GpuStencilSystem.mjs';\nimport { GpuUboSystem } from './GpuUboSystem.mjs';\nimport { GpuUniformBatchPipe } from './GpuUniformBatchPipe.mjs';\nimport { PipelineSystem } from './pipeline/PipelineSystem.mjs';\nimport { GpuRenderTargetSystem } from './renderTarget/GpuRenderTargetSystem.mjs';\nimport { GpuShaderSystem } from './shader/GpuShaderSystem.mjs';\nimport { GpuStateSystem } from './state/GpuStateSystem.mjs';\nimport { GpuTextureSystem } from './texture/GpuTextureSystem.mjs';\n\n\"use strict\";\nconst DefaultWebGPUSystems = [\n  ...SharedSystems,\n  GpuUboSystem,\n  GpuEncoderSystem,\n  GpuDeviceSystem,\n  GpuLimitsSystem,\n  GpuBufferSystem,\n  GpuTextureSystem,\n  GpuRenderTargetSystem,\n  GpuShaderSystem,\n  GpuStateSystem,\n  PipelineSystem,\n  GpuColorMaskSystem,\n  GpuStencilSystem,\n  BindGroupSystem\n];\nconst DefaultWebGPUPipes = [...SharedRenderPipes, GpuUniformBatchPipe];\nconst DefaultWebGPUAdapters = [GpuBatchAdaptor, GpuMeshAdapter, GpuGraphicsAdaptor];\nconst systems = [];\nconst renderPipes = [];\nconst renderPipeAdaptors = [];\nextensions.handleByNamedList(ExtensionType.WebGPUSystem, systems);\nextensions.handleByNamedList(ExtensionType.WebGPUPipes, renderPipes);\nextensions.handleByNamedList(ExtensionType.WebGPUPipesAdaptor, renderPipeAdaptors);\nextensions.add(...DefaultWebGPUSystems, ...DefaultWebGPUPipes, ...DefaultWebGPUAdapters);\nclass WebGPURenderer extends AbstractRenderer {\n  constructor() {\n    const systemConfig = {\n      name: \"webgpu\",\n      type: RendererType.WEBGPU,\n      systems,\n      renderPipes,\n      renderPipeAdaptors\n    };\n    super(systemConfig);\n  }\n}\n\nexport { WebGPURenderer };\n//# sourceMappingURL=WebGPURenderer.mjs.map\n"],"file":"assets/pixi-renderer-DLoYYMz9.js"}