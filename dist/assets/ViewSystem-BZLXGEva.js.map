{"version":3,"file":"ViewSystem-BZLXGEva.js","sources":["../../node_modules/pixi.js/lib/rendering/renderers/shared/texture/utils/getCanvasTexture.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/renderTarget/RenderTarget.mjs","../../node_modules/pixi.js/lib/rendering/renderers/shared/view/ViewSystem.mjs"],"sourcesContent":["import { GlobalResourceRegistry } from '../../../../../utils/pool/GlobalResourceRegistry.mjs';\nimport { CanvasSource } from '../sources/CanvasSource.mjs';\nimport { Texture } from '../Texture.mjs';\n\n\"use strict\";\nconst canvasCache = /* @__PURE__ */ new Map();\nGlobalResourceRegistry.register(canvasCache);\nfunction getCanvasTexture(canvas, options) {\n  if (!canvasCache.has(canvas)) {\n    const texture = new Texture({\n      source: new CanvasSource({\n        resource: canvas,\n        ...options\n      })\n    });\n    const onDestroy = () => {\n      if (canvasCache.get(canvas) === texture) {\n        canvasCache.delete(canvas);\n      }\n    };\n    texture.once(\"destroy\", onDestroy);\n    texture.source.once(\"destroy\", onDestroy);\n    canvasCache.set(canvas, texture);\n  }\n  return canvasCache.get(canvas);\n}\nfunction hasCachedCanvasTexture(canvas) {\n  return canvasCache.has(canvas);\n}\n\nexport { getCanvasTexture, hasCachedCanvasTexture };\n//# sourceMappingURL=getCanvasTexture.mjs.map\n","import { uid } from '../../../../utils/data/uid.mjs';\nimport { TextureSource } from '../texture/sources/TextureSource.mjs';\nimport { Texture } from '../texture/Texture.mjs';\n\n\"use strict\";\nconst _RenderTarget = class _RenderTarget {\n  /**\n   * @param [descriptor] - Options for creating a render target.\n   */\n  constructor(descriptor = {}) {\n    /** unique id for this render target */\n    this.uid = uid(\"renderTarget\");\n    /**\n     * An array of textures that can be written to by the GPU - mostly this has one texture in Pixi, but you could\n     * write to multiple if required! (eg deferred lighting)\n     */\n    this.colorTextures = [];\n    this.dirtyId = 0;\n    this.isRoot = false;\n    this._size = new Float32Array(2);\n    /** if true, then when the render target is destroyed, it will destroy all the textures that were created for it. */\n    this._managedColorTextures = false;\n    descriptor = { ..._RenderTarget.defaultOptions, ...descriptor };\n    this.stencil = descriptor.stencil;\n    this.depth = descriptor.depth;\n    this.isRoot = descriptor.isRoot;\n    if (typeof descriptor.colorTextures === \"number\") {\n      this._managedColorTextures = true;\n      for (let i = 0; i < descriptor.colorTextures; i++) {\n        this.colorTextures.push(\n          new TextureSource({\n            width: descriptor.width,\n            height: descriptor.height,\n            resolution: descriptor.resolution,\n            antialias: descriptor.antialias\n          })\n        );\n      }\n    } else {\n      this.colorTextures = [...descriptor.colorTextures.map((texture) => texture.source)];\n      const colorSource = this.colorTexture.source;\n      this.resize(colorSource.width, colorSource.height, colorSource._resolution);\n    }\n    this.colorTexture.source.on(\"resize\", this.onSourceResize, this);\n    if (descriptor.depthStencilTexture || this.stencil) {\n      if (descriptor.depthStencilTexture instanceof Texture || descriptor.depthStencilTexture instanceof TextureSource) {\n        this.depthStencilTexture = descriptor.depthStencilTexture.source;\n      } else {\n        this.ensureDepthStencilTexture();\n      }\n    }\n  }\n  get size() {\n    const _size = this._size;\n    _size[0] = this.pixelWidth;\n    _size[1] = this.pixelHeight;\n    return _size;\n  }\n  get width() {\n    return this.colorTexture.source.width;\n  }\n  get height() {\n    return this.colorTexture.source.height;\n  }\n  get pixelWidth() {\n    return this.colorTexture.source.pixelWidth;\n  }\n  get pixelHeight() {\n    return this.colorTexture.source.pixelHeight;\n  }\n  get resolution() {\n    return this.colorTexture.source._resolution;\n  }\n  get colorTexture() {\n    return this.colorTextures[0];\n  }\n  onSourceResize(source) {\n    this.resize(source.width, source.height, source._resolution, true);\n  }\n  /**\n   * This will ensure a depthStencil texture is created for this render target.\n   * Most likely called by the mask system to make sure we have stencil buffer added.\n   * @internal\n   */\n  ensureDepthStencilTexture() {\n    if (!this.depthStencilTexture) {\n      this.depthStencilTexture = new TextureSource({\n        width: this.width,\n        height: this.height,\n        resolution: this.resolution,\n        format: \"depth24plus-stencil8\",\n        autoGenerateMipmaps: false,\n        antialias: false,\n        mipLevelCount: 1\n        // sampleCount: handled by the render target system..\n      });\n    }\n  }\n  resize(width, height, resolution = this.resolution, skipColorTexture = false) {\n    this.dirtyId++;\n    this.colorTextures.forEach((colorTexture, i) => {\n      if (skipColorTexture && i === 0)\n        return;\n      colorTexture.source.resize(width, height, resolution);\n    });\n    if (this.depthStencilTexture) {\n      this.depthStencilTexture.source.resize(width, height, resolution);\n    }\n  }\n  destroy() {\n    this.colorTexture.source.off(\"resize\", this.onSourceResize, this);\n    if (this._managedColorTextures) {\n      this.colorTextures.forEach((texture) => {\n        texture.destroy();\n      });\n    }\n    if (this.depthStencilTexture) {\n      this.depthStencilTexture.destroy();\n      delete this.depthStencilTexture;\n    }\n  }\n};\n/** The default options for a render target */\n_RenderTarget.defaultOptions = {\n  /** the width of the RenderTarget */\n  width: 0,\n  /** the height of the RenderTarget */\n  height: 0,\n  /** the resolution of the RenderTarget */\n  resolution: 1,\n  /** an array of textures, or a number indicating how many color textures there should be */\n  colorTextures: 1,\n  /** should this render target have a stencil buffer? */\n  stencil: false,\n  /** should this render target have a depth buffer? */\n  depth: false,\n  /** should this render target be antialiased? */\n  antialias: false,\n  // save on perf by default!\n  /** is this a root element, true if this is gl context owners render target */\n  isRoot: false\n};\nlet RenderTarget = _RenderTarget;\n\nexport { RenderTarget };\n//# sourceMappingURL=RenderTarget.mjs.map\n","import { DOMAdapter } from '../../../../environment/adapter.mjs';\nimport { ExtensionType } from '../../../../extensions/Extensions.mjs';\nimport { Rectangle } from '../../../../maths/shapes/Rectangle.mjs';\nimport { deprecation, v8_0_0 } from '../../../../utils/logging/deprecation.mjs';\nimport { RenderTarget } from '../renderTarget/RenderTarget.mjs';\nimport { getCanvasTexture } from '../texture/utils/getCanvasTexture.mjs';\n\n\"use strict\";\nconst _ViewSystem = class _ViewSystem {\n  /**\n   * Whether CSS dimensions of canvas view should be resized to screen dimensions automatically.\n   * This is only supported for HTMLCanvasElement and will be ignored if the canvas is an OffscreenCanvas.\n   * @type {boolean}\n   */\n  get autoDensity() {\n    return this.texture.source.autoDensity;\n  }\n  set autoDensity(value) {\n    this.texture.source.autoDensity = value;\n  }\n  /** The resolution / device pixel ratio of the renderer. */\n  get resolution() {\n    return this.texture.source._resolution;\n  }\n  set resolution(value) {\n    this.texture.source.resize(\n      this.texture.source.width,\n      this.texture.source.height,\n      value\n    );\n  }\n  /**\n   * initiates the view system\n   * @param options - the options for the view\n   */\n  init(options) {\n    options = {\n      ..._ViewSystem.defaultOptions,\n      ...options\n    };\n    if (options.view) {\n      deprecation(v8_0_0, \"ViewSystem.view has been renamed to ViewSystem.canvas\");\n      options.canvas = options.view;\n    }\n    this.screen = new Rectangle(0, 0, options.width, options.height);\n    this.canvas = options.canvas || DOMAdapter.get().createCanvas();\n    this.antialias = !!options.antialias;\n    this.texture = getCanvasTexture(this.canvas, options);\n    this.renderTarget = new RenderTarget({\n      colorTextures: [this.texture],\n      depth: !!options.depth,\n      isRoot: true\n    });\n    this.texture.source.transparent = options.backgroundAlpha < 1;\n    this.resolution = options.resolution;\n  }\n  /**\n   * Resizes the screen and canvas to the specified dimensions.\n   * @param desiredScreenWidth - The new width of the screen.\n   * @param desiredScreenHeight - The new height of the screen.\n   * @param resolution\n   */\n  resize(desiredScreenWidth, desiredScreenHeight, resolution) {\n    this.texture.source.resize(desiredScreenWidth, desiredScreenHeight, resolution);\n    this.screen.width = this.texture.frame.width;\n    this.screen.height = this.texture.frame.height;\n  }\n  /**\n   * Destroys this System and optionally removes the canvas from the dom.\n   * @param {options | false} options - The options for destroying the view, or \"false\".\n   * @example\n   * viewSystem.destroy();\n   * viewSystem.destroy(true);\n   * viewSystem.destroy({ removeView: true });\n   */\n  destroy(options = false) {\n    const removeView = typeof options === \"boolean\" ? options : !!options?.removeView;\n    if (removeView && this.canvas.parentNode) {\n      this.canvas.parentNode.removeChild(this.canvas);\n    }\n    this.texture.destroy();\n  }\n};\n/** @ignore */\n_ViewSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"view\",\n  priority: 0\n};\n/** The default options for the view system. */\n_ViewSystem.defaultOptions = {\n  /**\n   * {@link WebGLOptions.width}\n   * @default 800\n   */\n  width: 800,\n  /**\n   * {@link WebGLOptions.height}\n   * @default 600\n   */\n  height: 600,\n  /**\n   * {@link WebGLOptions.autoDensity}\n   * @default false\n   */\n  autoDensity: false,\n  /**\n   * {@link WebGLOptions.antialias}\n   * @default false\n   */\n  antialias: false\n};\nlet ViewSystem = _ViewSystem;\n\nexport { ViewSystem };\n//# sourceMappingURL=ViewSystem.mjs.map\n"],"names":["canvasCache","Map","getCanvasTexture","canvas","options","has","texture","Texture","source","CanvasSource","resource","onDestroy","get","delete","once","set","GlobalResourceRegistry","register","_RenderTarget","constructor","descriptor","this","uid","colorTextures","dirtyId","isRoot","_size","Float32Array","_managedColorTextures","defaultOptions","stencil","depth","i","push","TextureSource","width","height","resolution","antialias","map","colorSource","colorTexture","resize","_resolution","on","onSourceResize","depthStencilTexture","ensureDepthStencilTexture","size","pixelWidth","pixelHeight","format","autoGenerateMipmaps","mipLevelCount","skipColorTexture","forEach","destroy","off","RenderTarget","_ViewSystem","autoDensity","value","init","view","deprecation","v8_0_0","screen","Rectangle","DOMAdapter","createCanvas","renderTarget","transparent","backgroundAlpha","desiredScreenWidth","desiredScreenHeight","frame","removeView","parentNode","removeChild","extension","type","ExtensionType","WebGLSystem","WebGPUSystem","CanvasSystem","name","priority","ViewSystem"],"mappings":"uGAKA,MAAMA,MAAkCC,IAExC,SAASC,EAAiBC,EAAQC,GAChC,IAAKJ,EAAYK,IAAIF,GAAS,CAC5B,MAAMG,EAAU,IAAIC,EAAQ,CAC1BC,OAAQ,IAAIC,EAAa,CACvBC,SAAUP,KACPC,MAGDO,EAAY,KACZX,EAAYY,IAAIT,KAAYG,GAC9BN,EAAYa,OAAOV,IAGvBG,EAAQQ,KAAK,UAAWH,GACxBL,EAAQE,OAAOM,KAAK,UAAWH,GAC/BX,EAAYe,IAAIZ,EAAQG,EAC1B,CACA,OAAON,EAAYY,IAAIT,EACzB,CAnBAa,EAAuBC,SAASjB,GCDhC,MAAMkB,EAAgB,MAAMA,EAI1B,WAAAC,CAAYC,EAAa,IAiBvB,GAfAC,KAAKC,IAAMA,EAAI,gBAKfD,KAAKE,cAAgB,GACrBF,KAAKG,QAAU,EACfH,KAAKI,QAAS,EACdJ,KAAKK,MAAQ,IAAIC,aAAa,GAE9BN,KAAKO,uBAAwB,EAC7BR,EAAa,IAAKF,EAAcW,kBAAmBT,GACnDC,KAAKS,QAAUV,EAAWU,QAC1BT,KAAKU,MAAQX,EAAWW,MACxBV,KAAKI,OAASL,EAAWK,OACe,iBAA7BL,EAAWG,cAA4B,CAChDF,KAAKO,uBAAwB,EAC7B,IAAA,IAASI,EAAI,EAAGA,EAAIZ,EAAWG,cAAeS,IAC5CX,KAAKE,cAAcU,KACjB,IAAIC,EAAc,CAChBC,MAAOf,EAAWe,MAClBC,OAAQhB,EAAWgB,OACnBC,WAAYjB,EAAWiB,WACvBC,UAAWlB,EAAWkB,YAI9B,KAAO,CACLjB,KAAKE,cAAgB,IAAIH,EAAWG,cAAcgB,IAAKjC,GAAYA,EAAQE,SAC3E,MAAMgC,EAAcnB,KAAKoB,aAAajC,OACtCa,KAAKqB,OAAOF,EAAYL,MAAOK,EAAYJ,OAAQI,EAAYG,YACjE,CACAtB,KAAKoB,aAAajC,OAAOoC,GAAG,SAAUvB,KAAKwB,eAAgBxB,OACvDD,EAAW0B,qBAAuBzB,KAAKS,WACrCV,EAAW0B,+BAA+BvC,GAAWa,EAAW0B,+BAA+BZ,EACjGb,KAAKyB,oBAAsB1B,EAAW0B,oBAAoBtC,OAE1Da,KAAK0B,4BAGX,CACA,QAAIC,GACF,MAAMtB,EAAQL,KAAKK,MAGnB,OAFAA,EAAM,GAAKL,KAAK4B,WAChBvB,EAAM,GAAKL,KAAK6B,YACTxB,CACT,CACA,SAAIS,GACF,OAAOd,KAAKoB,aAAajC,OAAO2B,KAClC,CACA,UAAIC,GACF,OAAOf,KAAKoB,aAAajC,OAAO4B,MAClC,CACA,cAAIa,GACF,OAAO5B,KAAKoB,aAAajC,OAAOyC,UAClC,CACA,eAAIC,GACF,OAAO7B,KAAKoB,aAAajC,OAAO0C,WAClC,CACA,cAAIb,GACF,OAAOhB,KAAKoB,aAAajC,OAAOmC,WAClC,CACA,gBAAIF,GACF,OAAOpB,KAAKE,cAAc,EAC5B,CACA,cAAAsB,CAAerC,GACba,KAAKqB,OAAOlC,EAAO2B,MAAO3B,EAAO4B,OAAQ5B,EAAOmC,aAAa,EAC/D,CAMA,yBAAAI,GACO1B,KAAKyB,sBACRzB,KAAKyB,oBAAsB,IAAIZ,EAAc,CAC3CC,MAAOd,KAAKc,MACZC,OAAQf,KAAKe,OACbC,WAAYhB,KAAKgB,WACjBc,OAAQ,uBACRC,qBAAqB,EACrBd,WAAW,EACXe,cAAe,IAIrB,CACA,MAAAX,CAAOP,EAAOC,EAAQC,EAAahB,KAAKgB,WAAYiB,GAAmB,GACrEjC,KAAKG,UACLH,KAAKE,cAAcgC,QAAQ,CAACd,EAAcT,KACpCsB,GAA0B,IAANtB,GAExBS,EAAajC,OAAOkC,OAAOP,EAAOC,EAAQC,KAExChB,KAAKyB,qBACPzB,KAAKyB,oBAAoBtC,OAAOkC,OAAOP,EAAOC,EAAQC,EAE1D,CACA,OAAAmB,GACEnC,KAAKoB,aAAajC,OAAOiD,IAAI,SAAUpC,KAAKwB,eAAgBxB,MACxDA,KAAKO,uBACPP,KAAKE,cAAcgC,QAASjD,IAC1BA,EAAQkD,YAGRnC,KAAKyB,sBACPzB,KAAKyB,oBAAoBU,iBAClBnC,KAAKyB,oBAEhB,GAGF5B,EAAcW,eAAiB,CAE7BM,MAAO,EAEPC,OAAQ,EAERC,WAAY,EAEZd,cAAe,EAEfO,SAAS,EAETC,OAAO,EAEPO,WAAW,EAGXb,QAAQ,GAEP,IAACiC,EAAexC,ECtInB,MAAMyC,EAAc,MAAMA,EAMxB,eAAIC,GACF,OAAOvC,KAAKf,QAAQE,OAAOoD,WAC7B,CACA,eAAIA,CAAYC,GACdxC,KAAKf,QAAQE,OAAOoD,YAAcC,CACpC,CAEA,cAAIxB,GACF,OAAOhB,KAAKf,QAAQE,OAAOmC,WAC7B,CACA,cAAIN,CAAWwB,GACbxC,KAAKf,QAAQE,OAAOkC,OAClBrB,KAAKf,QAAQE,OAAO2B,MACpBd,KAAKf,QAAQE,OAAO4B,OACpByB,EAEJ,CAKA,IAAAC,CAAK1D,IACHA,EAAU,IACLuD,EAAY9B,kBACZzB,IAEO2D,OACVC,EAAYC,EAAQ,yDACpB7D,EAAQD,OAASC,EAAQ2D,MAE3B1C,KAAK6C,OAAS,IAAIC,EAAU,EAAG,EAAG/D,EAAQ+B,MAAO/B,EAAQgC,QACzDf,KAAKlB,OAASC,EAAQD,QAAUiE,EAAWxD,MAAMyD,eACjDhD,KAAKiB,YAAclC,EAAQkC,UAC3BjB,KAAKf,QAAUJ,EAAiBmB,KAAKlB,OAAQC,GAC7CiB,KAAKiD,aAAe,IAAIZ,EAAa,CACnCnC,cAAe,CAACF,KAAKf,SACrByB,QAAS3B,EAAQ2B,MACjBN,QAAQ,IAEVJ,KAAKf,QAAQE,OAAO+D,YAAcnE,EAAQoE,gBAAkB,EAC5DnD,KAAKgB,WAAajC,EAAQiC,UAC5B,CAOA,MAAAK,CAAO+B,EAAoBC,EAAqBrC,GAC9ChB,KAAKf,QAAQE,OAAOkC,OAAO+B,EAAoBC,EAAqBrC,GACpEhB,KAAK6C,OAAO/B,MAAQd,KAAKf,QAAQqE,MAAMxC,MACvCd,KAAK6C,OAAO9B,OAASf,KAAKf,QAAQqE,MAAMvC,MAC1C,CASA,OAAAoB,CAAQpD,GAAU,IACsB,kBAAZA,EAAwBA,IAAYA,GAASwE,aACrDvD,KAAKlB,OAAO0E,YAC5BxD,KAAKlB,OAAO0E,WAAWC,YAAYzD,KAAKlB,QAE1CkB,KAAKf,QAAQkD,SACf,GAGFG,EAAYoB,UAAY,CACtBC,KAAM,CACJC,EAAcC,YACdD,EAAcE,aACdF,EAAcG,cAEhBC,KAAM,OACNC,SAAU,GAGZ3B,EAAY9B,eAAiB,CAK3BM,MAAO,IAKPC,OAAQ,IAKRwB,aAAa,EAKbtB,WAAW,GAEV,IAACiD,EAAa5B","x_google_ignoreList":[0,1,2]}