{"version":3,"file":"pixi-container--XA1H1gw.js","sources":["../../node_modules/pixi.js/lib/scene/container/utils/definedProps.mjs","../../node_modules/pixi.js/lib/scene/container/bounds/Bounds.mjs","../../node_modules/pixi.js/lib/scene/container/container-mixins/cacheAsTextureMixin.mjs","../../node_modules/pixi.js/lib/scene/container/container-mixins/childrenHelperMixin.mjs","../../node_modules/pixi.js/lib/scene/container/container-mixins/collectRenderablesMixin.mjs","../../node_modules/pixi.js/lib/scene/container/container-mixins/effectsMixin.mjs","../../node_modules/pixi.js/lib/scene/container/container-mixins/findMixin.mjs","../../node_modules/pixi.js/lib/scene/container/bounds/utils/matrixAndBoundsPool.mjs","../../node_modules/pixi.js/lib/scene/container/container-mixins/getFastGlobalBoundsMixin.mjs","../../node_modules/pixi.js/lib/scene/container/bounds/getGlobalBounds.mjs","../../node_modules/pixi.js/lib/scene/container/utils/multiplyHexColors.mjs","../../node_modules/pixi.js/lib/scene/container/utils/multiplyColors.mjs","../../node_modules/pixi.js/lib/scene/container/container-mixins/getGlobalMixin.mjs","../../node_modules/pixi.js/lib/scene/container/bounds/getLocalBounds.mjs","../../node_modules/pixi.js/lib/scene/container/utils/checkChildrenDidChange.mjs","../../node_modules/pixi.js/lib/scene/container/container-mixins/measureMixin.mjs","../../node_modules/pixi.js/lib/scene/container/container-mixins/onRenderMixin.mjs","../../node_modules/pixi.js/lib/scene/container/container-mixins/sortMixin.mjs","../../node_modules/pixi.js/lib/scene/container/container-mixins/toLocalGlobalMixin.mjs","../../node_modules/pixi.js/lib/scene/container/RenderGroup.mjs","../../node_modules/pixi.js/lib/scene/container/Container.mjs","../../node_modules/pixi.js/lib/scene/container/utils/assignWithIgnore.mjs","../../node_modules/pixi.js/lib/scene/container/bounds/getRenderableBounds.mjs","../../node_modules/pixi.js/lib/scene/container/CustomRenderPipe.mjs","../../node_modules/pixi.js/lib/scene/container/utils/executeInstructions.mjs","../../node_modules/pixi.js/lib/scene/container/RenderGroupPipe.mjs","../../node_modules/pixi.js/lib/scene/container/utils/clearList.mjs","../../node_modules/pixi.js/lib/scene/container/utils/updateRenderGroupTransforms.mjs","../../node_modules/pixi.js/lib/scene/container/RenderGroupSystem.mjs","../../node_modules/pixi.js/lib/scene/container/utils/validateRenderables.mjs","../../node_modules/pixi.js/lib/scene/particle-container/gl/GlParticleContainerAdaptor.mjs","../../node_modules/pixi.js/lib/scene/particle-container/gpu/GpuParticleContainerAdaptor.mjs","../../node_modules/pixi.js/lib/scene/particle-container/shared/utils/createIndicesForQuads.mjs","../../node_modules/pixi.js/lib/scene/particle-container/shared/utils/generateParticleUpdateFunction.mjs","../../node_modules/pixi.js/lib/scene/particle-container/shared/ParticleBuffer.mjs","../../node_modules/pixi.js/lib/scene/particle-container/shared/shader/particles.frag.mjs","../../node_modules/pixi.js/lib/scene/particle-container/shared/shader/particles.wgsl.mjs","../../node_modules/pixi.js/lib/scene/particle-container/shared/shader/ParticleShader.mjs","../../node_modules/pixi.js/lib/scene/particle-container/shared/shader/particles.vert.mjs","../../node_modules/pixi.js/lib/scene/particle-container/shared/ParticleContainerPipe.mjs","../../node_modules/pixi.js/lib/scene/particle-container/shared/GlParticleContainerPipe.mjs","../../node_modules/pixi.js/lib/scene/particle-container/shared/GpuParticleContainerPipe.mjs","../../node_modules/pixi.js/lib/scene/particle-container/init.mjs"],"sourcesContent":["\"use strict\";\nfunction definedProps(obj) {\n  const result = {};\n  for (const key in obj) {\n    if (obj[key] !== void 0) {\n      result[key] = obj[key];\n    }\n  }\n  return result;\n}\n\nexport { definedProps };\n//# sourceMappingURL=definedProps.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { Rectangle } from '../../../maths/shapes/Rectangle.mjs';\n\n\"use strict\";\nconst defaultMatrix = new Matrix();\nclass Bounds {\n  /**\n   * Creates a new Bounds object.\n   * @param minX - The minimum X coordinate of the bounds.\n   * @param minY - The minimum Y coordinate of the bounds.\n   * @param maxX - The maximum X coordinate of the bounds.\n   * @param maxY - The maximum Y coordinate of the bounds.\n   */\n  constructor(minX = Infinity, minY = Infinity, maxX = -Infinity, maxY = -Infinity) {\n    /**\n     * The minimum X coordinate of the bounds.\n     * Represents the leftmost edge of the bounding box.\n     * @example\n     * ```ts\n     * const bounds = new Bounds();\n     * // Set left edge\n     * bounds.minX = 100;\n     * ```\n     * @default Infinity\n     */\n    this.minX = Infinity;\n    /**\n     * The minimum Y coordinate of the bounds.\n     * Represents the topmost edge of the bounding box.\n     * @example\n     * ```ts\n     * const bounds = new Bounds();\n     * // Set top edge\n     * bounds.minY = 100;\n     * ```\n     * @default Infinity\n     */\n    this.minY = Infinity;\n    /**\n     * The maximum X coordinate of the bounds.\n     * Represents the rightmost edge of the bounding box.\n     * @example\n     * ```ts\n     * const bounds = new Bounds();\n     * // Set right edge\n     * bounds.maxX = 200;\n     * // Get width\n     * const width = bounds.maxX - bounds.minX;\n     * ```\n     * @default -Infinity\n     */\n    this.maxX = -Infinity;\n    /**\n     * The maximum Y coordinate of the bounds.\n     * Represents the bottommost edge of the bounding box.\n     * @example\n     * ```ts\n     * const bounds = new Bounds();\n     * // Set bottom edge\n     * bounds.maxY = 200;\n     * // Get height\n     * const height = bounds.maxY - bounds.minY;\n     * ```\n     * @default -Infinity\n     */\n    this.maxY = -Infinity;\n    /**\n     * The transformation matrix applied to this bounds object.\n     * Used when calculating bounds with transforms.\n     * @example\n     * ```ts\n     * const bounds = new Bounds();\n     *\n     * // Apply translation matrix\n     * bounds.matrix = new Matrix()\n     *     .translate(100, 100);\n     *\n     * // Combine transformations\n     * bounds.matrix = new Matrix()\n     *     .translate(50, 50)\n     *     .rotate(Math.PI / 4)\n     *     .scale(2, 2);\n     *\n     * // Use in bounds calculations\n     * bounds.addFrame(0, 0, 100, 100); // Uses current matrix\n     * bounds.addFrame(0, 0, 100, 100, customMatrix); // Override matrix\n     * ```\n     * @advanced\n     */\n    this.matrix = defaultMatrix;\n    this.minX = minX;\n    this.minY = minY;\n    this.maxX = maxX;\n    this.maxY = maxY;\n  }\n  /**\n   * Checks if bounds are empty, meaning either width or height is zero or negative.\n   * Empty bounds occur when min values exceed max values on either axis.\n   * @example\n   * ```ts\n   * const bounds = new Bounds();\n   *\n   * // Check if newly created bounds are empty\n   * console.log(bounds.isEmpty()); // true, default bounds are empty\n   *\n   * // Add frame and check again\n   * bounds.addFrame(0, 0, 100, 100);\n   * console.log(bounds.isEmpty()); // false, bounds now have area\n   *\n   * // Clear bounds\n   * bounds.clear();\n   * console.log(bounds.isEmpty()); // true, bounds are empty again\n   * ```\n   * @returns True if bounds are empty (have no area)\n   * @see {@link Bounds#clear} For resetting bounds\n   * @see {@link Bounds#isValid} For checking validity\n   */\n  isEmpty() {\n    return this.minX > this.maxX || this.minY > this.maxY;\n  }\n  /**\n   * The bounding rectangle representation of these bounds.\n   * Lazily creates and updates a Rectangle instance based on the current bounds.\n   * @example\n   * ```ts\n   * const bounds = new Bounds(0, 0, 100, 100);\n   *\n   * // Get rectangle representation\n   * const rect = bounds.rectangle;\n   * console.log(rect.x, rect.y, rect.width, rect.height);\n   *\n   * // Use for hit testing\n   * if (bounds.rectangle.contains(mouseX, mouseY)) {\n   *     console.log('Mouse is inside bounds!');\n   * }\n   * ```\n   * @see {@link Rectangle} For rectangle methods\n   * @see {@link Bounds.isEmpty} For bounds validation\n   */\n  get rectangle() {\n    if (!this._rectangle) {\n      this._rectangle = new Rectangle();\n    }\n    const rectangle = this._rectangle;\n    if (this.minX > this.maxX || this.minY > this.maxY) {\n      rectangle.x = 0;\n      rectangle.y = 0;\n      rectangle.width = 0;\n      rectangle.height = 0;\n    } else {\n      rectangle.copyFromBounds(this);\n    }\n    return rectangle;\n  }\n  /**\n   * Clears the bounds and resets all coordinates to their default values.\n   * Resets the transformation matrix back to identity.\n   * @example\n   * ```ts\n   * const bounds = new Bounds(0, 0, 100, 100);\n   * console.log(bounds.isEmpty()); // false\n   * // Clear the bounds\n   * bounds.clear();\n   * console.log(bounds.isEmpty()); // true\n   * ```\n   * @returns This bounds object for chaining\n   */\n  clear() {\n    this.minX = Infinity;\n    this.minY = Infinity;\n    this.maxX = -Infinity;\n    this.maxY = -Infinity;\n    this.matrix = defaultMatrix;\n    return this;\n  }\n  /**\n   * Sets the bounds directly using coordinate values.\n   * Provides a way to set all bounds values at once.\n   * @example\n   * ```ts\n   * const bounds = new Bounds();\n   * bounds.set(0, 0, 100, 100);\n   * ```\n   * @param x0 - Left X coordinate of frame\n   * @param y0 - Top Y coordinate of frame\n   * @param x1 - Right X coordinate of frame\n   * @param y1 - Bottom Y coordinate of frame\n   * @see {@link Bounds#addFrame} For matrix-aware bounds setting\n   * @see {@link Bounds#clear} For resetting bounds\n   */\n  set(x0, y0, x1, y1) {\n    this.minX = x0;\n    this.minY = y0;\n    this.maxX = x1;\n    this.maxY = y1;\n  }\n  /**\n   * Adds a rectangular frame to the bounds, optionally transformed by a matrix.\n   * Updates the bounds to encompass the new frame coordinates.\n   * @example\n   * ```ts\n   * const bounds = new Bounds();\n   * bounds.addFrame(0, 0, 100, 100);\n   *\n   * // Add transformed frame\n   * const matrix = new Matrix()\n   *     .translate(50, 50)\n   *     .rotate(Math.PI / 4);\n   * bounds.addFrame(0, 0, 100, 100, matrix);\n   * ```\n   * @param x0 - Left X coordinate of frame\n   * @param y0 - Top Y coordinate of frame\n   * @param x1 - Right X coordinate of frame\n   * @param y1 - Bottom Y coordinate of frame\n   * @param matrix - Optional transformation matrix\n   * @see {@link Bounds#addRect} For adding Rectangle objects\n   * @see {@link Bounds#addBounds} For adding other Bounds\n   */\n  addFrame(x0, y0, x1, y1, matrix) {\n    matrix || (matrix = this.matrix);\n    const a = matrix.a;\n    const b = matrix.b;\n    const c = matrix.c;\n    const d = matrix.d;\n    const tx = matrix.tx;\n    const ty = matrix.ty;\n    let minX = this.minX;\n    let minY = this.minY;\n    let maxX = this.maxX;\n    let maxY = this.maxY;\n    let x = a * x0 + c * y0 + tx;\n    let y = b * x0 + d * y0 + ty;\n    if (x < minX)\n      minX = x;\n    if (y < minY)\n      minY = y;\n    if (x > maxX)\n      maxX = x;\n    if (y > maxY)\n      maxY = y;\n    x = a * x1 + c * y0 + tx;\n    y = b * x1 + d * y0 + ty;\n    if (x < minX)\n      minX = x;\n    if (y < minY)\n      minY = y;\n    if (x > maxX)\n      maxX = x;\n    if (y > maxY)\n      maxY = y;\n    x = a * x0 + c * y1 + tx;\n    y = b * x0 + d * y1 + ty;\n    if (x < minX)\n      minX = x;\n    if (y < minY)\n      minY = y;\n    if (x > maxX)\n      maxX = x;\n    if (y > maxY)\n      maxY = y;\n    x = a * x1 + c * y1 + tx;\n    y = b * x1 + d * y1 + ty;\n    if (x < minX)\n      minX = x;\n    if (y < minY)\n      minY = y;\n    if (x > maxX)\n      maxX = x;\n    if (y > maxY)\n      maxY = y;\n    this.minX = minX;\n    this.minY = minY;\n    this.maxX = maxX;\n    this.maxY = maxY;\n  }\n  /**\n   * Adds a rectangle to the bounds, optionally transformed by a matrix.\n   * Updates the bounds to encompass the given rectangle.\n   * @example\n   * ```ts\n   * const bounds = new Bounds();\n   * // Add simple rectangle\n   * const rect = new Rectangle(0, 0, 100, 100);\n   * bounds.addRect(rect);\n   *\n   * // Add transformed rectangle\n   * const matrix = new Matrix()\n   *     .translate(50, 50)\n   *     .rotate(Math.PI / 4);\n   * bounds.addRect(rect, matrix);\n   * ```\n   * @param rect - The rectangle to be added\n   * @param matrix - Optional transformation matrix\n   * @see {@link Bounds#addFrame} For adding raw coordinates\n   * @see {@link Bounds#addBounds} For adding other bounds\n   */\n  addRect(rect, matrix) {\n    this.addFrame(rect.x, rect.y, rect.x + rect.width, rect.y + rect.height, matrix);\n  }\n  /**\n   * Adds another bounds object to this one, optionally transformed by a matrix.\n   * Expands the bounds to include the given bounds' area.\n   * @example\n   * ```ts\n   * const bounds = new Bounds();\n   *\n   * // Add child bounds\n   * const childBounds = sprite.getBounds();\n   * bounds.addBounds(childBounds);\n   *\n   * // Add transformed bounds\n   * const matrix = new Matrix()\n   *     .scale(2, 2);\n   * bounds.addBounds(childBounds, matrix);\n   * ```\n   * @param bounds - The bounds to be added\n   * @param matrix - Optional transformation matrix\n   * @see {@link Bounds#addFrame} For adding raw coordinates\n   * @see {@link Bounds#addRect} For adding rectangles\n   */\n  addBounds(bounds, matrix) {\n    this.addFrame(bounds.minX, bounds.minY, bounds.maxX, bounds.maxY, matrix);\n  }\n  /**\n   * Adds other Bounds as a mask, creating an intersection of the two bounds.\n   * Only keeps the overlapping region between current bounds and mask bounds.\n   * @example\n   * ```ts\n   * const bounds = new Bounds(0, 0, 100, 100);\n   * // Create mask bounds\n   * const mask = new Bounds();\n   * mask.addFrame(50, 50, 150, 150);\n   * // Apply mask - results in bounds of (50,50,100,100)\n   * bounds.addBoundsMask(mask);\n   * ```\n   * @param mask - The Bounds to use as a mask\n   * @see {@link Bounds#addBounds} For union operation\n   * @see {@link Bounds#fit} For fitting to rectangle\n   */\n  addBoundsMask(mask) {\n    this.minX = this.minX > mask.minX ? this.minX : mask.minX;\n    this.minY = this.minY > mask.minY ? this.minY : mask.minY;\n    this.maxX = this.maxX < mask.maxX ? this.maxX : mask.maxX;\n    this.maxY = this.maxY < mask.maxY ? this.maxY : mask.maxY;\n  }\n  /**\n   * Applies a transformation matrix to the bounds, updating its coordinates.\n   * Transforms all corners of the bounds using the given matrix.\n   * @example\n   * ```ts\n   * const bounds = new Bounds(0, 0, 100, 100);\n   * // Apply translation\n   * const translateMatrix = new Matrix()\n   *     .translate(50, 50);\n   * bounds.applyMatrix(translateMatrix);\n   * ```\n   * @param matrix - The matrix to apply to the bounds\n   * @see {@link Matrix} For matrix operations\n   * @see {@link Bounds#addFrame} For adding transformed frames\n   */\n  applyMatrix(matrix) {\n    const minX = this.minX;\n    const minY = this.minY;\n    const maxX = this.maxX;\n    const maxY = this.maxY;\n    const { a, b, c, d, tx, ty } = matrix;\n    let x = a * minX + c * minY + tx;\n    let y = b * minX + d * minY + ty;\n    this.minX = x;\n    this.minY = y;\n    this.maxX = x;\n    this.maxY = y;\n    x = a * maxX + c * minY + tx;\n    y = b * maxX + d * minY + ty;\n    this.minX = x < this.minX ? x : this.minX;\n    this.minY = y < this.minY ? y : this.minY;\n    this.maxX = x > this.maxX ? x : this.maxX;\n    this.maxY = y > this.maxY ? y : this.maxY;\n    x = a * minX + c * maxY + tx;\n    y = b * minX + d * maxY + ty;\n    this.minX = x < this.minX ? x : this.minX;\n    this.minY = y < this.minY ? y : this.minY;\n    this.maxX = x > this.maxX ? x : this.maxX;\n    this.maxY = y > this.maxY ? y : this.maxY;\n    x = a * maxX + c * maxY + tx;\n    y = b * maxX + d * maxY + ty;\n    this.minX = x < this.minX ? x : this.minX;\n    this.minY = y < this.minY ? y : this.minY;\n    this.maxX = x > this.maxX ? x : this.maxX;\n    this.maxY = y > this.maxY ? y : this.maxY;\n  }\n  /**\n   * Resizes the bounds object to fit within the given rectangle.\n   * Clips the bounds if they extend beyond the rectangle's edges.\n   * @example\n   * ```ts\n   * const bounds = new Bounds(0, 0, 200, 200);\n   * // Fit within viewport\n   * const viewport = new Rectangle(50, 50, 100, 100);\n   * bounds.fit(viewport);\n   * // bounds are now (50, 50, 150, 150)\n   * ```\n   * @param rect - The rectangle to fit within\n   * @returns This bounds object for chaining\n   * @see {@link Bounds#addBoundsMask} For intersection\n   * @see {@link Bounds#pad} For expanding bounds\n   */\n  fit(rect) {\n    if (this.minX < rect.left)\n      this.minX = rect.left;\n    if (this.maxX > rect.right)\n      this.maxX = rect.right;\n    if (this.minY < rect.top)\n      this.minY = rect.top;\n    if (this.maxY > rect.bottom)\n      this.maxY = rect.bottom;\n    return this;\n  }\n  /**\n   * Resizes the bounds object to include the given bounds.\n   * Similar to fit() but works with raw coordinate values instead of a Rectangle.\n   * @example\n   * ```ts\n   * const bounds = new Bounds(0, 0, 200, 200);\n   * // Fit to specific coordinates\n   * bounds.fitBounds(50, 150, 50, 150);\n   * // bounds are now (50, 50, 150, 150)\n   * ```\n   * @param left - The left value of the bounds\n   * @param right - The right value of the bounds\n   * @param top - The top value of the bounds\n   * @param bottom - The bottom value of the bounds\n   * @returns This bounds object for chaining\n   * @see {@link Bounds#fit} For fitting to Rectangle\n   * @see {@link Bounds#addBoundsMask} For intersection\n   */\n  fitBounds(left, right, top, bottom) {\n    if (this.minX < left)\n      this.minX = left;\n    if (this.maxX > right)\n      this.maxX = right;\n    if (this.minY < top)\n      this.minY = top;\n    if (this.maxY > bottom)\n      this.maxY = bottom;\n    return this;\n  }\n  /**\n   * Pads bounds object, making it grow in all directions.\n   * If paddingY is omitted, both paddingX and paddingY will be set to paddingX.\n   * @example\n   * ```ts\n   * const bounds = new Bounds(0, 0, 100, 100);\n   *\n   * // Add equal padding\n   * bounds.pad(10);\n   * // bounds are now (-10, -10, 110, 110)\n   *\n   * // Add different padding for x and y\n   * bounds.pad(20, 10);\n   * // bounds are now (-30, -20, 130, 120)\n   * ```\n   * @param paddingX - The horizontal padding amount\n   * @param paddingY - The vertical padding amount\n   * @returns This bounds object for chaining\n   * @see {@link Bounds#fit} For constraining bounds\n   * @see {@link Bounds#scale} For uniform scaling\n   */\n  pad(paddingX, paddingY = paddingX) {\n    this.minX -= paddingX;\n    this.maxX += paddingX;\n    this.minY -= paddingY;\n    this.maxY += paddingY;\n    return this;\n  }\n  /**\n   * Ceils the bounds by rounding up max values and rounding down min values.\n   * Useful for pixel-perfect calculations and avoiding fractional pixels.\n   * @example\n   * ```ts\n   * const bounds = new Bounds();\n   * bounds.set(10.2, 10.9, 50.1, 50.8);\n   *\n   * // Round to whole pixels\n   * bounds.ceil();\n   * // bounds are now (10, 10, 51, 51)\n   * ```\n   * @returns This bounds object for chaining\n   * @see {@link Bounds#scale} For size adjustments\n   * @see {@link Bounds#fit} For constraining bounds\n   */\n  ceil() {\n    this.minX = Math.floor(this.minX);\n    this.minY = Math.floor(this.minY);\n    this.maxX = Math.ceil(this.maxX);\n    this.maxY = Math.ceil(this.maxY);\n    return this;\n  }\n  /**\n   * Creates a new Bounds instance with the same values.\n   * @example\n   * ```ts\n   * const bounds = new Bounds(0, 0, 100, 100);\n   *\n   * // Create a copy\n   * const copy = bounds.clone();\n   *\n   * // Original and copy are independent\n   * bounds.pad(10);\n   * console.log(copy.width === bounds.width); // false\n   * ```\n   * @returns A new Bounds instance with the same values\n   * @see {@link Bounds#copyFrom} For reusing existing bounds\n   */\n  clone() {\n    return new Bounds(this.minX, this.minY, this.maxX, this.maxY);\n  }\n  /**\n   * Scales the bounds by the given values, adjusting all edges proportionally.\n   * @example\n   * ```ts\n   * const bounds = new Bounds(0, 0, 100, 100);\n   *\n   * // Scale uniformly\n   * bounds.scale(2);\n   * // bounds are now (0, 0, 200, 200)\n   *\n   * // Scale non-uniformly\n   * bounds.scale(0.5, 2);\n   * // bounds are now (0, 0, 100, 400)\n   * ```\n   * @param x - The X value to scale by\n   * @param y - The Y value to scale by (defaults to x)\n   * @returns This bounds object for chaining\n   * @see {@link Bounds#pad} For adding padding\n   * @see {@link Bounds#fit} For constraining size\n   */\n  scale(x, y = x) {\n    this.minX *= x;\n    this.minY *= y;\n    this.maxX *= x;\n    this.maxY *= y;\n    return this;\n  }\n  /**\n   * The x position of the bounds in local space.\n   * Setting this value will move the bounds while maintaining its width.\n   * @example\n   * ```ts\n   * const bounds = new Bounds(0, 0, 100, 100);\n   * // Get x position\n   * console.log(bounds.x); // 0\n   *\n   * // Move bounds horizontally\n   * bounds.x = 50;\n   * console.log(bounds.minX, bounds.maxX); // 50, 150\n   *\n   * // Width stays the same\n   * console.log(bounds.width); // Still 100\n   * ```\n   */\n  get x() {\n    return this.minX;\n  }\n  set x(value) {\n    const width = this.maxX - this.minX;\n    this.minX = value;\n    this.maxX = value + width;\n  }\n  /**\n   * The y position of the bounds in local space.\n   * Setting this value will move the bounds while maintaining its height.\n   * @example\n   * ```ts\n   * const bounds = new Bounds(0, 0, 100, 100);\n   * // Get y position\n   * console.log(bounds.y); // 0\n   *\n   * // Move bounds vertically\n   * bounds.y = 50;\n   * console.log(bounds.minY, bounds.maxY); // 50, 150\n   *\n   * // Height stays the same\n   * console.log(bounds.height); // Still 100\n   * ```\n   */\n  get y() {\n    return this.minY;\n  }\n  set y(value) {\n    const height = this.maxY - this.minY;\n    this.minY = value;\n    this.maxY = value + height;\n  }\n  /**\n   * The width value of the bounds.\n   * Represents the distance between minX and maxX coordinates.\n   * @example\n   * ```ts\n   * const bounds = new Bounds(0, 0, 100, 100);\n   * // Get width\n   * console.log(bounds.width); // 100\n   * // Resize width\n   * bounds.width = 200;\n   * console.log(bounds.maxX - bounds.minX); // 200\n   * ```\n   */\n  get width() {\n    return this.maxX - this.minX;\n  }\n  set width(value) {\n    this.maxX = this.minX + value;\n  }\n  /**\n   * The height value of the bounds.\n   * Represents the distance between minY and maxY coordinates.\n   * @example\n   * ```ts\n   * const bounds = new Bounds(0, 0, 100, 100);\n   * // Get height\n   * console.log(bounds.height); // 100\n   * // Resize height\n   * bounds.height = 150;\n   * console.log(bounds.maxY - bounds.minY); // 150\n   * ```\n   */\n  get height() {\n    return this.maxY - this.minY;\n  }\n  set height(value) {\n    this.maxY = this.minY + value;\n  }\n  /**\n   * The left edge coordinate of the bounds.\n   * Alias for minX.\n   * @example\n   * ```ts\n   * const bounds = new Bounds(50, 0, 150, 100);\n   * console.log(bounds.left); // 50\n   * console.log(bounds.left === bounds.minX); // true\n   * ```\n   * @readonly\n   */\n  get left() {\n    return this.minX;\n  }\n  /**\n   * The right edge coordinate of the bounds.\n   * Alias for maxX.\n   * @example\n   * ```ts\n   * const bounds = new Bounds(0, 0, 100, 100);\n   * console.log(bounds.right); // 100\n   * console.log(bounds.right === bounds.maxX); // true\n   * ```\n   * @readonly\n   */\n  get right() {\n    return this.maxX;\n  }\n  /**\n   * The top edge coordinate of the bounds.\n   * Alias for minY.\n   * @example\n   * ```ts\n   * const bounds = new Bounds(0, 25, 100, 125);\n   * console.log(bounds.top); // 25\n   * console.log(bounds.top === bounds.minY); // true\n   * ```\n   * @readonly\n   */\n  get top() {\n    return this.minY;\n  }\n  /**\n   * The bottom edge coordinate of the bounds.\n   * Alias for maxY.\n   * @example\n   * ```ts\n   * const bounds = new Bounds(0, 0, 100, 200);\n   * console.log(bounds.bottom); // 200\n   * console.log(bounds.bottom === bounds.maxY); // true\n   * ```\n   * @readonly\n   */\n  get bottom() {\n    return this.maxY;\n  }\n  /**\n   * Whether the bounds has positive width and height.\n   * Checks if both dimensions are greater than zero.\n   * @example\n   * ```ts\n   * const bounds = new Bounds(0, 0, 100, 100);\n   * // Check if bounds are positive\n   * console.log(bounds.isPositive); // true\n   *\n   * // Negative bounds\n   * bounds.maxX = bounds.minX;\n   * console.log(bounds.isPositive); // false, width is 0\n   * ```\n   * @readonly\n   * @see {@link Bounds#isEmpty} For checking empty state\n   * @see {@link Bounds#isValid} For checking validity\n   */\n  get isPositive() {\n    return this.maxX - this.minX > 0 && this.maxY - this.minY > 0;\n  }\n  /**\n   * Whether the bounds has valid coordinates.\n   * Checks if the bounds has been initialized with real values.\n   * @example\n   * ```ts\n   * const bounds = new Bounds();\n   * console.log(bounds.isValid); // false, default state\n   *\n   * // Set valid bounds\n   * bounds.addFrame(0, 0, 100, 100);\n   * console.log(bounds.isValid); // true\n   * ```\n   * @readonly\n   * @see {@link Bounds#isEmpty} For checking empty state\n   * @see {@link Bounds#isPositive} For checking dimensions\n   */\n  get isValid() {\n    return this.minX + this.minY !== Infinity;\n  }\n  /**\n   * Adds vertices from a Float32Array to the bounds, optionally transformed by a matrix.\n   * Used for efficiently updating bounds from raw vertex data.\n   * @example\n   * ```ts\n   * const bounds = new Bounds();\n   *\n   * // Add vertices from geometry\n   * const vertices = new Float32Array([\n   *     0, 0,    // Vertex 1\n   *     100, 0,  // Vertex 2\n   *     100, 100 // Vertex 3\n   * ]);\n   * bounds.addVertexData(vertices, 0, 6);\n   *\n   * // Add transformed vertices\n   * const matrix = new Matrix()\n   *     .translate(50, 50)\n   *     .rotate(Math.PI / 4);\n   * bounds.addVertexData(vertices, 0, 6, matrix);\n   *\n   * // Add subset of vertices\n   * bounds.addVertexData(vertices, 2, 4); // Only second vertex\n   * ```\n   * @param vertexData - The array of vertices to add\n   * @param beginOffset - Starting index in the vertex array\n   * @param endOffset - Ending index in the vertex array (excluded)\n   * @param matrix - Optional transformation matrix\n   * @see {@link Bounds#addFrame} For adding rectangular frames\n   * @see {@link Matrix} For transformation details\n   */\n  addVertexData(vertexData, beginOffset, endOffset, matrix) {\n    let minX = this.minX;\n    let minY = this.minY;\n    let maxX = this.maxX;\n    let maxY = this.maxY;\n    matrix || (matrix = this.matrix);\n    const a = matrix.a;\n    const b = matrix.b;\n    const c = matrix.c;\n    const d = matrix.d;\n    const tx = matrix.tx;\n    const ty = matrix.ty;\n    for (let i = beginOffset; i < endOffset; i += 2) {\n      const localX = vertexData[i];\n      const localY = vertexData[i + 1];\n      const x = a * localX + c * localY + tx;\n      const y = b * localX + d * localY + ty;\n      minX = x < minX ? x : minX;\n      minY = y < minY ? y : minY;\n      maxX = x > maxX ? x : maxX;\n      maxY = y > maxY ? y : maxY;\n    }\n    this.minX = minX;\n    this.minY = minY;\n    this.maxX = maxX;\n    this.maxY = maxY;\n  }\n  /**\n   * Checks if a point is contained within the bounds.\n   * Returns true if the point's coordinates fall within the bounds' area.\n   * @example\n   * ```ts\n   * const bounds = new Bounds(0, 0, 100, 100);\n   * // Basic point check\n   * console.log(bounds.containsPoint(50, 50)); // true\n   * console.log(bounds.containsPoint(150, 150)); // false\n   *\n   * // Check edges\n   * console.log(bounds.containsPoint(0, 0));   // true, includes edges\n   * console.log(bounds.containsPoint(100, 100)); // true, includes edges\n   * ```\n   * @param x - x coordinate to check\n   * @param y - y coordinate to check\n   * @returns True if the point is inside the bounds\n   * @see {@link Bounds#isPositive} For valid bounds check\n   * @see {@link Bounds#rectangle} For Rectangle representation\n   */\n  containsPoint(x, y) {\n    if (this.minX <= x && this.minY <= y && this.maxX >= x && this.maxY >= y) {\n      return true;\n    }\n    return false;\n  }\n  /**\n   * Returns a string representation of the bounds.\n   * Useful for debugging and logging bounds information.\n   * @example\n   * ```ts\n   * const bounds = new Bounds(0, 0, 100, 100);\n   * console.log(bounds.toString()); // \"[pixi.js:Bounds minX=0 minY=0 maxX=100 maxY=100 width=100 height=100]\"\n   * ```\n   * @returns A string describing the bounds\n   * @see {@link Bounds#copyFrom} For copying bounds\n   * @see {@link Bounds#clone} For creating a new instance\n   */\n  toString() {\n    return `[pixi.js:Bounds minX=${this.minX} minY=${this.minY} maxX=${this.maxX} maxY=${this.maxY} width=${this.width} height=${this.height}]`;\n  }\n  /**\n   * Copies the bounds from another bounds object.\n   * Useful for reusing bounds objects and avoiding allocations.\n   * @example\n   * ```ts\n   * const sourceBounds = new Bounds(0, 0, 100, 100);\n   * // Copy bounds\n   * const targetBounds = new Bounds();\n   * targetBounds.copyFrom(sourceBounds);\n   * ```\n   * @param bounds - The bounds to copy from\n   * @returns This bounds object for chaining\n   * @see {@link Bounds#clone} For creating new instances\n   */\n  copyFrom(bounds) {\n    this.minX = bounds.minX;\n    this.minY = bounds.minY;\n    this.maxX = bounds.maxX;\n    this.maxY = bounds.maxY;\n    return this;\n  }\n}\n\nexport { Bounds };\n//# sourceMappingURL=Bounds.mjs.map\n","import { deprecation } from '../../../utils/logging/deprecation.mjs';\n\n\"use strict\";\nconst cacheAsTextureMixin = {\n  get isCachedAsTexture() {\n    return !!this.renderGroup?.isCachedAsTexture;\n  },\n  cacheAsTexture(val) {\n    if (typeof val === \"boolean\" && val === false) {\n      this.disableRenderGroup();\n    } else {\n      this.enableRenderGroup();\n      this.renderGroup.enableCacheAsTexture(val === true ? {} : val);\n    }\n  },\n  updateCacheTexture() {\n    this.renderGroup?.updateCacheTexture();\n  },\n  get cacheAsBitmap() {\n    return this.isCachedAsTexture;\n  },\n  set cacheAsBitmap(val) {\n    deprecation(\"v8.6.0\", \"cacheAsBitmap is deprecated, use cacheAsTexture instead.\");\n    this.cacheAsTexture(val);\n  }\n};\n\nexport { cacheAsTextureMixin };\n//# sourceMappingURL=cacheAsTextureMixin.mjs.map\n","import { removeItems } from '../../../utils/data/removeItems.mjs';\nimport { deprecation, v8_0_0 } from '../../../utils/logging/deprecation.mjs';\n\n\"use strict\";\nconst childrenHelperMixin = {\n  allowChildren: true,\n  removeChildren(beginIndex = 0, endIndex) {\n    const end = endIndex ?? this.children.length;\n    const range = end - beginIndex;\n    const removed = [];\n    if (range > 0 && range <= end) {\n      for (let i = end - 1; i >= beginIndex; i--) {\n        const child = this.children[i];\n        if (!child)\n          continue;\n        removed.push(child);\n        child.parent = null;\n      }\n      removeItems(this.children, beginIndex, end);\n      const renderGroup = this.renderGroup || this.parentRenderGroup;\n      if (renderGroup) {\n        renderGroup.removeChildren(removed);\n      }\n      for (let i = 0; i < removed.length; ++i) {\n        const child = removed[i];\n        child.parentRenderLayer?.detach(child);\n        this.emit(\"childRemoved\", child, this, i);\n        removed[i].emit(\"removed\", this);\n      }\n      if (removed.length > 0) {\n        this._didViewChangeTick++;\n      }\n      return removed;\n    } else if (range === 0 && this.children.length === 0) {\n      return removed;\n    }\n    throw new RangeError(\"removeChildren: numeric values are outside the acceptable range.\");\n  },\n  removeChildAt(index) {\n    const child = this.getChildAt(index);\n    return this.removeChild(child);\n  },\n  getChildAt(index) {\n    if (index < 0 || index >= this.children.length) {\n      throw new Error(`getChildAt: Index (${index}) does not exist.`);\n    }\n    return this.children[index];\n  },\n  setChildIndex(child, index) {\n    if (index < 0 || index >= this.children.length) {\n      throw new Error(`The index ${index} supplied is out of bounds ${this.children.length}`);\n    }\n    this.getChildIndex(child);\n    this.addChildAt(child, index);\n  },\n  getChildIndex(child) {\n    const index = this.children.indexOf(child);\n    if (index === -1) {\n      throw new Error(\"The supplied Container must be a child of the caller\");\n    }\n    return index;\n  },\n  addChildAt(child, index) {\n    if (!this.allowChildren) {\n      deprecation(v8_0_0, \"addChildAt: Only Containers will be allowed to add children in v8.0.0\");\n    }\n    const { children } = this;\n    if (index < 0 || index > children.length) {\n      throw new Error(`${child}addChildAt: The index ${index} supplied is out of bounds ${children.length}`);\n    }\n    if (child.parent) {\n      const currentIndex = child.parent.children.indexOf(child);\n      if (child.parent === this && currentIndex === index) {\n        return child;\n      }\n      if (currentIndex !== -1) {\n        child.parent.children.splice(currentIndex, 1);\n      }\n    }\n    if (index === children.length) {\n      children.push(child);\n    } else {\n      children.splice(index, 0, child);\n    }\n    child.parent = this;\n    child.didChange = true;\n    child._updateFlags = 15;\n    const renderGroup = this.renderGroup || this.parentRenderGroup;\n    if (renderGroup) {\n      renderGroup.addChild(child);\n    }\n    if (this.sortableChildren)\n      this.sortDirty = true;\n    this.emit(\"childAdded\", child, this, index);\n    child.emit(\"added\", this);\n    return child;\n  },\n  swapChildren(child, child2) {\n    if (child === child2) {\n      return;\n    }\n    const index1 = this.getChildIndex(child);\n    const index2 = this.getChildIndex(child2);\n    this.children[index1] = child2;\n    this.children[index2] = child;\n    const renderGroup = this.renderGroup || this.parentRenderGroup;\n    if (renderGroup) {\n      renderGroup.structureDidChange = true;\n    }\n    this._didContainerChangeTick++;\n  },\n  removeFromParent() {\n    this.parent?.removeChild(this);\n  },\n  reparentChild(...child) {\n    if (child.length === 1) {\n      return this.reparentChildAt(child[0], this.children.length);\n    }\n    child.forEach((c) => this.reparentChildAt(c, this.children.length));\n    return child[0];\n  },\n  reparentChildAt(child, index) {\n    if (child.parent === this) {\n      this.setChildIndex(child, index);\n      return child;\n    }\n    const childMat = child.worldTransform.clone();\n    child.removeFromParent();\n    this.addChildAt(child, index);\n    const newMatrix = this.worldTransform.clone();\n    newMatrix.invert();\n    childMat.prepend(newMatrix);\n    child.setFromMatrix(childMat);\n    return child;\n  },\n  replaceChild(oldChild, newChild) {\n    oldChild.updateLocalTransform();\n    this.addChildAt(newChild, this.getChildIndex(oldChild));\n    newChild.setFromMatrix(oldChild.localTransform);\n    newChild.updateLocalTransform();\n    this.removeChild(oldChild);\n  }\n};\n\nexport { childrenHelperMixin };\n//# sourceMappingURL=childrenHelperMixin.mjs.map\n","\"use strict\";\nconst collectRenderablesMixin = {\n  collectRenderables(instructionSet, renderer, currentLayer) {\n    if (this.parentRenderLayer && this.parentRenderLayer !== currentLayer || this.globalDisplayStatus < 7 || !this.includeInBuild)\n      return;\n    if (this.sortableChildren) {\n      this.sortChildren();\n    }\n    if (this.isSimple) {\n      this.collectRenderablesSimple(instructionSet, renderer, currentLayer);\n    } else if (this.renderGroup) {\n      renderer.renderPipes.renderGroup.addRenderGroup(this.renderGroup, instructionSet);\n    } else {\n      this.collectRenderablesWithEffects(instructionSet, renderer, currentLayer);\n    }\n  },\n  collectRenderablesSimple(instructionSet, renderer, currentLayer) {\n    const children = this.children;\n    const length = children.length;\n    for (let i = 0; i < length; i++) {\n      children[i].collectRenderables(instructionSet, renderer, currentLayer);\n    }\n  },\n  collectRenderablesWithEffects(instructionSet, renderer, currentLayer) {\n    const { renderPipes } = renderer;\n    for (let i = 0; i < this.effects.length; i++) {\n      const effect = this.effects[i];\n      const pipe = renderPipes[effect.pipe];\n      pipe.push(effect, this, instructionSet);\n    }\n    this.collectRenderablesSimple(instructionSet, renderer, currentLayer);\n    for (let i = this.effects.length - 1; i >= 0; i--) {\n      const effect = this.effects[i];\n      const pipe = renderPipes[effect.pipe];\n      pipe.pop(effect, this, instructionSet);\n    }\n  }\n};\n\nexport { collectRenderablesMixin };\n//# sourceMappingURL=collectRenderablesMixin.mjs.map\n","import { FilterEffect } from '../../../filters/FilterEffect.mjs';\nimport { MaskEffectManager } from '../../../rendering/mask/MaskEffectManager.mjs';\n\n\"use strict\";\nconst effectsMixin = {\n  _maskEffect: null,\n  _maskOptions: {\n    inverse: false\n  },\n  _filterEffect: null,\n  effects: [],\n  _markStructureAsChanged() {\n    const renderGroup = this.renderGroup || this.parentRenderGroup;\n    if (renderGroup) {\n      renderGroup.structureDidChange = true;\n    }\n  },\n  addEffect(effect) {\n    const index = this.effects.indexOf(effect);\n    if (index !== -1)\n      return;\n    this.effects.push(effect);\n    this.effects.sort((a, b) => a.priority - b.priority);\n    this._markStructureAsChanged();\n    this._updateIsSimple();\n  },\n  removeEffect(effect) {\n    const index = this.effects.indexOf(effect);\n    if (index === -1)\n      return;\n    this.effects.splice(index, 1);\n    this._markStructureAsChanged();\n    this._updateIsSimple();\n  },\n  set mask(value) {\n    const effect = this._maskEffect;\n    if (effect?.mask === value)\n      return;\n    if (effect) {\n      this.removeEffect(effect);\n      MaskEffectManager.returnMaskEffect(effect);\n      this._maskEffect = null;\n    }\n    if (value === null || value === void 0)\n      return;\n    this._maskEffect = MaskEffectManager.getMaskEffect(value);\n    this.addEffect(this._maskEffect);\n  },\n  get mask() {\n    return this._maskEffect?.mask;\n  },\n  setMask(options) {\n    this._maskOptions = {\n      ...this._maskOptions,\n      ...options\n    };\n    if (options.mask) {\n      this.mask = options.mask;\n    }\n    this._markStructureAsChanged();\n  },\n  set filters(value) {\n    if (!Array.isArray(value) && value)\n      value = [value];\n    const effect = this._filterEffect || (this._filterEffect = new FilterEffect());\n    value = value;\n    const hasFilters = value?.length > 0;\n    const hadFilters = effect.filters?.length > 0;\n    const didChange = hasFilters !== hadFilters;\n    value = Array.isArray(value) ? value.slice(0) : value;\n    effect.filters = Object.freeze(value);\n    if (didChange) {\n      if (hasFilters) {\n        this.addEffect(effect);\n      } else {\n        this.removeEffect(effect);\n        effect.filters = value ?? null;\n      }\n    }\n  },\n  get filters() {\n    return this._filterEffect?.filters;\n  },\n  set filterArea(value) {\n    this._filterEffect || (this._filterEffect = new FilterEffect());\n    this._filterEffect.filterArea = value;\n  },\n  get filterArea() {\n    return this._filterEffect?.filterArea;\n  }\n};\n\nexport { effectsMixin };\n//# sourceMappingURL=effectsMixin.mjs.map\n","import { deprecation, v8_0_0 } from '../../../utils/logging/deprecation.mjs';\n\n\"use strict\";\nconst findMixin = {\n  label: null,\n  get name() {\n    deprecation(v8_0_0, \"Container.name property has been removed, use Container.label instead\");\n    return this.label;\n  },\n  set name(value) {\n    deprecation(v8_0_0, \"Container.name property has been removed, use Container.label instead\");\n    this.label = value;\n  },\n  getChildByName(name, deep = false) {\n    return this.getChildByLabel(name, deep);\n  },\n  getChildByLabel(label, deep = false) {\n    const children = this.children;\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      if (child.label === label || label instanceof RegExp && label.test(child.label))\n        return child;\n    }\n    if (deep) {\n      for (let i = 0; i < children.length; i++) {\n        const child = children[i];\n        const found = child.getChildByLabel(label, true);\n        if (found) {\n          return found;\n        }\n      }\n    }\n    return null;\n  },\n  getChildrenByLabel(label, deep = false, out = []) {\n    const children = this.children;\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      if (child.label === label || label instanceof RegExp && label.test(child.label)) {\n        out.push(child);\n      }\n    }\n    if (deep) {\n      for (let i = 0; i < children.length; i++) {\n        children[i].getChildrenByLabel(label, true, out);\n      }\n    }\n    return out;\n  }\n};\n\nexport { findMixin };\n//# sourceMappingURL=findMixin.mjs.map\n","import { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { BigPool } from '../../../../utils/pool/PoolGroup.mjs';\nimport { Bounds } from '../Bounds.mjs';\n\n\"use strict\";\nconst matrixPool = BigPool.getPool(Matrix);\nconst boundsPool = BigPool.getPool(Bounds);\n\nexport { boundsPool, matrixPool };\n//# sourceMappingURL=matrixAndBoundsPool.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { Bounds } from '../bounds/Bounds.mjs';\nimport { boundsPool } from '../bounds/utils/matrixAndBoundsPool.mjs';\n\n\"use strict\";\nconst tempMatrix = new Matrix();\nconst getFastGlobalBoundsMixin = {\n  getFastGlobalBounds(factorRenderLayers, bounds) {\n    bounds || (bounds = new Bounds());\n    bounds.clear();\n    this._getGlobalBoundsRecursive(!!factorRenderLayers, bounds, this.parentRenderLayer);\n    if (!bounds.isValid) {\n      bounds.set(0, 0, 0, 0);\n    }\n    const renderGroup = this.renderGroup || this.parentRenderGroup;\n    bounds.applyMatrix(renderGroup.worldTransform);\n    return bounds;\n  },\n  _getGlobalBoundsRecursive(factorRenderLayers, bounds, currentLayer) {\n    let localBounds = bounds;\n    if (factorRenderLayers && this.parentRenderLayer && this.parentRenderLayer !== currentLayer)\n      return;\n    if (this.localDisplayStatus !== 7 || !this.measurable) {\n      return;\n    }\n    const manageEffects = !!this.effects.length;\n    if (this.renderGroup || manageEffects) {\n      localBounds = boundsPool.get().clear();\n    }\n    if (this.boundsArea) {\n      bounds.addRect(this.boundsArea, this.worldTransform);\n    } else {\n      if (this.renderPipeId) {\n        const viewBounds = this.bounds;\n        localBounds.addFrame(\n          viewBounds.minX,\n          viewBounds.minY,\n          viewBounds.maxX,\n          viewBounds.maxY,\n          this.groupTransform\n        );\n      }\n      const children = this.children;\n      for (let i = 0; i < children.length; i++) {\n        children[i]._getGlobalBoundsRecursive(factorRenderLayers, localBounds, currentLayer);\n      }\n    }\n    if (manageEffects) {\n      let advanced = false;\n      const renderGroup = this.renderGroup || this.parentRenderGroup;\n      for (let i = 0; i < this.effects.length; i++) {\n        if (this.effects[i].addBounds) {\n          if (!advanced) {\n            advanced = true;\n            localBounds.applyMatrix(renderGroup.worldTransform);\n          }\n          this.effects[i].addBounds(localBounds, true);\n        }\n      }\n      if (advanced) {\n        localBounds.applyMatrix(renderGroup.worldTransform.copyTo(tempMatrix).invert());\n      }\n      bounds.addBounds(localBounds);\n      boundsPool.return(localBounds);\n    } else if (this.renderGroup) {\n      bounds.addBounds(localBounds, this.relativeGroupTransform);\n      boundsPool.return(localBounds);\n    }\n  }\n};\n\nexport { getFastGlobalBoundsMixin };\n//# sourceMappingURL=getFastGlobalBoundsMixin.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { matrixPool, boundsPool } from './utils/matrixAndBoundsPool.mjs';\n\n\"use strict\";\nfunction getGlobalBounds(target, skipUpdateTransform, bounds) {\n  bounds.clear();\n  let parentTransform;\n  let pooledMatrix;\n  if (target.parent) {\n    if (!skipUpdateTransform) {\n      pooledMatrix = matrixPool.get().identity();\n      parentTransform = updateTransformBackwards(target, pooledMatrix);\n    } else {\n      parentTransform = target.parent.worldTransform;\n    }\n  } else {\n    parentTransform = Matrix.IDENTITY;\n  }\n  _getGlobalBounds(target, bounds, parentTransform, skipUpdateTransform);\n  if (pooledMatrix) {\n    matrixPool.return(pooledMatrix);\n  }\n  if (!bounds.isValid) {\n    bounds.set(0, 0, 0, 0);\n  }\n  return bounds;\n}\nfunction _getGlobalBounds(target, bounds, parentTransform, skipUpdateTransform) {\n  if (!target.visible || !target.measurable)\n    return;\n  let worldTransform;\n  if (!skipUpdateTransform) {\n    target.updateLocalTransform();\n    worldTransform = matrixPool.get();\n    worldTransform.appendFrom(target.localTransform, parentTransform);\n  } else {\n    worldTransform = target.worldTransform;\n  }\n  const parentBounds = bounds;\n  const preserveBounds = !!target.effects.length;\n  if (preserveBounds) {\n    bounds = boundsPool.get().clear();\n  }\n  if (target.boundsArea) {\n    bounds.addRect(target.boundsArea, worldTransform);\n  } else {\n    const renderableBounds = target.bounds;\n    if (renderableBounds && !renderableBounds.isEmpty()) {\n      bounds.matrix = worldTransform;\n      bounds.addBounds(renderableBounds);\n    }\n    for (let i = 0; i < target.children.length; i++) {\n      _getGlobalBounds(target.children[i], bounds, worldTransform, skipUpdateTransform);\n    }\n  }\n  if (preserveBounds) {\n    for (let i = 0; i < target.effects.length; i++) {\n      target.effects[i].addBounds?.(bounds);\n    }\n    parentBounds.addBounds(bounds, Matrix.IDENTITY);\n    boundsPool.return(bounds);\n  }\n  if (!skipUpdateTransform) {\n    matrixPool.return(worldTransform);\n  }\n}\nfunction updateTransformBackwards(target, parentTransform) {\n  const parent = target.parent;\n  if (parent) {\n    updateTransformBackwards(parent, parentTransform);\n    parent.updateLocalTransform();\n    parentTransform.append(parent.localTransform);\n  }\n  return parentTransform;\n}\n\nexport { getGlobalBounds, updateTransformBackwards };\n//# sourceMappingURL=getGlobalBounds.mjs.map\n","\"use strict\";\nfunction multiplyHexColors(color1, color2) {\n  if (color1 === 16777215 || !color2)\n    return color2;\n  if (color2 === 16777215 || !color1)\n    return color1;\n  const r1 = color1 >> 16 & 255;\n  const g1 = color1 >> 8 & 255;\n  const b1 = color1 & 255;\n  const r2 = color2 >> 16 & 255;\n  const g2 = color2 >> 8 & 255;\n  const b2 = color2 & 255;\n  const r = r1 * r2 / 255 | 0;\n  const g = g1 * g2 / 255 | 0;\n  const b = b1 * b2 / 255 | 0;\n  return (r << 16) + (g << 8) + b;\n}\n\nexport { multiplyHexColors };\n//# sourceMappingURL=multiplyHexColors.mjs.map\n","import { multiplyHexColors } from './multiplyHexColors.mjs';\n\n\"use strict\";\nconst WHITE_BGR = 16777215;\nfunction multiplyColors(localBGRColor, parentBGRColor) {\n  if (localBGRColor === WHITE_BGR) {\n    return parentBGRColor;\n  }\n  if (parentBGRColor === WHITE_BGR) {\n    return localBGRColor;\n  }\n  return multiplyHexColors(localBGRColor, parentBGRColor);\n}\n\nexport { multiplyColors };\n//# sourceMappingURL=multiplyColors.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { updateTransformBackwards } from '../bounds/getGlobalBounds.mjs';\nimport { matrixPool } from '../bounds/utils/matrixAndBoundsPool.mjs';\nimport { multiplyColors } from '../utils/multiplyColors.mjs';\n\n\"use strict\";\nfunction bgr2rgb(color) {\n  return ((color & 255) << 16) + (color & 65280) + (color >> 16 & 255);\n}\nconst getGlobalMixin = {\n  getGlobalAlpha(skipUpdate) {\n    if (skipUpdate) {\n      if (this.renderGroup) {\n        return this.renderGroup.worldAlpha;\n      }\n      if (this.parentRenderGroup) {\n        return this.parentRenderGroup.worldAlpha * this.alpha;\n      }\n      return this.alpha;\n    }\n    let alpha = this.alpha;\n    let current = this.parent;\n    while (current) {\n      alpha *= current.alpha;\n      current = current.parent;\n    }\n    return alpha;\n  },\n  getGlobalTransform(matrix = new Matrix(), skipUpdate) {\n    if (skipUpdate) {\n      return matrix.copyFrom(this.worldTransform);\n    }\n    this.updateLocalTransform();\n    const parentTransform = updateTransformBackwards(this, matrixPool.get().identity());\n    matrix.appendFrom(this.localTransform, parentTransform);\n    matrixPool.return(parentTransform);\n    return matrix;\n  },\n  getGlobalTint(skipUpdate) {\n    if (skipUpdate) {\n      if (this.renderGroup) {\n        return bgr2rgb(this.renderGroup.worldColor);\n      }\n      if (this.parentRenderGroup) {\n        return bgr2rgb(\n          multiplyColors(this.localColor, this.parentRenderGroup.worldColor)\n        );\n      }\n      return this.tint;\n    }\n    let color = this.localColor;\n    let parent = this.parent;\n    while (parent) {\n      color = multiplyColors(color, parent.localColor);\n      parent = parent.parent;\n    }\n    return bgr2rgb(color);\n  }\n};\n\nexport { bgr2rgb, getGlobalMixin };\n//# sourceMappingURL=getGlobalMixin.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { matrixPool, boundsPool } from './utils/matrixAndBoundsPool.mjs';\n\n\"use strict\";\nfunction getLocalBounds(target, bounds, relativeMatrix) {\n  bounds.clear();\n  relativeMatrix || (relativeMatrix = Matrix.IDENTITY);\n  _getLocalBounds(target, bounds, relativeMatrix, target, true);\n  if (!bounds.isValid) {\n    bounds.set(0, 0, 0, 0);\n  }\n  return bounds;\n}\nfunction _getLocalBounds(target, bounds, parentTransform, rootContainer, isRoot) {\n  let relativeTransform;\n  if (!isRoot) {\n    if (!target.visible || !target.measurable)\n      return;\n    target.updateLocalTransform();\n    const localTransform = target.localTransform;\n    relativeTransform = matrixPool.get();\n    relativeTransform.appendFrom(localTransform, parentTransform);\n  } else {\n    relativeTransform = matrixPool.get();\n    relativeTransform = parentTransform.copyTo(relativeTransform);\n  }\n  const parentBounds = bounds;\n  const preserveBounds = !!target.effects.length;\n  if (preserveBounds) {\n    bounds = boundsPool.get().clear();\n  }\n  if (target.boundsArea) {\n    bounds.addRect(target.boundsArea, relativeTransform);\n  } else {\n    if (target.renderPipeId) {\n      bounds.matrix = relativeTransform;\n      bounds.addBounds(target.bounds);\n    }\n    const children = target.children;\n    for (let i = 0; i < children.length; i++) {\n      _getLocalBounds(children[i], bounds, relativeTransform, rootContainer, false);\n    }\n  }\n  if (preserveBounds) {\n    for (let i = 0; i < target.effects.length; i++) {\n      target.effects[i].addLocalBounds?.(bounds, rootContainer);\n    }\n    parentBounds.addBounds(bounds, Matrix.IDENTITY);\n    boundsPool.return(bounds);\n  }\n  matrixPool.return(relativeTransform);\n}\n\nexport { getLocalBounds };\n//# sourceMappingURL=getLocalBounds.mjs.map\n","\"use strict\";\nfunction checkChildrenDidChange(container, previousData) {\n  const children = container.children;\n  for (let i = 0; i < children.length; i++) {\n    const child = children[i];\n    const uid = child.uid;\n    const didChange = (child._didViewChangeTick & 65535) << 16 | child._didContainerChangeTick & 65535;\n    const index = previousData.index;\n    if (previousData.data[index] !== uid || previousData.data[index + 1] !== didChange) {\n      previousData.data[previousData.index] = uid;\n      previousData.data[previousData.index + 1] = didChange;\n      previousData.didChange = true;\n    }\n    previousData.index = index + 2;\n    if (child.children.length) {\n      checkChildrenDidChange(child, previousData);\n    }\n  }\n  return previousData.didChange;\n}\n\nexport { checkChildrenDidChange };\n//# sourceMappingURL=checkChildrenDidChange.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { Bounds } from '../bounds/Bounds.mjs';\nimport { getGlobalBounds } from '../bounds/getGlobalBounds.mjs';\nimport { getLocalBounds } from '../bounds/getLocalBounds.mjs';\nimport { checkChildrenDidChange } from '../utils/checkChildrenDidChange.mjs';\n\n\"use strict\";\nconst tempMatrix = new Matrix();\nconst measureMixin = {\n  _localBoundsCacheId: -1,\n  _localBoundsCacheData: null,\n  _setWidth(value, localWidth) {\n    const sign = Math.sign(this.scale.x) || 1;\n    if (localWidth !== 0) {\n      this.scale.x = value / localWidth * sign;\n    } else {\n      this.scale.x = sign;\n    }\n  },\n  _setHeight(value, localHeight) {\n    const sign = Math.sign(this.scale.y) || 1;\n    if (localHeight !== 0) {\n      this.scale.y = value / localHeight * sign;\n    } else {\n      this.scale.y = sign;\n    }\n  },\n  getLocalBounds() {\n    if (!this._localBoundsCacheData) {\n      this._localBoundsCacheData = {\n        data: [],\n        index: 1,\n        didChange: false,\n        localBounds: new Bounds()\n      };\n    }\n    const localBoundsCacheData = this._localBoundsCacheData;\n    localBoundsCacheData.index = 1;\n    localBoundsCacheData.didChange = false;\n    if (localBoundsCacheData.data[0] !== this._didViewChangeTick) {\n      localBoundsCacheData.didChange = true;\n      localBoundsCacheData.data[0] = this._didViewChangeTick;\n    }\n    checkChildrenDidChange(this, localBoundsCacheData);\n    if (localBoundsCacheData.didChange) {\n      getLocalBounds(this, localBoundsCacheData.localBounds, tempMatrix);\n    }\n    return localBoundsCacheData.localBounds;\n  },\n  getBounds(skipUpdate, bounds) {\n    return getGlobalBounds(this, skipUpdate, bounds || new Bounds());\n  }\n};\n\nexport { measureMixin };\n//# sourceMappingURL=measureMixin.mjs.map\n","\"use strict\";\nconst onRenderMixin = {\n  _onRender: null,\n  set onRender(func) {\n    const renderGroup = this.renderGroup || this.parentRenderGroup;\n    if (!func) {\n      if (this._onRender) {\n        renderGroup?.removeOnRender(this);\n      }\n      this._onRender = null;\n      return;\n    }\n    if (!this._onRender) {\n      renderGroup?.addOnRender(this);\n    }\n    this._onRender = func;\n  },\n  get onRender() {\n    return this._onRender;\n  }\n};\n\nexport { onRenderMixin };\n//# sourceMappingURL=onRenderMixin.mjs.map\n","\"use strict\";\nconst sortMixin = {\n  _zIndex: 0,\n  sortDirty: false,\n  sortableChildren: false,\n  get zIndex() {\n    return this._zIndex;\n  },\n  set zIndex(value) {\n    if (this._zIndex === value)\n      return;\n    this._zIndex = value;\n    this.depthOfChildModified();\n  },\n  depthOfChildModified() {\n    if (this.parent) {\n      this.parent.sortableChildren = true;\n      this.parent.sortDirty = true;\n    }\n    if (this.parentRenderGroup) {\n      this.parentRenderGroup.structureDidChange = true;\n    }\n  },\n  sortChildren() {\n    if (!this.sortDirty)\n      return;\n    this.sortDirty = false;\n    this.children.sort(sortChildren);\n  }\n};\nfunction sortChildren(a, b) {\n  return a._zIndex - b._zIndex;\n}\n\nexport { sortMixin };\n//# sourceMappingURL=sortMixin.mjs.map\n","import { Point } from '../../../maths/point/Point.mjs';\nimport { matrixPool } from '../bounds/utils/matrixAndBoundsPool.mjs';\n\n\"use strict\";\nconst toLocalGlobalMixin = {\n  getGlobalPosition(point = new Point(), skipUpdate = false) {\n    if (this.parent) {\n      this.parent.toGlobal(this._position, point, skipUpdate);\n    } else {\n      point.x = this._position.x;\n      point.y = this._position.y;\n    }\n    return point;\n  },\n  toGlobal(position, point, skipUpdate = false) {\n    const globalMatrix = this.getGlobalTransform(matrixPool.get(), skipUpdate);\n    point = globalMatrix.apply(position, point);\n    matrixPool.return(globalMatrix);\n    return point;\n  },\n  toLocal(position, from, point, skipUpdate) {\n    if (from) {\n      position = from.toGlobal(position, point, skipUpdate);\n    }\n    const globalMatrix = this.getGlobalTransform(matrixPool.get(), skipUpdate);\n    point = globalMatrix.applyInverse(position, point);\n    matrixPool.return(globalMatrix);\n    return point;\n  }\n};\n\nexport { toLocalGlobalMixin };\n//# sourceMappingURL=toLocalGlobalMixin.mjs.map\n","import { Matrix } from '../../maths/matrix/Matrix.mjs';\nimport { InstructionSet } from '../../rendering/renderers/shared/instructions/InstructionSet.mjs';\nimport { TexturePool } from '../../rendering/renderers/shared/texture/TexturePool.mjs';\n\n\"use strict\";\nclass RenderGroup {\n  constructor() {\n    this.renderPipeId = \"renderGroup\";\n    this.root = null;\n    this.canBundle = false;\n    this.renderGroupParent = null;\n    this.renderGroupChildren = [];\n    this.worldTransform = new Matrix();\n    this.worldColorAlpha = 4294967295;\n    this.worldColor = 16777215;\n    this.worldAlpha = 1;\n    // these updates are transform changes..\n    this.childrenToUpdate = /* @__PURE__ */ Object.create(null);\n    this.updateTick = 0;\n    this.gcTick = 0;\n    // these update are renderable changes..\n    this.childrenRenderablesToUpdate = { list: [], index: 0 };\n    // other\n    this.structureDidChange = true;\n    this.instructionSet = new InstructionSet();\n    this._onRenderContainers = [];\n    /**\n     * Indicates if the cached texture needs to be updated.\n     * @default true\n     */\n    this.textureNeedsUpdate = true;\n    /**\n     * Indicates if the container should be cached as a texture.\n     * @default false\n     */\n    this.isCachedAsTexture = false;\n    this._matrixDirty = 7;\n  }\n  init(root) {\n    this.root = root;\n    if (root._onRender)\n      this.addOnRender(root);\n    root.didChange = true;\n    const children = root.children;\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      child._updateFlags = 15;\n      this.addChild(child);\n    }\n  }\n  enableCacheAsTexture(options = {}) {\n    this.textureOptions = options;\n    this.isCachedAsTexture = true;\n    this.textureNeedsUpdate = true;\n  }\n  disableCacheAsTexture() {\n    this.isCachedAsTexture = false;\n    if (this.texture) {\n      TexturePool.returnTexture(this.texture, true);\n      this.texture = null;\n    }\n  }\n  updateCacheTexture() {\n    this.textureNeedsUpdate = true;\n    const cachedParent = this._parentCacheAsTextureRenderGroup;\n    if (cachedParent && !cachedParent.textureNeedsUpdate) {\n      cachedParent.updateCacheTexture();\n    }\n  }\n  reset() {\n    this.renderGroupChildren.length = 0;\n    for (const i in this.childrenToUpdate) {\n      const childrenAtDepth = this.childrenToUpdate[i];\n      childrenAtDepth.list.fill(null);\n      childrenAtDepth.index = 0;\n    }\n    this.childrenRenderablesToUpdate.index = 0;\n    this.childrenRenderablesToUpdate.list.fill(null);\n    this.root = null;\n    this.updateTick = 0;\n    this.structureDidChange = true;\n    this._onRenderContainers.length = 0;\n    this.renderGroupParent = null;\n    this.disableCacheAsTexture();\n  }\n  get localTransform() {\n    return this.root.localTransform;\n  }\n  addRenderGroupChild(renderGroupChild) {\n    if (renderGroupChild.renderGroupParent) {\n      renderGroupChild.renderGroupParent._removeRenderGroupChild(renderGroupChild);\n    }\n    renderGroupChild.renderGroupParent = this;\n    this.renderGroupChildren.push(renderGroupChild);\n  }\n  _removeRenderGroupChild(renderGroupChild) {\n    const index = this.renderGroupChildren.indexOf(renderGroupChild);\n    if (index > -1) {\n      this.renderGroupChildren.splice(index, 1);\n    }\n    renderGroupChild.renderGroupParent = null;\n  }\n  addChild(child) {\n    this.structureDidChange = true;\n    child.parentRenderGroup = this;\n    child.updateTick = -1;\n    if (child.parent === this.root) {\n      child.relativeRenderGroupDepth = 1;\n    } else {\n      child.relativeRenderGroupDepth = child.parent.relativeRenderGroupDepth + 1;\n    }\n    child.didChange = true;\n    this.onChildUpdate(child);\n    if (child.renderGroup) {\n      this.addRenderGroupChild(child.renderGroup);\n      return;\n    }\n    if (child._onRender)\n      this.addOnRender(child);\n    const children = child.children;\n    for (let i = 0; i < children.length; i++) {\n      this.addChild(children[i]);\n    }\n  }\n  removeChild(child) {\n    this.structureDidChange = true;\n    if (child._onRender) {\n      if (!child.renderGroup) {\n        this.removeOnRender(child);\n      }\n    }\n    child.parentRenderGroup = null;\n    if (child.renderGroup) {\n      this._removeRenderGroupChild(child.renderGroup);\n      return;\n    }\n    const children = child.children;\n    for (let i = 0; i < children.length; i++) {\n      this.removeChild(children[i]);\n    }\n  }\n  removeChildren(children) {\n    for (let i = 0; i < children.length; i++) {\n      this.removeChild(children[i]);\n    }\n  }\n  onChildUpdate(child) {\n    let childrenToUpdate = this.childrenToUpdate[child.relativeRenderGroupDepth];\n    if (!childrenToUpdate) {\n      childrenToUpdate = this.childrenToUpdate[child.relativeRenderGroupDepth] = {\n        index: 0,\n        list: []\n      };\n    }\n    childrenToUpdate.list[childrenToUpdate.index++] = child;\n  }\n  updateRenderable(renderable) {\n    if (renderable.globalDisplayStatus < 7)\n      return;\n    this.instructionSet.renderPipes[renderable.renderPipeId].updateRenderable(renderable);\n    renderable.didViewUpdate = false;\n  }\n  onChildViewUpdate(child) {\n    this.childrenRenderablesToUpdate.list[this.childrenRenderablesToUpdate.index++] = child;\n  }\n  get isRenderable() {\n    return this.root.localDisplayStatus === 7 && this.worldAlpha > 0;\n  }\n  /**\n   * adding a container to the onRender list will make sure the user function\n   * passed in to the user defined 'onRender` callBack\n   * @param container - the container to add to the onRender list\n   */\n  addOnRender(container) {\n    this._onRenderContainers.push(container);\n  }\n  removeOnRender(container) {\n    this._onRenderContainers.splice(this._onRenderContainers.indexOf(container), 1);\n  }\n  runOnRender(renderer) {\n    for (let i = 0; i < this._onRenderContainers.length; i++) {\n      this._onRenderContainers[i]._onRender(renderer);\n    }\n  }\n  destroy() {\n    this.disableCacheAsTexture();\n    this.renderGroupParent = null;\n    this.root = null;\n    this.childrenRenderablesToUpdate = null;\n    this.childrenToUpdate = null;\n    this.renderGroupChildren = null;\n    this._onRenderContainers = null;\n    this.instructionSet = null;\n  }\n  getChildren(out = []) {\n    const children = this.root.children;\n    for (let i = 0; i < children.length; i++) {\n      this._getChildren(children[i], out);\n    }\n    return out;\n  }\n  _getChildren(container, out = []) {\n    out.push(container);\n    if (container.renderGroup)\n      return out;\n    const children = container.children;\n    for (let i = 0; i < children.length; i++) {\n      this._getChildren(children[i], out);\n    }\n    return out;\n  }\n  invalidateMatrices() {\n    this._matrixDirty = 7;\n  }\n  /**\n   * Returns the inverse of the world transform matrix.\n   * @returns {Matrix} The inverse of the world transform matrix.\n   */\n  get inverseWorldTransform() {\n    if ((this._matrixDirty & 1) === 0)\n      return this._inverseWorldTransform;\n    this._matrixDirty &= ~1;\n    this._inverseWorldTransform || (this._inverseWorldTransform = new Matrix());\n    return this._inverseWorldTransform.copyFrom(this.worldTransform).invert();\n  }\n  /**\n   * Returns the inverse of the texture offset transform matrix.\n   * @returns {Matrix} The inverse of the texture offset transform matrix.\n   */\n  get textureOffsetInverseTransform() {\n    if ((this._matrixDirty & 2) === 0)\n      return this._textureOffsetInverseTransform;\n    this._matrixDirty &= ~2;\n    this._textureOffsetInverseTransform || (this._textureOffsetInverseTransform = new Matrix());\n    return this._textureOffsetInverseTransform.copyFrom(this.inverseWorldTransform).translate(\n      -this._textureBounds.x,\n      -this._textureBounds.y\n    );\n  }\n  /**\n   * Returns the inverse of the parent texture transform matrix.\n   * This is used to properly transform coordinates when rendering into cached textures.\n   * @returns {Matrix} The inverse of the parent texture transform matrix.\n   */\n  get inverseParentTextureTransform() {\n    if ((this._matrixDirty & 4) === 0)\n      return this._inverseParentTextureTransform;\n    this._matrixDirty &= ~4;\n    const parentCacheAsTexture = this._parentCacheAsTextureRenderGroup;\n    if (parentCacheAsTexture) {\n      this._inverseParentTextureTransform || (this._inverseParentTextureTransform = new Matrix());\n      return this._inverseParentTextureTransform.copyFrom(this.worldTransform).prepend(parentCacheAsTexture.inverseWorldTransform).translate(\n        -parentCacheAsTexture._textureBounds.x,\n        -parentCacheAsTexture._textureBounds.y\n      );\n    }\n    return this.worldTransform;\n  }\n  /**\n   * Returns a matrix that transforms coordinates to the correct coordinate space of the texture being rendered to.\n   * This is the texture offset inverse transform of the closest parent RenderGroup that is cached as a texture.\n   * @returns {Matrix | null} The transform matrix for the cached texture coordinate space,\n   * or null if no parent is cached as texture.\n   */\n  get cacheToLocalTransform() {\n    if (this.isCachedAsTexture) {\n      return this.textureOffsetInverseTransform;\n    }\n    if (!this._parentCacheAsTextureRenderGroup)\n      return null;\n    return this._parentCacheAsTextureRenderGroup.textureOffsetInverseTransform;\n  }\n}\n\nexport { RenderGroup };\n//# sourceMappingURL=RenderGroup.mjs.map\n","import EventEmitter from 'eventemitter3';\nimport { Color } from '../../color/Color.mjs';\nimport { cullingMixin } from '../../culling/cullingMixin.mjs';\nimport { extensions } from '../../extensions/Extensions.mjs';\nimport { Matrix } from '../../maths/matrix/Matrix.mjs';\nimport { RAD_TO_DEG, DEG_TO_RAD } from '../../maths/misc/const.mjs';\nimport { ObservablePoint } from '../../maths/point/ObservablePoint.mjs';\nimport { uid } from '../../utils/data/uid.mjs';\nimport { deprecation, v8_0_0 } from '../../utils/logging/deprecation.mjs';\nimport { warn } from '../../utils/logging/warn.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { cacheAsTextureMixin } from './container-mixins/cacheAsTextureMixin.mjs';\nimport { childrenHelperMixin } from './container-mixins/childrenHelperMixin.mjs';\nimport { collectRenderablesMixin } from './container-mixins/collectRenderablesMixin.mjs';\nimport { effectsMixin } from './container-mixins/effectsMixin.mjs';\nimport { findMixin } from './container-mixins/findMixin.mjs';\nimport { getFastGlobalBoundsMixin } from './container-mixins/getFastGlobalBoundsMixin.mjs';\nimport { bgr2rgb, getGlobalMixin } from './container-mixins/getGlobalMixin.mjs';\nimport { measureMixin } from './container-mixins/measureMixin.mjs';\nimport { onRenderMixin } from './container-mixins/onRenderMixin.mjs';\nimport { sortMixin } from './container-mixins/sortMixin.mjs';\nimport { toLocalGlobalMixin } from './container-mixins/toLocalGlobalMixin.mjs';\nimport { RenderGroup } from './RenderGroup.mjs';\nimport { assignWithIgnore } from './utils/assignWithIgnore.mjs';\n\n\"use strict\";\nconst defaultSkew = new ObservablePoint(null);\nconst defaultPivot = new ObservablePoint(null);\nconst defaultScale = new ObservablePoint(null, 1, 1);\nconst defaultOrigin = new ObservablePoint(null);\nconst UPDATE_COLOR = 1;\nconst UPDATE_BLEND = 2;\nconst UPDATE_VISIBLE = 4;\nconst UPDATE_TRANSFORM = 8;\nclass Container extends EventEmitter {\n  constructor(options = {}) {\n    super();\n    /**\n     * unique id for this container\n     * @internal\n     */\n    this.uid = uid(\"renderable\");\n    /** @private */\n    this._updateFlags = 15;\n    // the render group this container owns\n    /** @private */\n    this.renderGroup = null;\n    // the render group this container belongs to\n    /** @private */\n    this.parentRenderGroup = null;\n    // the index of the container in the render group\n    /** @private */\n    this.parentRenderGroupIndex = 0;\n    // set to true if the container has changed. It is reset once the changes have been applied\n    // by the transform system\n    // its here to stop ensure that when things change, only one update gets registers with the transform system\n    /** @private */\n    this.didChange = false;\n    // same as above, but for the renderable\n    /** @private */\n    this.didViewUpdate = false;\n    // how deep is the container relative to its render group..\n    // unless the element is the root render group - it will be relative to its parent\n    /** @private */\n    this.relativeRenderGroupDepth = 0;\n    /**\n     * The array of children of this container. Each child must be a Container or extend from it.\n     *\n     * The array is read-only, but its contents can be modified using Container methods.\n     * @example\n     * ```ts\n     * // Access children\n     * const firstChild = container.children[0];\n     * const lastChild = container.children[container.children.length - 1];\n     * ```\n     * @readonly\n     * @see {@link Container#addChild} For adding children\n     * @see {@link Container#removeChild} For removing children\n     */\n    this.children = [];\n    /**\n     * The display object container that contains this display object.\n     * This represents the parent-child relationship in the display tree.\n     * @example\n     * ```ts\n     * // Basic parent access\n     * const parent = sprite.parent;\n     *\n     * // Walk up the tree\n     * let current = sprite;\n     * while (current.parent) {\n     *     console.log('Level up:', current.parent.constructor.name);\n     *     current = current.parent;\n     * }\n     * ```\n     * @readonly\n     * @see {@link Container#addChild} For adding to a parent\n     * @see {@link Container#removeChild} For removing from parent\n     */\n    this.parent = null;\n    // used internally for changing up the render order.. mainly for masks and filters\n    // TODO setting this should cause a rebuild??\n    /** @private */\n    this.includeInBuild = true;\n    /** @private */\n    this.measurable = true;\n    /** @private */\n    this.isSimple = true;\n    /**\n     * The RenderLayer this container belongs to, if any.\n     * If it belongs to a RenderLayer, it will be rendered from the RenderLayer's position in the scene.\n     * @readonly\n     * @advanced\n     */\n    this.parentRenderLayer = null;\n    // / /////////////Transform related props//////////////\n    // used by the transform system to check if a container needs to be updated that frame\n    // if the tick matches the current transform system tick, it is not updated again\n    /** @internal */\n    this.updateTick = -1;\n    /**\n     * Current transform of the object based on local factors: position, scale, other stuff.\n     * This matrix represents the local transformation without any parent influence.\n     * @example\n     * ```ts\n     * // Basic transform access\n     * const localMatrix = sprite.localTransform;\n     * console.log(localMatrix.toString());\n     * ```\n     * @readonly\n     * @see {@link Container#worldTransform} For global transform\n     * @see {@link Container#groupTransform} For render group transform\n     */\n    this.localTransform = new Matrix();\n    /**\n     * The relative group transform is a transform relative to the render group it belongs too. It will include all parent\n     * transforms and up to the render group (think of it as kind of like a stage - but the stage can be nested).\n     * If this container is is self a render group matrix will be relative to its parent render group\n     * @readonly\n     * @advanced\n     */\n    this.relativeGroupTransform = new Matrix();\n    /**\n     * The group transform is a transform relative to the render group it belongs too.\n     * If this container is render group then this will be an identity matrix. other wise it\n     * will be the same as the relativeGroupTransform.\n     * Use this value when actually rendering things to the screen\n     * @readonly\n     * @advanced\n     */\n    this.groupTransform = this.relativeGroupTransform;\n    /**\n     * Whether this object has been destroyed. If true, the object should no longer be used.\n     * After an object is destroyed, all of its functionality is disabled and references are removed.\n     * @example\n     * ```ts\n     * // Cleanup with destroy\n     * sprite.destroy();\n     * console.log(sprite.destroyed); // true\n     * ```\n     * @default false\n     * @see {@link Container#destroy} For destroying objects\n     */\n    this.destroyed = false;\n    // transform data..\n    /**\n     * The coordinate of the object relative to the local coordinates of the parent.\n     * @internal\n     */\n    this._position = new ObservablePoint(this, 0, 0);\n    /**\n     * The scale factor of the object.\n     * @internal\n     */\n    this._scale = defaultScale;\n    /**\n     * The pivot point of the container that it rotates around.\n     * @internal\n     */\n    this._pivot = defaultPivot;\n    /**\n     * The origin point around which the container rotates and scales.\n     * Unlike pivot, changing origin will not move the container's position.\n     * @private\n     */\n    this._origin = defaultOrigin;\n    /**\n     * The skew amount, on the x and y axis.\n     * @internal\n     */\n    this._skew = defaultSkew;\n    /**\n     * The X-coordinate value of the normalized local X axis,\n     * the first column of the local transformation matrix without a scale.\n     * @internal\n     */\n    this._cx = 1;\n    /**\n     * The Y-coordinate value of the normalized local X axis,\n     * the first column of the local transformation matrix without a scale.\n     * @internal\n     */\n    this._sx = 0;\n    /**\n     * The X-coordinate value of the normalized local Y axis,\n     * the second column of the local transformation matrix without a scale.\n     * @internal\n     */\n    this._cy = 0;\n    /**\n     * The Y-coordinate value of the normalized local Y axis,\n     * the second column of the local transformation matrix without a scale.\n     * @internal\n     */\n    this._sy = 1;\n    /**\n     * The rotation amount.\n     * @internal\n     */\n    this._rotation = 0;\n    // / COLOR related props //////////////\n    // color stored as ABGR\n    /** @internal */\n    this.localColor = 16777215;\n    /** @internal */\n    this.localAlpha = 1;\n    /** @internal */\n    this.groupAlpha = 1;\n    // A\n    /** @internal */\n    this.groupColor = 16777215;\n    // BGR\n    /** @internal */\n    this.groupColorAlpha = 4294967295;\n    // ABGR\n    // / BLEND related props //////////////\n    /** @internal */\n    this.localBlendMode = \"inherit\";\n    /** @internal */\n    this.groupBlendMode = \"normal\";\n    // / VISIBILITY related props //////////////\n    // visibility\n    // 0b11\n    // first bit is visible, second bit is renderable\n    /**\n     * This property holds three bits: culled, visible, renderable\n     * the third bit represents culling (0 = culled, 1 = not culled) 0b100\n     * the second bit represents visibility (0 = not visible, 1 = visible) 0b010\n     * the first bit represents renderable (0 = not renderable, 1 = renderable) 0b001\n     * @internal\n     */\n    this.localDisplayStatus = 7;\n    // 0b11 | 0b10 | 0b01 | 0b00\n    /** @internal */\n    this.globalDisplayStatus = 7;\n    /**\n     * A value that increments each time the containe is modified\n     * eg children added, removed etc\n     * @ignore\n     */\n    this._didContainerChangeTick = 0;\n    /**\n     * A value that increments each time the container view is modified\n     * eg texture swap, geometry change etc\n     * @ignore\n     */\n    this._didViewChangeTick = 0;\n    /**\n     * property that tracks if the container transform has changed\n     * @ignore\n     */\n    this._didLocalTransformChangeId = -1;\n    this.effects = [];\n    assignWithIgnore(this, options, {\n      children: true,\n      parent: true,\n      effects: true\n    });\n    options.children?.forEach((child) => this.addChild(child));\n    options.parent?.addChild(this);\n  }\n  /**\n   * Mixes all enumerable properties and methods from a source object to Container.\n   * @param source - The source of properties and methods to mix in.\n   * @deprecated since 8.8.0\n   */\n  static mixin(source) {\n    deprecation(\"8.8.0\", \"Container.mixin is deprecated, please use extensions.mixin instead.\");\n    extensions.mixin(Container, source);\n  }\n  // = 'default';\n  /**\n   * We now use the _didContainerChangeTick and _didViewChangeTick to track changes\n   * @deprecated since 8.2.6\n   * @ignore\n   */\n  set _didChangeId(value) {\n    this._didViewChangeTick = value >> 12 & 4095;\n    this._didContainerChangeTick = value & 4095;\n  }\n  /** @ignore */\n  get _didChangeId() {\n    return this._didContainerChangeTick & 4095 | (this._didViewChangeTick & 4095) << 12;\n  }\n  /**\n   * Adds one or more children to the container.\n   * The children will be rendered as part of this container's display list.\n   * @example\n   * ```ts\n   * // Add a single child\n   * container.addChild(sprite);\n   *\n   * // Add multiple children\n   * container.addChild(background, player, foreground);\n   *\n   * // Add with type checking\n   * const sprite = container.addChild<Sprite>(new Sprite(texture));\n   * sprite.tint = 'red';\n   * ```\n   * @param children - The Container(s) to add to the container\n   * @returns The first child that was added\n   * @see {@link Container#removeChild} For removing children\n   * @see {@link Container#addChildAt} For adding at specific index\n   */\n  addChild(...children) {\n    if (!this.allowChildren) {\n      deprecation(v8_0_0, \"addChild: Only Containers will be allowed to add children in v8.0.0\");\n    }\n    if (children.length > 1) {\n      for (let i = 0; i < children.length; i++) {\n        this.addChild(children[i]);\n      }\n      return children[0];\n    }\n    const child = children[0];\n    const renderGroup = this.renderGroup || this.parentRenderGroup;\n    if (child.parent === this) {\n      this.children.splice(this.children.indexOf(child), 1);\n      this.children.push(child);\n      if (renderGroup) {\n        renderGroup.structureDidChange = true;\n      }\n      return child;\n    }\n    if (child.parent) {\n      child.parent.removeChild(child);\n    }\n    this.children.push(child);\n    if (this.sortableChildren)\n      this.sortDirty = true;\n    child.parent = this;\n    child.didChange = true;\n    child._updateFlags = 15;\n    if (renderGroup) {\n      renderGroup.addChild(child);\n    }\n    this.emit(\"childAdded\", child, this, this.children.length - 1);\n    child.emit(\"added\", this);\n    this._didViewChangeTick++;\n    if (child._zIndex !== 0) {\n      child.depthOfChildModified();\n    }\n    return child;\n  }\n  /**\n   * Removes one or more children from the container.\n   * When removing multiple children, events will be triggered for each child in sequence.\n   * @example\n   * ```ts\n   * // Remove a single child\n   * const removed = container.removeChild(sprite);\n   *\n   * // Remove multiple children\n   * const bg = container.removeChild(background, player, userInterface);\n   *\n   * // Remove with type checking\n   * const sprite = container.removeChild<Sprite>(childSprite);\n   * sprite.texture = newTexture;\n   * ```\n   * @param children - The Container(s) to remove\n   * @returns The first child that was removed\n   * @see {@link Container#addChild} For adding children\n   * @see {@link Container#removeChildren} For removing multiple children\n   */\n  removeChild(...children) {\n    if (children.length > 1) {\n      for (let i = 0; i < children.length; i++) {\n        this.removeChild(children[i]);\n      }\n      return children[0];\n    }\n    const child = children[0];\n    const index = this.children.indexOf(child);\n    if (index > -1) {\n      this._didViewChangeTick++;\n      this.children.splice(index, 1);\n      if (this.renderGroup) {\n        this.renderGroup.removeChild(child);\n      } else if (this.parentRenderGroup) {\n        this.parentRenderGroup.removeChild(child);\n      }\n      if (child.parentRenderLayer) {\n        child.parentRenderLayer.detach(child);\n      }\n      child.parent = null;\n      this.emit(\"childRemoved\", child, this, index);\n      child.emit(\"removed\", this);\n    }\n    return child;\n  }\n  /** @ignore */\n  _onUpdate(point) {\n    if (point) {\n      if (point === this._skew) {\n        this._updateSkew();\n      }\n    }\n    this._didContainerChangeTick++;\n    if (this.didChange)\n      return;\n    this.didChange = true;\n    if (this.parentRenderGroup) {\n      this.parentRenderGroup.onChildUpdate(this);\n    }\n  }\n  set isRenderGroup(value) {\n    if (!!this.renderGroup === value)\n      return;\n    if (value) {\n      this.enableRenderGroup();\n    } else {\n      this.disableRenderGroup();\n    }\n  }\n  /**\n   * Returns true if this container is a render group.\n   * This means that it will be rendered as a separate pass, with its own set of instructions\n   * @advanced\n   */\n  get isRenderGroup() {\n    return !!this.renderGroup;\n  }\n  /**\n   * Calling this enables a render group for this container.\n   * This means it will be rendered as a separate set of instructions.\n   * The transform of the container will also be handled on the GPU rather than the CPU.\n   * @advanced\n   */\n  enableRenderGroup() {\n    if (this.renderGroup)\n      return;\n    const parentRenderGroup = this.parentRenderGroup;\n    parentRenderGroup?.removeChild(this);\n    this.renderGroup = BigPool.get(RenderGroup, this);\n    this.groupTransform = Matrix.IDENTITY;\n    parentRenderGroup?.addChild(this);\n    this._updateIsSimple();\n  }\n  /**\n   * This will disable the render group for this container.\n   * @advanced\n   */\n  disableRenderGroup() {\n    if (!this.renderGroup)\n      return;\n    const parentRenderGroup = this.parentRenderGroup;\n    parentRenderGroup?.removeChild(this);\n    BigPool.return(this.renderGroup);\n    this.renderGroup = null;\n    this.groupTransform = this.relativeGroupTransform;\n    parentRenderGroup?.addChild(this);\n    this._updateIsSimple();\n  }\n  /** @ignore */\n  _updateIsSimple() {\n    this.isSimple = !this.renderGroup && this.effects.length === 0;\n  }\n  /**\n   * Current transform of the object based on world (parent) factors.\n   *\n   * This matrix represents the absolute transformation in the scene graph.\n   * @example\n   * ```ts\n   * // Get world position\n   * const worldPos = container.worldTransform;\n   * console.log(`World position: (${worldPos.tx}, ${worldPos.ty})`);\n   * ```\n   * @readonly\n   * @see {@link Container#localTransform} For local space transform\n   */\n  get worldTransform() {\n    this._worldTransform || (this._worldTransform = new Matrix());\n    if (this.renderGroup) {\n      this._worldTransform.copyFrom(this.renderGroup.worldTransform);\n    } else if (this.parentRenderGroup) {\n      this._worldTransform.appendFrom(this.relativeGroupTransform, this.parentRenderGroup.worldTransform);\n    }\n    return this._worldTransform;\n  }\n  /**\n   * The position of the container on the x axis relative to the local coordinates of the parent.\n   *\n   * An alias to position.x\n   * @example\n   * ```ts\n   * // Basic position\n   * container.x = 100;\n   * ```\n   */\n  get x() {\n    return this._position.x;\n  }\n  set x(value) {\n    this._position.x = value;\n  }\n  /**\n   * The position of the container on the y axis relative to the local coordinates of the parent.\n   *\n   * An alias to position.y\n   * @example\n   * ```ts\n   * // Basic position\n   * container.y = 200;\n   * ```\n   */\n  get y() {\n    return this._position.y;\n  }\n  set y(value) {\n    this._position.y = value;\n  }\n  /**\n   * The coordinate of the object relative to the local coordinates of the parent.\n   * @example\n   * ```ts\n   * // Basic position setting\n   * container.position.set(100, 200);\n   * container.position.set(100); // Sets both x and y to 100\n   * // Using point data\n   * container.position = { x: 50, y: 75 };\n   * ```\n   * @since 4.0.0\n   */\n  get position() {\n    return this._position;\n  }\n  set position(value) {\n    this._position.copyFrom(value);\n  }\n  /**\n   * The rotation of the object in radians.\n   *\n   * > [!NOTE] 'rotation' and 'angle' have the same effect on a display object;\n   * > rotation is in radians, angle is in degrees.\n   * @example\n   * ```ts\n   * // Basic rotation\n   * container.rotation = Math.PI / 4; // 45 degrees\n   *\n   * // Convert from degrees\n   * const degrees = 45;\n   * container.rotation = degrees * Math.PI / 180;\n   *\n   * // Rotate around center\n   * container.pivot.set(container.width / 2, container.height / 2);\n   * container.rotation = Math.PI; // 180 degrees\n   *\n   * // Rotate around center with origin\n   * container.origin.set(container.width / 2, container.height / 2);\n   * container.rotation = Math.PI; // 180 degrees\n   * ```\n   */\n  get rotation() {\n    return this._rotation;\n  }\n  set rotation(value) {\n    if (this._rotation !== value) {\n      this._rotation = value;\n      this._onUpdate(this._skew);\n    }\n  }\n  /**\n   * The angle of the object in degrees.\n   *\n   * > [!NOTE] 'rotation' and 'angle' have the same effect on a display object;\n   * > rotation is in radians, angle is in degrees.\n   * @example\n   * ```ts\n   * // Basic angle rotation\n   * sprite.angle = 45; // 45 degrees\n   *\n   * // Rotate around center\n   * sprite.pivot.set(sprite.width / 2, sprite.height / 2);\n   * sprite.angle = 180; // Half rotation\n   *\n   * // Rotate around center with origin\n   * sprite.origin.set(sprite.width / 2, sprite.height / 2);\n   * sprite.angle = 180; // Half rotation\n   *\n   * // Reset rotation\n   * sprite.angle = 0;\n   * ```\n   */\n  get angle() {\n    return this.rotation * RAD_TO_DEG;\n  }\n  set angle(value) {\n    this.rotation = value * DEG_TO_RAD;\n  }\n  /**\n   * The center of rotation, scaling, and skewing for this display object in its local space.\n   * The `position` is the projection of `pivot` in the parent's local space.\n   *\n   * By default, the pivot is the origin (0, 0).\n   * @example\n   * ```ts\n   * // Rotate around center\n   * container.pivot.set(container.width / 2, container.height / 2);\n   * container.rotation = Math.PI; // Rotates around center\n   * ```\n   * @since 4.0.0\n   */\n  get pivot() {\n    if (this._pivot === defaultPivot) {\n      this._pivot = new ObservablePoint(this, 0, 0);\n    }\n    return this._pivot;\n  }\n  set pivot(value) {\n    if (this._pivot === defaultPivot) {\n      this._pivot = new ObservablePoint(this, 0, 0);\n      if (this._origin !== defaultOrigin) {\n        warn(`Setting both a pivot and origin on a Container is not recommended. This can lead to unexpected behavior if not handled carefully.`);\n      }\n    }\n    typeof value === \"number\" ? this._pivot.set(value) : this._pivot.copyFrom(value);\n  }\n  /**\n   * The skew factor for the object in radians. Skewing is a transformation that distorts\n   * the object by rotating it differently at each point, creating a non-uniform shape.\n   * @example\n   * ```ts\n   * // Basic skewing\n   * container.skew.set(0.5, 0); // Skew horizontally\n   * container.skew.set(0, 0.5); // Skew vertically\n   *\n   * // Skew with point data\n   * container.skew = { x: 0.3, y: 0.3 }; // Diagonal skew\n   *\n   * // Reset skew\n   * container.skew.set(0, 0);\n   *\n   * // Animate skew\n   * app.ticker.add(() => {\n   *     // Create wave effect\n   *     container.skew.x = Math.sin(Date.now() / 1000) * 0.3;\n   * });\n   *\n   * // Combine with rotation\n   * container.rotation = Math.PI / 4; // 45 degrees\n   * container.skew.set(0.2, 0.2); // Skew the rotated object\n   * ```\n   * @since 4.0.0\n   * @type {ObservablePoint} Point-like object with x/y properties in radians\n   * @default {x: 0, y: 0}\n   */\n  get skew() {\n    if (this._skew === defaultSkew) {\n      this._skew = new ObservablePoint(this, 0, 0);\n    }\n    return this._skew;\n  }\n  set skew(value) {\n    if (this._skew === defaultSkew) {\n      this._skew = new ObservablePoint(this, 0, 0);\n    }\n    this._skew.copyFrom(value);\n  }\n  /**\n   * The scale factors of this object along the local coordinate axes.\n   *\n   * The default scale is (1, 1).\n   * @example\n   * ```ts\n   * // Basic scaling\n   * container.scale.set(2, 2); // Scales to double size\n   * container.scale.set(2); // Scales uniformly to double size\n   * container.scale = 2; // Scales uniformly to double size\n   * // Scale to a specific width and height\n   * container.setSize(200, 100); // Sets width to 200 and height to 100\n   * ```\n   * @since 4.0.0\n   */\n  get scale() {\n    if (this._scale === defaultScale) {\n      this._scale = new ObservablePoint(this, 1, 1);\n    }\n    return this._scale;\n  }\n  set scale(value) {\n    if (this._scale === defaultScale) {\n      this._scale = new ObservablePoint(this, 0, 0);\n    }\n    if (typeof value === \"string\") {\n      value = parseFloat(value);\n    }\n    typeof value === \"number\" ? this._scale.set(value) : this._scale.copyFrom(value);\n  }\n  /**\n   * @experimental\n   * The origin point around which the container rotates and scales without affecting its position.\n   * Unlike pivot, changing the origin will not move the container's position.\n   * @example\n   * ```ts\n   * // Rotate around center point\n   * container.origin.set(container.width / 2, container.height / 2);\n   * container.rotation = Math.PI; // Rotates around center\n   *\n   * // Reset origin\n   * container.origin.set(0, 0);\n   * ```\n   */\n  get origin() {\n    if (this._origin === defaultOrigin) {\n      this._origin = new ObservablePoint(this, 0, 0);\n    }\n    return this._origin;\n  }\n  set origin(value) {\n    if (this._origin === defaultOrigin) {\n      this._origin = new ObservablePoint(this, 0, 0);\n      if (this._pivot !== defaultPivot) {\n        warn(`Setting both a pivot and origin on a Container is not recommended. This can lead to unexpected behavior if not handled carefully.`);\n      }\n    }\n    typeof value === \"number\" ? this._origin.set(value) : this._origin.copyFrom(value);\n  }\n  /**\n   * The width of the Container, setting this will actually modify the scale to achieve the value set.\n   * > [!NOTE] Changing the width will adjust the scale.x property of the container while maintaining its aspect ratio.\n   * > [!NOTE] If you want to set both width and height at the same time, use {@link Container#setSize}\n   * as it is more optimized by not recalculating the local bounds twice.\n   * @example\n   * ```ts\n   * // Basic width setting\n   * container.width = 100;\n   * // Optimized width setting\n   * container.setSize(100, 100);\n   * ```\n   */\n  get width() {\n    return Math.abs(this.scale.x * this.getLocalBounds().width);\n  }\n  set width(value) {\n    const localWidth = this.getLocalBounds().width;\n    this._setWidth(value, localWidth);\n  }\n  /**\n   * The height of the Container,\n   * > [!NOTE] Changing the height will adjust the scale.y property of the container while maintaining its aspect ratio.\n   * > [!NOTE] If you want to set both width and height at the same time, use {@link Container#setSize}\n   * as it is more optimized by not recalculating the local bounds twice.\n   * @example\n   * ```ts\n   * // Basic height setting\n   * container.height = 200;\n   * // Optimized height setting\n   * container.setSize(100, 200);\n   * ```\n   */\n  get height() {\n    return Math.abs(this.scale.y * this.getLocalBounds().height);\n  }\n  set height(value) {\n    const localHeight = this.getLocalBounds().height;\n    this._setHeight(value, localHeight);\n  }\n  /**\n   * Retrieves the size of the container as a [Size]{@link Size} object.\n   *\n   * This is faster than get the width and height separately.\n   * @example\n   * ```ts\n   * // Basic size retrieval\n   * const size = container.getSize();\n   * console.log(`Size: ${size.width}x${size.height}`);\n   *\n   * // Reuse existing size object\n   * const reuseSize = { width: 0, height: 0 };\n   * container.getSize(reuseSize);\n   * ```\n   * @param out - Optional object to store the size in.\n   * @returns The size of the container.\n   */\n  getSize(out) {\n    if (!out) {\n      out = {};\n    }\n    const bounds = this.getLocalBounds();\n    out.width = Math.abs(this.scale.x * bounds.width);\n    out.height = Math.abs(this.scale.y * bounds.height);\n    return out;\n  }\n  /**\n   * Sets the size of the container to the specified width and height.\n   * This is more efficient than setting width and height separately as it only recalculates bounds once.\n   * @example\n   * ```ts\n   * // Basic size setting\n   * container.setSize(100, 200);\n   *\n   * // Set uniform size\n   * container.setSize(100); // Sets both width and height to 100\n   * ```\n   * @param value - This can be either a number or a [Size]{@link Size} object.\n   * @param height - The height to set. Defaults to the value of `width` if not provided.\n   */\n  setSize(value, height) {\n    const size = this.getLocalBounds();\n    if (typeof value === \"object\") {\n      height = value.height ?? value.width;\n      value = value.width;\n    } else {\n      height ?? (height = value);\n    }\n    value !== void 0 && this._setWidth(value, size.width);\n    height !== void 0 && this._setHeight(height, size.height);\n  }\n  /** Called when the skew or the rotation changes. */\n  _updateSkew() {\n    const rotation = this._rotation;\n    const skew = this._skew;\n    this._cx = Math.cos(rotation + skew._y);\n    this._sx = Math.sin(rotation + skew._y);\n    this._cy = -Math.sin(rotation - skew._x);\n    this._sy = Math.cos(rotation - skew._x);\n  }\n  /**\n   * Updates the transform properties of the container.\n   * Allows partial updates of transform properties for optimized manipulation.\n   * @example\n   * ```ts\n   * // Basic transform update\n   * container.updateTransform({\n   *     x: 100,\n   *     y: 200,\n   *     rotation: Math.PI / 4\n   * });\n   *\n   * // Scale and rotate around center\n   * sprite.updateTransform({\n   *     pivotX: sprite.width / 2,\n   *     pivotY: sprite.height / 2,\n   *     scaleX: 2,\n   *     scaleY: 2,\n   *     rotation: Math.PI\n   * });\n   *\n   * // Update position only\n   * button.updateTransform({\n   *     x: button.x + 10, // Move right\n   *     y: button.y      // Keep same y\n   * });\n   * ```\n   * @param opts - Transform options to update\n   * @param opts.x - The x position\n   * @param opts.y - The y position\n   * @param opts.scaleX - The x-axis scale factor\n   * @param opts.scaleY - The y-axis scale factor\n   * @param opts.rotation - The rotation in radians\n   * @param opts.skewX - The x-axis skew factor\n   * @param opts.skewY - The y-axis skew factor\n   * @param opts.pivotX - The x-axis pivot point\n   * @param opts.pivotY - The y-axis pivot point\n   * @returns This container, for chaining\n   * @see {@link Container#setFromMatrix} For matrix-based transforms\n   * @see {@link Container#position} For direct position access\n   */\n  updateTransform(opts) {\n    this.position.set(\n      typeof opts.x === \"number\" ? opts.x : this.position.x,\n      typeof opts.y === \"number\" ? opts.y : this.position.y\n    );\n    this.scale.set(\n      typeof opts.scaleX === \"number\" ? opts.scaleX || 1 : this.scale.x,\n      typeof opts.scaleY === \"number\" ? opts.scaleY || 1 : this.scale.y\n    );\n    this.rotation = typeof opts.rotation === \"number\" ? opts.rotation : this.rotation;\n    this.skew.set(\n      typeof opts.skewX === \"number\" ? opts.skewX : this.skew.x,\n      typeof opts.skewY === \"number\" ? opts.skewY : this.skew.y\n    );\n    this.pivot.set(\n      typeof opts.pivotX === \"number\" ? opts.pivotX : this.pivot.x,\n      typeof opts.pivotY === \"number\" ? opts.pivotY : this.pivot.y\n    );\n    this.origin.set(\n      typeof opts.originX === \"number\" ? opts.originX : this.origin.x,\n      typeof opts.originY === \"number\" ? opts.originY : this.origin.y\n    );\n    return this;\n  }\n  /**\n   * Updates the local transform properties by decomposing the given matrix.\n   * Extracts position, scale, rotation, and skew from a transformation matrix.\n   * @example\n   * ```ts\n   * // Basic matrix transform\n   * const matrix = new Matrix()\n   *     .translate(100, 100)\n   *     .rotate(Math.PI / 4)\n   *     .scale(2, 2);\n   *\n   * container.setFromMatrix(matrix);\n   *\n   * // Copy transform from another container\n   * const source = new Container();\n   * source.position.set(100, 100);\n   * source.rotation = Math.PI / 2;\n   *\n   * target.setFromMatrix(source.localTransform);\n   *\n   * // Reset transform\n   * container.setFromMatrix(Matrix.IDENTITY);\n   * ```\n   * @param matrix - The matrix to use for updating the transform\n   * @see {@link Container#updateTransform} For property-based updates\n   * @see {@link Matrix#decompose} For matrix decomposition details\n   */\n  setFromMatrix(matrix) {\n    matrix.decompose(this);\n  }\n  /** Updates the local transform. */\n  updateLocalTransform() {\n    const localTransformChangeId = this._didContainerChangeTick;\n    if (this._didLocalTransformChangeId === localTransformChangeId)\n      return;\n    this._didLocalTransformChangeId = localTransformChangeId;\n    const lt = this.localTransform;\n    const scale = this._scale;\n    const pivot = this._pivot;\n    const origin = this._origin;\n    const position = this._position;\n    const sx = scale._x;\n    const sy = scale._y;\n    const px = pivot._x;\n    const py = pivot._y;\n    const ox = -origin._x;\n    const oy = -origin._y;\n    lt.a = this._cx * sx;\n    lt.b = this._sx * sx;\n    lt.c = this._cy * sy;\n    lt.d = this._sy * sy;\n    lt.tx = position._x - (px * lt.a + py * lt.c) + (ox * lt.a + oy * lt.c) - ox;\n    lt.ty = position._y - (px * lt.b + py * lt.d) + (ox * lt.b + oy * lt.d) - oy;\n  }\n  // / ///// color related stuff\n  set alpha(value) {\n    if (value === this.localAlpha)\n      return;\n    this.localAlpha = value;\n    this._updateFlags |= UPDATE_COLOR;\n    this._onUpdate();\n  }\n  /**\n   * The opacity of the object relative to its parent's opacity.\n   * Value ranges from 0 (fully transparent) to 1 (fully opaque).\n   * @example\n   * ```ts\n   * // Basic transparency\n   * sprite.alpha = 0.5; // 50% opacity\n   *\n   * // Inherited opacity\n   * container.alpha = 0.5;\n   * const child = new Sprite(texture);\n   * child.alpha = 0.5;\n   * container.addChild(child);\n   * // child's effective opacity is 0.25 (0.5 * 0.5)\n   * ```\n   * @default 1\n   * @see {@link Container#visible} For toggling visibility\n   * @see {@link Container#renderable} For render control\n   */\n  get alpha() {\n    return this.localAlpha;\n  }\n  set tint(value) {\n    const tempColor = Color.shared.setValue(value ?? 16777215);\n    const bgr = tempColor.toBgrNumber();\n    if (bgr === this.localColor)\n      return;\n    this.localColor = bgr;\n    this._updateFlags |= UPDATE_COLOR;\n    this._onUpdate();\n  }\n  /**\n   * The tint applied to the sprite.\n   *\n   * This can be any valid {@link ColorSource}.\n   * @example\n   * ```ts\n   * // Basic color tinting\n   * container.tint = 0xff0000; // Red tint\n   * container.tint = 'red';    // Same as above\n   * container.tint = '#00ff00'; // Green\n   * container.tint = 'rgb(0,0,255)'; // Blue\n   *\n   * // Remove tint\n   * container.tint = 0xffffff; // White = no tint\n   * container.tint = null;     // Also removes tint\n   * ```\n   * @default 0xFFFFFF\n   * @see {@link Container#alpha} For transparency\n   * @see {@link Container#visible} For visibility control\n   */\n  get tint() {\n    return bgr2rgb(this.localColor);\n  }\n  // / //////////////// blend related stuff\n  set blendMode(value) {\n    if (this.localBlendMode === value)\n      return;\n    if (this.parentRenderGroup) {\n      this.parentRenderGroup.structureDidChange = true;\n    }\n    this._updateFlags |= UPDATE_BLEND;\n    this.localBlendMode = value;\n    this._onUpdate();\n  }\n  /**\n   * The blend mode to be applied to the sprite. Controls how pixels are blended when rendering.\n   *\n   * Setting to 'normal' will reset to default blending.\n   * > [!NOTE] More blend modes are available after importing the `pixi.js/advanced-blend-modes` sub-export.\n   * @example\n   * ```ts\n   * // Basic blend modes\n   * sprite.blendMode = 'add';        // Additive blending\n   * sprite.blendMode = 'multiply';   // Multiply colors\n   * sprite.blendMode = 'screen';     // Screen blend\n   *\n   * // Reset blend mode\n   * sprite.blendMode = 'normal';     // Normal blending\n   * ```\n   * @default 'normal'\n   * @see {@link Container#alpha} For transparency\n   * @see {@link Container#tint} For color adjustments\n   */\n  get blendMode() {\n    return this.localBlendMode;\n  }\n  // / ///////// VISIBILITY / RENDERABLE /////////////////\n  /**\n   * The visibility of the object. If false the object will not be drawn,\n   * and the transform will not be updated.\n   * @example\n   * ```ts\n   * // Basic visibility toggle\n   * sprite.visible = false; // Hide sprite\n   * sprite.visible = true;  // Show sprite\n   * ```\n   * @default true\n   * @see {@link Container#renderable} For render-only control\n   * @see {@link Container#alpha} For transparency\n   */\n  get visible() {\n    return !!(this.localDisplayStatus & 2);\n  }\n  set visible(value) {\n    const valueNumber = value ? 2 : 0;\n    if ((this.localDisplayStatus & 2) === valueNumber)\n      return;\n    if (this.parentRenderGroup) {\n      this.parentRenderGroup.structureDidChange = true;\n    }\n    this._updateFlags |= UPDATE_VISIBLE;\n    this.localDisplayStatus ^= 2;\n    this._onUpdate();\n  }\n  /** @ignore */\n  get culled() {\n    return !(this.localDisplayStatus & 4);\n  }\n  /** @ignore */\n  set culled(value) {\n    const valueNumber = value ? 0 : 4;\n    if ((this.localDisplayStatus & 4) === valueNumber)\n      return;\n    if (this.parentRenderGroup) {\n      this.parentRenderGroup.structureDidChange = true;\n    }\n    this._updateFlags |= UPDATE_VISIBLE;\n    this.localDisplayStatus ^= 4;\n    this._onUpdate();\n  }\n  /**\n   * Controls whether this object can be rendered. If false the object will not be drawn,\n   * but the transform will still be updated. This is different from visible, which skips\n   * transform updates.\n   * @example\n   * ```ts\n   * // Basic render control\n   * sprite.renderable = false; // Skip rendering\n   * sprite.renderable = true;  // Enable rendering\n   * ```\n   * @default true\n   * @see {@link Container#visible} For skipping transform updates\n   * @see {@link Container#alpha} For transparency\n   */\n  get renderable() {\n    return !!(this.localDisplayStatus & 1);\n  }\n  set renderable(value) {\n    const valueNumber = value ? 1 : 0;\n    if ((this.localDisplayStatus & 1) === valueNumber)\n      return;\n    this._updateFlags |= UPDATE_VISIBLE;\n    this.localDisplayStatus ^= 1;\n    if (this.parentRenderGroup) {\n      this.parentRenderGroup.structureDidChange = true;\n    }\n    this._onUpdate();\n  }\n  /**\n   * Whether or not the object should be rendered.\n   * @advanced\n   */\n  get isRenderable() {\n    return this.localDisplayStatus === 7 && this.groupAlpha > 0;\n  }\n  /**\n   * Removes all internal references and listeners as well as removes children from the display list.\n   * Do not use a Container after calling `destroy`.\n   * @param options - Options parameter. A boolean will act as if all options\n   *  have been set to that value\n   * @example\n   * ```ts\n   * container.destroy();\n   * container.destroy(true);\n   * container.destroy({ children: true });\n   * container.destroy({ children: true, texture: true, textureSource: true });\n   * ```\n   */\n  destroy(options = false) {\n    if (this.destroyed)\n      return;\n    this.destroyed = true;\n    let oldChildren;\n    if (this.children.length) {\n      oldChildren = this.removeChildren(0, this.children.length);\n    }\n    this.removeFromParent();\n    this.parent = null;\n    this._maskEffect = null;\n    this._filterEffect = null;\n    this.effects = null;\n    this._position = null;\n    this._scale = null;\n    this._pivot = null;\n    this._origin = null;\n    this._skew = null;\n    this.emit(\"destroyed\", this);\n    this.removeAllListeners();\n    const destroyChildren = typeof options === \"boolean\" ? options : options?.children;\n    if (destroyChildren && oldChildren) {\n      for (let i = 0; i < oldChildren.length; ++i) {\n        oldChildren[i].destroy(options);\n      }\n    }\n    this.renderGroup?.destroy();\n    this.renderGroup = null;\n  }\n}\nextensions.mixin(\n  Container,\n  childrenHelperMixin,\n  getFastGlobalBoundsMixin,\n  toLocalGlobalMixin,\n  onRenderMixin,\n  measureMixin,\n  effectsMixin,\n  findMixin,\n  sortMixin,\n  cullingMixin,\n  cacheAsTextureMixin,\n  getGlobalMixin,\n  collectRenderablesMixin\n);\n\nexport { Container, UPDATE_BLEND, UPDATE_COLOR, UPDATE_TRANSFORM, UPDATE_VISIBLE };\n//# sourceMappingURL=Container.mjs.map\n","\"use strict\";\nfunction assignWithIgnore(target, options, ignore = {}) {\n  for (const key in options) {\n    if (!ignore[key] && options[key] !== void 0) {\n      target[key] = options[key];\n    }\n  }\n}\n\nexport { assignWithIgnore };\n//# sourceMappingURL=assignWithIgnore.mjs.map\n","import '../../../maths/index.mjs';\nimport { Matrix } from '../../../maths/matrix/Matrix.mjs';\n\n\"use strict\";\nconst tempProjectionMatrix = new Matrix();\nfunction getGlobalRenderableBounds(renderables, bounds) {\n  bounds.clear();\n  const actualMatrix = bounds.matrix;\n  for (let i = 0; i < renderables.length; i++) {\n    const renderable = renderables[i];\n    if (renderable.globalDisplayStatus < 7) {\n      continue;\n    }\n    const renderGroup = renderable.renderGroup ?? renderable.parentRenderGroup;\n    if (renderGroup?.isCachedAsTexture) {\n      bounds.matrix = tempProjectionMatrix.copyFrom(renderGroup.textureOffsetInverseTransform).append(renderable.worldTransform);\n    } else if (renderGroup?._parentCacheAsTextureRenderGroup) {\n      bounds.matrix = tempProjectionMatrix.copyFrom(renderGroup._parentCacheAsTextureRenderGroup.inverseWorldTransform).append(renderable.groupTransform);\n    } else {\n      bounds.matrix = renderable.worldTransform;\n    }\n    bounds.addBounds(renderable.bounds);\n  }\n  bounds.matrix = actualMatrix;\n  return bounds;\n}\n\nexport { getGlobalRenderableBounds };\n//# sourceMappingURL=getRenderableBounds.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\n\n\"use strict\";\nclass CustomRenderPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  updateRenderable() {\n  }\n  destroyRenderable() {\n  }\n  validateRenderable() {\n    return false;\n  }\n  addRenderable(container, instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add(container);\n  }\n  execute(container) {\n    if (!container.isRenderable)\n      return;\n    container.render(this._renderer);\n  }\n  destroy() {\n    this._renderer = null;\n  }\n}\nCustomRenderPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"customRender\"\n};\n\nexport { CustomRenderPipe };\n//# sourceMappingURL=CustomRenderPipe.mjs.map\n","\"use strict\";\nfunction executeInstructions(renderGroup, renderer) {\n  const instructionSet = renderGroup.instructionSet;\n  const instructions = instructionSet.instructions;\n  for (let i = 0; i < instructionSet.instructionSize; i++) {\n    const instruction = instructions[i];\n    renderer[instruction.renderPipeId].execute(instruction);\n  }\n}\n\nexport { executeInstructions };\n//# sourceMappingURL=executeInstructions.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { Matrix } from '../../maths/matrix/Matrix.mjs';\nimport { BigPool } from '../../utils/pool/PoolGroup.mjs';\nimport { BatchableSprite } from '../sprite/BatchableSprite.mjs';\nimport { executeInstructions } from './utils/executeInstructions.mjs';\n\n\"use strict\";\nconst tempMatrix = new Matrix();\nclass RenderGroupPipe {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  addRenderGroup(renderGroup, instructionSet) {\n    if (renderGroup.isCachedAsTexture) {\n      this._addRenderableCacheAsTexture(renderGroup, instructionSet);\n    } else {\n      this._addRenderableDirect(renderGroup, instructionSet);\n    }\n  }\n  execute(renderGroup) {\n    if (!renderGroup.isRenderable)\n      return;\n    if (renderGroup.isCachedAsTexture) {\n      this._executeCacheAsTexture(renderGroup);\n    } else {\n      this._executeDirect(renderGroup);\n    }\n  }\n  destroy() {\n    this._renderer = null;\n  }\n  _addRenderableDirect(renderGroup, instructionSet) {\n    this._renderer.renderPipes.batch.break(instructionSet);\n    if (renderGroup._batchableRenderGroup) {\n      BigPool.return(renderGroup._batchableRenderGroup);\n      renderGroup._batchableRenderGroup = null;\n    }\n    instructionSet.add(renderGroup);\n  }\n  _addRenderableCacheAsTexture(renderGroup, instructionSet) {\n    const batchableRenderGroup = renderGroup._batchableRenderGroup ?? (renderGroup._batchableRenderGroup = BigPool.get(BatchableSprite));\n    batchableRenderGroup.renderable = renderGroup.root;\n    batchableRenderGroup.transform = renderGroup.root.relativeGroupTransform;\n    batchableRenderGroup.texture = renderGroup.texture;\n    batchableRenderGroup.bounds = renderGroup._textureBounds;\n    instructionSet.add(renderGroup);\n    this._renderer.renderPipes.blendMode.pushBlendMode(renderGroup, renderGroup.root.groupBlendMode, instructionSet);\n    this._renderer.renderPipes.batch.addToBatch(batchableRenderGroup, instructionSet);\n    this._renderer.renderPipes.blendMode.popBlendMode(instructionSet);\n  }\n  _executeCacheAsTexture(renderGroup) {\n    if (renderGroup.textureNeedsUpdate) {\n      renderGroup.textureNeedsUpdate = false;\n      const worldTransformMatrix = tempMatrix.identity().translate(\n        -renderGroup._textureBounds.x,\n        -renderGroup._textureBounds.y\n      );\n      this._renderer.renderTarget.push(renderGroup.texture, true, null, renderGroup.texture.frame);\n      this._renderer.globalUniforms.push({\n        worldTransformMatrix,\n        worldColor: 4294967295,\n        offset: { x: 0, y: 0 }\n      });\n      executeInstructions(renderGroup, this._renderer.renderPipes);\n      this._renderer.renderTarget.finishRenderPass();\n      this._renderer.renderTarget.pop();\n      this._renderer.globalUniforms.pop();\n    }\n    renderGroup._batchableRenderGroup._batcher.updateElement(renderGroup._batchableRenderGroup);\n    renderGroup._batchableRenderGroup._batcher.geometry.buffers[0].update();\n  }\n  _executeDirect(renderGroup) {\n    this._renderer.globalUniforms.push({\n      worldTransformMatrix: renderGroup.inverseParentTextureTransform,\n      worldColor: renderGroup.worldColorAlpha\n    });\n    executeInstructions(renderGroup, this._renderer.renderPipes);\n    this._renderer.globalUniforms.pop();\n  }\n}\nRenderGroupPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes,\n    ExtensionType.WebGPUPipes,\n    ExtensionType.CanvasPipes\n  ],\n  name: \"renderGroup\"\n};\n\nexport { RenderGroupPipe };\n//# sourceMappingURL=RenderGroupPipe.mjs.map\n","\"use strict\";\nfunction clearList(list, index) {\n  index || (index = 0);\n  for (let j = index; j < list.length; j++) {\n    if (list[j]) {\n      list[j] = null;\n    } else {\n      break;\n    }\n  }\n}\n\nexport { clearList };\n//# sourceMappingURL=clearList.mjs.map\n","import { Container, UPDATE_VISIBLE, UPDATE_COLOR, UPDATE_BLEND } from '../Container.mjs';\nimport { clearList } from './clearList.mjs';\nimport { multiplyColors } from './multiplyColors.mjs';\n\n\"use strict\";\nconst tempContainer = new Container();\nconst UPDATE_BLEND_COLOR_VISIBLE = UPDATE_VISIBLE | UPDATE_COLOR | UPDATE_BLEND;\nfunction updateRenderGroupTransforms(renderGroup, updateChildRenderGroups = false) {\n  updateRenderGroupTransform(renderGroup);\n  const childrenToUpdate = renderGroup.childrenToUpdate;\n  const updateTick = renderGroup.updateTick++;\n  for (const j in childrenToUpdate) {\n    const renderGroupDepth = Number(j);\n    const childrenAtDepth = childrenToUpdate[j];\n    const list = childrenAtDepth.list;\n    const index = childrenAtDepth.index;\n    for (let i = 0; i < index; i++) {\n      const child = list[i];\n      if (child.parentRenderGroup === renderGroup && child.relativeRenderGroupDepth === renderGroupDepth) {\n        updateTransformAndChildren(child, updateTick, 0);\n      }\n    }\n    clearList(list, index);\n    childrenAtDepth.index = 0;\n  }\n  if (updateChildRenderGroups) {\n    for (let i = 0; i < renderGroup.renderGroupChildren.length; i++) {\n      updateRenderGroupTransforms(renderGroup.renderGroupChildren[i], updateChildRenderGroups);\n    }\n  }\n}\nfunction updateRenderGroupTransform(renderGroup) {\n  const root = renderGroup.root;\n  let worldAlpha;\n  if (renderGroup.renderGroupParent) {\n    const renderGroupParent = renderGroup.renderGroupParent;\n    renderGroup.worldTransform.appendFrom(\n      root.relativeGroupTransform,\n      renderGroupParent.worldTransform\n    );\n    renderGroup.worldColor = multiplyColors(\n      root.groupColor,\n      renderGroupParent.worldColor\n    );\n    worldAlpha = root.groupAlpha * renderGroupParent.worldAlpha;\n  } else {\n    renderGroup.worldTransform.copyFrom(root.localTransform);\n    renderGroup.worldColor = root.localColor;\n    worldAlpha = root.localAlpha;\n  }\n  worldAlpha = worldAlpha < 0 ? 0 : worldAlpha > 1 ? 1 : worldAlpha;\n  renderGroup.worldAlpha = worldAlpha;\n  renderGroup.worldColorAlpha = renderGroup.worldColor + ((worldAlpha * 255 | 0) << 24);\n}\nfunction updateTransformAndChildren(container, updateTick, updateFlags) {\n  if (updateTick === container.updateTick)\n    return;\n  container.updateTick = updateTick;\n  container.didChange = false;\n  const localTransform = container.localTransform;\n  container.updateLocalTransform();\n  const parent = container.parent;\n  if (parent && !parent.renderGroup) {\n    updateFlags |= container._updateFlags;\n    container.relativeGroupTransform.appendFrom(\n      localTransform,\n      parent.relativeGroupTransform\n    );\n    if (updateFlags & UPDATE_BLEND_COLOR_VISIBLE) {\n      updateColorBlendVisibility(container, parent, updateFlags);\n    }\n  } else {\n    updateFlags = container._updateFlags;\n    container.relativeGroupTransform.copyFrom(localTransform);\n    if (updateFlags & UPDATE_BLEND_COLOR_VISIBLE) {\n      updateColorBlendVisibility(container, tempContainer, updateFlags);\n    }\n  }\n  if (!container.renderGroup) {\n    const children = container.children;\n    const length = children.length;\n    for (let i = 0; i < length; i++) {\n      updateTransformAndChildren(children[i], updateTick, updateFlags);\n    }\n    const renderGroup = container.parentRenderGroup;\n    const renderable = container;\n    if (renderable.renderPipeId && !renderGroup.structureDidChange) {\n      renderGroup.updateRenderable(renderable);\n    }\n  }\n}\nfunction updateColorBlendVisibility(container, parent, updateFlags) {\n  if (updateFlags & UPDATE_COLOR) {\n    container.groupColor = multiplyColors(\n      container.localColor,\n      parent.groupColor\n    );\n    let groupAlpha = container.localAlpha * parent.groupAlpha;\n    groupAlpha = groupAlpha < 0 ? 0 : groupAlpha > 1 ? 1 : groupAlpha;\n    container.groupAlpha = groupAlpha;\n    container.groupColorAlpha = container.groupColor + ((groupAlpha * 255 | 0) << 24);\n  }\n  if (updateFlags & UPDATE_BLEND) {\n    container.groupBlendMode = container.localBlendMode === \"inherit\" ? parent.groupBlendMode : container.localBlendMode;\n  }\n  if (updateFlags & UPDATE_VISIBLE) {\n    container.globalDisplayStatus = container.localDisplayStatus & parent.globalDisplayStatus;\n  }\n  container._updateFlags = 0;\n}\n\nexport { updateRenderGroupTransform, updateRenderGroupTransforms, updateTransformAndChildren };\n//# sourceMappingURL=updateRenderGroupTransforms.mjs.map\n","import { ExtensionType } from '../../extensions/Extensions.mjs';\nimport { Matrix } from '../../maths/matrix/Matrix.mjs';\nimport { TexturePool } from '../../rendering/renderers/shared/texture/TexturePool.mjs';\nimport { TextureStyle } from '../../rendering/renderers/shared/texture/TextureStyle.mjs';\nimport { Bounds } from './bounds/Bounds.mjs';\nimport { clearList } from './utils/clearList.mjs';\nimport { executeInstructions } from './utils/executeInstructions.mjs';\nimport { updateRenderGroupTransforms } from './utils/updateRenderGroupTransforms.mjs';\nimport { validateRenderables } from './utils/validateRenderables.mjs';\n\n\"use strict\";\nconst tempMatrix = new Matrix();\nclass RenderGroupSystem {\n  constructor(renderer) {\n    this._renderer = renderer;\n  }\n  render({ container, transform }) {\n    const parent = container.parent;\n    const renderGroupParent = container.renderGroup.renderGroupParent;\n    container.parent = null;\n    container.renderGroup.renderGroupParent = null;\n    const renderer = this._renderer;\n    const originalLocalTransform = tempMatrix;\n    if (transform) {\n      originalLocalTransform.copyFrom(container.renderGroup.localTransform);\n      container.renderGroup.localTransform.copyFrom(transform);\n    }\n    const renderPipes = renderer.renderPipes;\n    this._updateCachedRenderGroups(container.renderGroup, null);\n    this._updateRenderGroups(container.renderGroup);\n    renderer.globalUniforms.start({\n      worldTransformMatrix: transform ? container.renderGroup.localTransform : container.renderGroup.worldTransform,\n      worldColor: container.renderGroup.worldColorAlpha\n    });\n    executeInstructions(container.renderGroup, renderPipes);\n    if (renderPipes.uniformBatch) {\n      renderPipes.uniformBatch.renderEnd();\n    }\n    if (transform) {\n      container.renderGroup.localTransform.copyFrom(originalLocalTransform);\n    }\n    container.parent = parent;\n    container.renderGroup.renderGroupParent = renderGroupParent;\n  }\n  destroy() {\n    this._renderer = null;\n  }\n  _updateCachedRenderGroups(renderGroup, closestCacheAsTexture) {\n    renderGroup._parentCacheAsTextureRenderGroup = closestCacheAsTexture;\n    if (renderGroup.isCachedAsTexture) {\n      if (!renderGroup.textureNeedsUpdate)\n        return;\n      closestCacheAsTexture = renderGroup;\n    }\n    for (let i = renderGroup.renderGroupChildren.length - 1; i >= 0; i--) {\n      this._updateCachedRenderGroups(renderGroup.renderGroupChildren[i], closestCacheAsTexture);\n    }\n    renderGroup.invalidateMatrices();\n    if (renderGroup.isCachedAsTexture) {\n      if (renderGroup.textureNeedsUpdate) {\n        const bounds = renderGroup.root.getLocalBounds();\n        bounds.ceil();\n        const lastTexture = renderGroup.texture;\n        if (renderGroup.texture) {\n          TexturePool.returnTexture(renderGroup.texture, true);\n        }\n        const renderer = this._renderer;\n        const resolution = renderGroup.textureOptions.resolution || renderer.view.resolution;\n        const antialias = renderGroup.textureOptions.antialias ?? renderer.view.antialias;\n        const scaleMode = renderGroup.textureOptions.scaleMode ?? \"linear\";\n        const texture = TexturePool.getOptimalTexture(\n          bounds.width,\n          bounds.height,\n          resolution,\n          antialias\n        );\n        texture._source.style = new TextureStyle({ scaleMode });\n        renderGroup.texture = texture;\n        renderGroup._textureBounds || (renderGroup._textureBounds = new Bounds());\n        renderGroup._textureBounds.copyFrom(bounds);\n        if (lastTexture !== renderGroup.texture) {\n          if (renderGroup.renderGroupParent) {\n            renderGroup.renderGroupParent.structureDidChange = true;\n          }\n        }\n      }\n    } else if (renderGroup.texture) {\n      TexturePool.returnTexture(renderGroup.texture, true);\n      renderGroup.texture = null;\n    }\n  }\n  _updateRenderGroups(renderGroup) {\n    const renderer = this._renderer;\n    const renderPipes = renderer.renderPipes;\n    renderGroup.runOnRender(renderer);\n    renderGroup.instructionSet.renderPipes = renderPipes;\n    if (!renderGroup.structureDidChange) {\n      validateRenderables(renderGroup, renderPipes);\n    } else {\n      clearList(renderGroup.childrenRenderablesToUpdate.list, 0);\n    }\n    updateRenderGroupTransforms(renderGroup);\n    if (renderGroup.structureDidChange) {\n      renderGroup.structureDidChange = false;\n      this._buildInstructions(renderGroup, renderer);\n    } else {\n      this._updateRenderables(renderGroup);\n    }\n    renderGroup.childrenRenderablesToUpdate.index = 0;\n    renderer.renderPipes.batch.upload(renderGroup.instructionSet);\n    if (renderGroup.isCachedAsTexture && !renderGroup.textureNeedsUpdate)\n      return;\n    for (let i = 0; i < renderGroup.renderGroupChildren.length; i++) {\n      this._updateRenderGroups(renderGroup.renderGroupChildren[i]);\n    }\n  }\n  _updateRenderables(renderGroup) {\n    const { list, index } = renderGroup.childrenRenderablesToUpdate;\n    for (let i = 0; i < index; i++) {\n      const container = list[i];\n      if (container.didViewUpdate) {\n        renderGroup.updateRenderable(container);\n      }\n    }\n    clearList(list, index);\n  }\n  _buildInstructions(renderGroup, rendererOrPipes) {\n    const root = renderGroup.root;\n    const instructionSet = renderGroup.instructionSet;\n    instructionSet.reset();\n    const renderer = rendererOrPipes.renderPipes ? rendererOrPipes : rendererOrPipes.batch.renderer;\n    const renderPipes = renderer.renderPipes;\n    renderPipes.batch.buildStart(instructionSet);\n    renderPipes.blendMode.buildStart();\n    renderPipes.colorMask.buildStart();\n    if (root.sortableChildren) {\n      root.sortChildren();\n    }\n    root.collectRenderablesWithEffects(instructionSet, renderer, null);\n    renderPipes.batch.buildEnd(instructionSet);\n    renderPipes.blendMode.buildEnd(instructionSet);\n  }\n}\n/** @ignore */\nRenderGroupSystem.extension = {\n  type: [\n    ExtensionType.WebGLSystem,\n    ExtensionType.WebGPUSystem,\n    ExtensionType.CanvasSystem\n  ],\n  name: \"renderGroup\"\n};\n\nexport { RenderGroupSystem };\n//# sourceMappingURL=RenderGroupSystem.mjs.map\n","\"use strict\";\nfunction validateRenderables(renderGroup, renderPipes) {\n  const { list } = renderGroup.childrenRenderablesToUpdate;\n  let rebuildRequired = false;\n  for (let i = 0; i < renderGroup.childrenRenderablesToUpdate.index; i++) {\n    const container = list[i];\n    const renderable = container;\n    const pipe = renderPipes[renderable.renderPipeId];\n    rebuildRequired = pipe.validateRenderable(container);\n    if (rebuildRequired) {\n      break;\n    }\n  }\n  renderGroup.structureDidChange = rebuildRequired;\n  return rebuildRequired;\n}\n\nexport { validateRenderables };\n//# sourceMappingURL=validateRenderables.mjs.map\n","\"use strict\";\nclass GlParticleContainerAdaptor {\n  execute(particleContainerPipe, container) {\n    const state = particleContainerPipe.state;\n    const renderer = particleContainerPipe.renderer;\n    const shader = container.shader || particleContainerPipe.defaultShader;\n    shader.resources.uTexture = container.texture._source;\n    shader.resources.uniforms = particleContainerPipe.localUniforms;\n    const gl = renderer.gl;\n    const buffer = particleContainerPipe.getBuffers(container);\n    renderer.shader.bind(shader);\n    renderer.state.set(state);\n    renderer.geometry.bind(buffer.geometry, shader.glProgram);\n    const byteSize = buffer.geometry.indexBuffer.data.BYTES_PER_ELEMENT;\n    const glType = byteSize === 2 ? gl.UNSIGNED_SHORT : gl.UNSIGNED_INT;\n    gl.drawElements(gl.TRIANGLES, container.particleChildren.length * 6, glType, 0);\n  }\n}\n\nexport { GlParticleContainerAdaptor };\n//# sourceMappingURL=GlParticleContainerAdaptor.mjs.map\n","\"use strict\";\nclass GpuParticleContainerAdaptor {\n  execute(particleContainerPipe, container) {\n    const renderer = particleContainerPipe.renderer;\n    const shader = container.shader || particleContainerPipe.defaultShader;\n    shader.groups[0] = renderer.renderPipes.uniformBatch.getUniformBindGroup(particleContainerPipe.localUniforms, true);\n    shader.groups[1] = renderer.texture.getTextureBindGroup(container.texture);\n    const state = particleContainerPipe.state;\n    const buffer = particleContainerPipe.getBuffers(container);\n    renderer.encoder.draw({\n      geometry: buffer.geometry,\n      shader: container.shader || particleContainerPipe.defaultShader,\n      state,\n      size: container.particleChildren.length * 6\n    });\n  }\n}\n\nexport { GpuParticleContainerAdaptor };\n//# sourceMappingURL=GpuParticleContainerAdaptor.mjs.map\n","\"use strict\";\nfunction createIndicesForQuads(size, outBuffer = null) {\n  const totalIndices = size * 6;\n  if (totalIndices > 65535) {\n    outBuffer || (outBuffer = new Uint32Array(totalIndices));\n  } else {\n    outBuffer || (outBuffer = new Uint16Array(totalIndices));\n  }\n  if (outBuffer.length !== totalIndices) {\n    throw new Error(`Out buffer length is incorrect, got ${outBuffer.length} and expected ${totalIndices}`);\n  }\n  for (let i = 0, j = 0; i < totalIndices; i += 6, j += 4) {\n    outBuffer[i + 0] = j + 0;\n    outBuffer[i + 1] = j + 1;\n    outBuffer[i + 2] = j + 2;\n    outBuffer[i + 3] = j + 0;\n    outBuffer[i + 4] = j + 2;\n    outBuffer[i + 5] = j + 3;\n  }\n  return outBuffer;\n}\n\nexport { createIndicesForQuads };\n//# sourceMappingURL=createIndicesForQuads.mjs.map\n","import { getAttributeInfoFromFormat } from '../../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat.mjs';\n\n\"use strict\";\nfunction generateParticleUpdateFunction(properties) {\n  return {\n    dynamicUpdate: generateUpdateFunction(properties, true),\n    staticUpdate: generateUpdateFunction(properties, false)\n  };\n}\nfunction generateUpdateFunction(properties, dynamic) {\n  const funcFragments = [];\n  funcFragments.push(`\n\n        var index = 0;\n\n        for (let i = 0; i < ps.length; ++i)\n        {\n            const p = ps[i];\n\n            `);\n  let offset = 0;\n  for (const i in properties) {\n    const property = properties[i];\n    if (dynamic !== property.dynamic)\n      continue;\n    funcFragments.push(`offset = index + ${offset}`);\n    funcFragments.push(property.code);\n    const attributeInfo = getAttributeInfoFromFormat(property.format);\n    offset += attributeInfo.stride / 4;\n  }\n  funcFragments.push(`\n            index += stride * 4;\n        }\n    `);\n  funcFragments.unshift(`\n        var stride = ${offset};\n    `);\n  const functionSource = funcFragments.join(\"\\n\");\n  return new Function(\"ps\", \"f32v\", \"u32v\", functionSource);\n}\n\nexport { generateParticleUpdateFunction };\n//# sourceMappingURL=generateParticleUpdateFunction.mjs.map\n","import { Buffer } from '../../../rendering/renderers/shared/buffer/Buffer.mjs';\nimport { BufferUsage } from '../../../rendering/renderers/shared/buffer/const.mjs';\nimport { Geometry } from '../../../rendering/renderers/shared/geometry/Geometry.mjs';\nimport { getAttributeInfoFromFormat } from '../../../rendering/renderers/shared/geometry/utils/getAttributeInfoFromFormat.mjs';\nimport { ViewableBuffer } from '../../../utils/data/ViewableBuffer.mjs';\nimport { createIndicesForQuads } from './utils/createIndicesForQuads.mjs';\nimport { generateParticleUpdateFunction } from './utils/generateParticleUpdateFunction.mjs';\n\n\"use strict\";\nclass ParticleBuffer {\n  constructor(options) {\n    this._size = 0;\n    this._generateParticleUpdateCache = {};\n    const size = this._size = options.size ?? 1e3;\n    const properties = options.properties;\n    let staticVertexSize = 0;\n    let dynamicVertexSize = 0;\n    for (const i in properties) {\n      const property = properties[i];\n      const attributeInfo = getAttributeInfoFromFormat(property.format);\n      if (property.dynamic) {\n        dynamicVertexSize += attributeInfo.stride;\n      } else {\n        staticVertexSize += attributeInfo.stride;\n      }\n    }\n    this._dynamicStride = dynamicVertexSize / 4;\n    this._staticStride = staticVertexSize / 4;\n    this.staticAttributeBuffer = new ViewableBuffer(size * 4 * staticVertexSize);\n    this.dynamicAttributeBuffer = new ViewableBuffer(size * 4 * dynamicVertexSize);\n    this.indexBuffer = createIndicesForQuads(size);\n    const geometry = new Geometry();\n    let dynamicOffset = 0;\n    let staticOffset = 0;\n    this._staticBuffer = new Buffer({\n      data: new Float32Array(1),\n      label: \"static-particle-buffer\",\n      shrinkToFit: false,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    this._dynamicBuffer = new Buffer({\n      data: new Float32Array(1),\n      label: \"dynamic-particle-buffer\",\n      shrinkToFit: false,\n      usage: BufferUsage.VERTEX | BufferUsage.COPY_DST\n    });\n    for (const i in properties) {\n      const property = properties[i];\n      const attributeInfo = getAttributeInfoFromFormat(property.format);\n      if (property.dynamic) {\n        geometry.addAttribute(property.attributeName, {\n          buffer: this._dynamicBuffer,\n          stride: this._dynamicStride * 4,\n          offset: dynamicOffset * 4,\n          format: property.format\n        });\n        dynamicOffset += attributeInfo.size;\n      } else {\n        geometry.addAttribute(property.attributeName, {\n          buffer: this._staticBuffer,\n          stride: this._staticStride * 4,\n          offset: staticOffset * 4,\n          format: property.format\n        });\n        staticOffset += attributeInfo.size;\n      }\n    }\n    geometry.addIndex(this.indexBuffer);\n    const uploadFunction = this.getParticleUpdate(properties);\n    this._dynamicUpload = uploadFunction.dynamicUpdate;\n    this._staticUpload = uploadFunction.staticUpdate;\n    this.geometry = geometry;\n  }\n  getParticleUpdate(properties) {\n    const key = getParticleSyncKey(properties);\n    if (this._generateParticleUpdateCache[key]) {\n      return this._generateParticleUpdateCache[key];\n    }\n    this._generateParticleUpdateCache[key] = this.generateParticleUpdate(properties);\n    return this._generateParticleUpdateCache[key];\n  }\n  generateParticleUpdate(properties) {\n    return generateParticleUpdateFunction(properties);\n  }\n  update(particles, uploadStatic) {\n    if (particles.length > this._size) {\n      uploadStatic = true;\n      this._size = Math.max(particles.length, this._size * 1.5 | 0);\n      this.staticAttributeBuffer = new ViewableBuffer(this._size * this._staticStride * 4 * 4);\n      this.dynamicAttributeBuffer = new ViewableBuffer(this._size * this._dynamicStride * 4 * 4);\n      this.indexBuffer = createIndicesForQuads(this._size);\n      this.geometry.indexBuffer.setDataWithSize(\n        this.indexBuffer,\n        this.indexBuffer.byteLength,\n        true\n      );\n    }\n    const dynamicAttributeBuffer = this.dynamicAttributeBuffer;\n    this._dynamicUpload(particles, dynamicAttributeBuffer.float32View, dynamicAttributeBuffer.uint32View);\n    this._dynamicBuffer.setDataWithSize(\n      this.dynamicAttributeBuffer.float32View,\n      particles.length * this._dynamicStride * 4,\n      true\n    );\n    if (uploadStatic) {\n      const staticAttributeBuffer = this.staticAttributeBuffer;\n      this._staticUpload(particles, staticAttributeBuffer.float32View, staticAttributeBuffer.uint32View);\n      this._staticBuffer.setDataWithSize(\n        staticAttributeBuffer.float32View,\n        particles.length * this._staticStride * 4,\n        true\n      );\n    }\n  }\n  destroy() {\n    this._staticBuffer.destroy();\n    this._dynamicBuffer.destroy();\n    this.geometry.destroy();\n  }\n}\nfunction getParticleSyncKey(properties) {\n  const keyGen = [];\n  for (const key in properties) {\n    const property = properties[key];\n    keyGen.push(key, property.code, property.dynamic ? \"d\" : \"s\");\n  }\n  return keyGen.join(\"_\");\n}\n\nexport { ParticleBuffer };\n//# sourceMappingURL=ParticleBuffer.mjs.map\n","var fragment = \"varying vec2 vUV;\\nvarying vec4 vColor;\\n\\nuniform sampler2D uTexture;\\n\\nvoid main(void){\\n    vec4 color = texture2D(uTexture, vUV) * vColor;\\n    gl_FragColor = color;\\n}\";\n\nexport { fragment as default };\n//# sourceMappingURL=particles.frag.mjs.map\n","var wgsl = \"\\nstruct ParticleUniforms {\\n  uTranslationMatrix:mat3x3<f32>,\\n  uColor:vec4<f32>,\\n  uRound:f32,\\n  uResolution:vec2<f32>,\\n};\\n\\nfn roundPixels(position: vec2<f32>, targetSize: vec2<f32>) -> vec2<f32>\\n{\\n  return (floor(((position * 0.5 + 0.5) * targetSize) + 0.5) / targetSize) * 2.0 - 1.0;\\n}\\n\\n@group(0) @binding(0) var<uniform> uniforms: ParticleUniforms;\\n\\n@group(1) @binding(0) var uTexture: texture_2d<f32>;\\n@group(1) @binding(1) var uSampler : sampler;\\n\\nstruct VSOutput {\\n    @builtin(position) position: vec4<f32>,\\n    @location(0) uv : vec2<f32>,\\n    @location(1) color : vec4<f32>,\\n  };\\n@vertex\\nfn mainVertex(\\n  @location(0) aVertex: vec2<f32>,\\n  @location(1) aPosition: vec2<f32>,\\n  @location(2) aUV: vec2<f32>,\\n  @location(3) aColor: vec4<f32>,\\n  @location(4) aRotation: f32,\\n) -> VSOutput {\\n  \\n   let v = vec2(\\n       aVertex.x * cos(aRotation) - aVertex.y * sin(aRotation),\\n       aVertex.x * sin(aRotation) + aVertex.y * cos(aRotation)\\n   ) + aPosition;\\n\\n   var position = vec4((uniforms.uTranslationMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);\\n\\n   if(uniforms.uRound == 1.0) {\\n       position = vec4(roundPixels(position.xy, uniforms.uResolution), position.zw);\\n   }\\n\\n    let vColor = vec4(aColor.rgb * aColor.a, aColor.a) * uniforms.uColor;\\n\\n  return VSOutput(\\n   position,\\n   aUV,\\n   vColor,\\n  );\\n}\\n\\n@fragment\\nfn mainFragment(\\n  @location(0) uv: vec2<f32>,\\n  @location(1) color: vec4<f32>,\\n  @builtin(position) position: vec4<f32>,\\n) -> @location(0) vec4<f32> {\\n\\n    var sample = textureSample(uTexture, uSampler, uv) * color;\\n   \\n    return sample;\\n}\";\n\nexport { wgsl as default };\n//# sourceMappingURL=particles.wgsl.mjs.map\n","import { Color } from '../../../../color/Color.mjs';\nimport { Matrix } from '../../../../maths/matrix/Matrix.mjs';\nimport { GlProgram } from '../../../../rendering/renderers/gl/shader/GlProgram.mjs';\nimport { GpuProgram } from '../../../../rendering/renderers/gpu/shader/GpuProgram.mjs';\nimport { Shader } from '../../../../rendering/renderers/shared/shader/Shader.mjs';\nimport { Texture } from '../../../../rendering/renderers/shared/texture/Texture.mjs';\nimport { TextureStyle } from '../../../../rendering/renderers/shared/texture/TextureStyle.mjs';\nimport fragment from './particles.frag.mjs';\nimport vertex from './particles.vert.mjs';\nimport wgsl from './particles.wgsl.mjs';\n\n\"use strict\";\nclass ParticleShader extends Shader {\n  constructor() {\n    const glProgram = GlProgram.from({\n      vertex,\n      fragment\n    });\n    const gpuProgram = GpuProgram.from({\n      fragment: {\n        source: wgsl,\n        entryPoint: \"mainFragment\"\n      },\n      vertex: {\n        source: wgsl,\n        entryPoint: \"mainVertex\"\n      }\n    });\n    super({\n      glProgram,\n      gpuProgram,\n      resources: {\n        // this will be replaced with the texture from the particle container\n        uTexture: Texture.WHITE.source,\n        // this will be replaced with the texture style from the particle container\n        uSampler: new TextureStyle({}),\n        // this will be replaced with the local uniforms from the particle container\n        uniforms: {\n          uTranslationMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n          uColor: { value: new Color(16777215), type: \"vec4<f32>\" },\n          uRound: { value: 1, type: \"f32\" },\n          uResolution: { value: [0, 0], type: \"vec2<f32>\" }\n        }\n      }\n    });\n  }\n}\n\nexport { ParticleShader };\n//# sourceMappingURL=ParticleShader.mjs.map\n","var vertex = \"attribute vec2 aVertex;\\nattribute vec2 aUV;\\nattribute vec4 aColor;\\n\\nattribute vec2 aPosition;\\nattribute float aRotation;\\n\\nuniform mat3 uTranslationMatrix;\\nuniform float uRound;\\nuniform vec2 uResolution;\\nuniform vec4 uColor;\\n\\nvarying vec2 vUV;\\nvarying vec4 vColor;\\n\\nvec2 roundPixels(vec2 position, vec2 targetSize)\\n{       \\n    return (floor(((position * 0.5 + 0.5) * targetSize) + 0.5) / targetSize) * 2.0 - 1.0;\\n}\\n\\nvoid main(void){\\n    float cosRotation = cos(aRotation);\\n    float sinRotation = sin(aRotation);\\n    float x = aVertex.x * cosRotation - aVertex.y * sinRotation;\\n    float y = aVertex.x * sinRotation + aVertex.y * cosRotation;\\n\\n    vec2 v = vec2(x, y);\\n    v = v + aPosition;\\n\\n    gl_Position = vec4((uTranslationMatrix * vec3(v, 1.0)).xy, 0.0, 1.0);\\n\\n    if(uRound == 1.0)\\n    {\\n        gl_Position.xy = roundPixels(gl_Position.xy, uResolution);\\n    }\\n\\n    vUV = aUV;\\n    vColor = vec4(aColor.rgb * aColor.a, aColor.a) * uColor;\\n}\\n\";\n\nexport { vertex as default };\n//# sourceMappingURL=particles.vert.mjs.map\n","import { Matrix } from '../../../maths/matrix/Matrix.mjs';\nimport { UniformGroup } from '../../../rendering/renderers/shared/shader/UniformGroup.mjs';\nimport { getAdjustedBlendModeBlend } from '../../../rendering/renderers/shared/state/getAdjustedBlendModeBlend.mjs';\nimport { State } from '../../../rendering/renderers/shared/state/State.mjs';\nimport { color32BitToUniform } from '../../graphics/gpu/colorToUniform.mjs';\nimport { ParticleBuffer } from './ParticleBuffer.mjs';\nimport { ParticleShader } from './shader/ParticleShader.mjs';\n\n\"use strict\";\nclass ParticleContainerPipe {\n  /**\n   * @param renderer - The renderer this sprite batch works for.\n   * @param adaptor\n   */\n  constructor(renderer, adaptor) {\n    /** @internal */\n    this.state = State.for2d();\n    /** Local uniforms that are used for rendering particles. */\n    this.localUniforms = new UniformGroup({\n      uTranslationMatrix: { value: new Matrix(), type: \"mat3x3<f32>\" },\n      uColor: { value: new Float32Array(4), type: \"vec4<f32>\" },\n      uRound: { value: 1, type: \"f32\" },\n      uResolution: { value: [0, 0], type: \"vec2<f32>\" }\n    });\n    this.renderer = renderer;\n    this.adaptor = adaptor;\n    this.defaultShader = new ParticleShader();\n    this.state = State.for2d();\n  }\n  validateRenderable(_renderable) {\n    return false;\n  }\n  addRenderable(renderable, instructionSet) {\n    this.renderer.renderPipes.batch.break(instructionSet);\n    instructionSet.add(renderable);\n  }\n  getBuffers(renderable) {\n    return renderable._gpuData[this.renderer.uid] || this._initBuffer(renderable);\n  }\n  _initBuffer(renderable) {\n    renderable._gpuData[this.renderer.uid] = new ParticleBuffer({\n      size: renderable.particleChildren.length,\n      properties: renderable._properties\n    });\n    return renderable._gpuData[this.renderer.uid];\n  }\n  updateRenderable(_renderable) {\n  }\n  execute(container) {\n    const children = container.particleChildren;\n    if (children.length === 0) {\n      return;\n    }\n    const renderer = this.renderer;\n    const buffer = this.getBuffers(container);\n    container.texture || (container.texture = children[0].texture);\n    const state = this.state;\n    buffer.update(children, container._childrenDirty);\n    container._childrenDirty = false;\n    state.blendMode = getAdjustedBlendModeBlend(container.blendMode, container.texture._source);\n    const uniforms = this.localUniforms.uniforms;\n    const transformationMatrix = uniforms.uTranslationMatrix;\n    container.worldTransform.copyTo(transformationMatrix);\n    transformationMatrix.prepend(renderer.globalUniforms.globalUniformData.projectionMatrix);\n    uniforms.uResolution = renderer.globalUniforms.globalUniformData.resolution;\n    uniforms.uRound = renderer._roundPixels | container._roundPixels;\n    color32BitToUniform(\n      container.groupColorAlpha,\n      uniforms.uColor,\n      0\n    );\n    this.adaptor.execute(this, container);\n  }\n  /** Destroys the ParticleRenderer. */\n  destroy() {\n    this.renderer = null;\n    if (this.defaultShader) {\n      this.defaultShader.destroy();\n      this.defaultShader = null;\n    }\n  }\n}\n\nexport { ParticleContainerPipe };\n//# sourceMappingURL=ParticleContainerPipe.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { GlParticleContainerAdaptor } from '../gl/GlParticleContainerAdaptor.mjs';\nimport { ParticleContainerPipe } from './ParticleContainerPipe.mjs';\n\n\"use strict\";\nclass GlParticleContainerPipe extends ParticleContainerPipe {\n  constructor(renderer) {\n    super(renderer, new GlParticleContainerAdaptor());\n  }\n}\n/** @ignore */\nGlParticleContainerPipe.extension = {\n  type: [\n    ExtensionType.WebGLPipes\n  ],\n  name: \"particle\"\n};\n\nexport { GlParticleContainerPipe };\n//# sourceMappingURL=GlParticleContainerPipe.mjs.map\n","import { ExtensionType } from '../../../extensions/Extensions.mjs';\nimport { GpuParticleContainerAdaptor } from '../gpu/GpuParticleContainerAdaptor.mjs';\nimport { ParticleContainerPipe } from './ParticleContainerPipe.mjs';\n\n\"use strict\";\nclass GpuParticleContainerPipe extends ParticleContainerPipe {\n  constructor(renderer) {\n    super(renderer, new GpuParticleContainerAdaptor());\n  }\n}\n/** @ignore */\nGpuParticleContainerPipe.extension = {\n  type: [\n    ExtensionType.WebGPUPipes\n  ],\n  name: \"particle\"\n};\n\nexport { GpuParticleContainerPipe };\n//# sourceMappingURL=GpuParticleContainerPipe.mjs.map\n","import { extensions } from '../../extensions/Extensions.mjs';\nimport { GlParticleContainerPipe } from './shared/GlParticleContainerPipe.mjs';\nimport { GpuParticleContainerPipe } from './shared/GpuParticleContainerPipe.mjs';\n\n\"use strict\";\nextensions.add(GlParticleContainerPipe);\nextensions.add(GpuParticleContainerPipe);\n//# sourceMappingURL=init.mjs.map\n"],"names":["definedProps","obj","result","key","defaultMatrix","Matrix","Bounds","constructor","minX","Infinity","minY","maxX","maxY","this","matrix","isEmpty","rectangle","_rectangle","Rectangle","x","y","width","height","copyFromBounds","clear","set","x0","y0","x1","y1","addFrame","a","b","c","d","tx","ty","addRect","rect","addBounds","bounds","addBoundsMask","mask","applyMatrix","fit","left","right","top","bottom","fitBounds","pad","paddingX","paddingY","ceil","Math","floor","clone","scale","value","isPositive","isValid","addVertexData","vertexData","beginOffset","endOffset","i","localX","localY","containsPoint","toString","copyFrom","cacheAsTextureMixin","isCachedAsTexture","renderGroup","cacheAsTexture","val","disableRenderGroup","enableRenderGroup","enableCacheAsTexture","updateCacheTexture","cacheAsBitmap","deprecation","childrenHelperMixin","allowChildren","removeChildren","beginIndex","endIndex","end","children","length","range","removed","child","push","parent","removeItems","parentRenderGroup","parentRenderLayer","detach","emit","_didViewChangeTick","RangeError","removeChildAt","index","getChildAt","removeChild","Error","setChildIndex","getChildIndex","addChildAt","indexOf","v8_0_0","currentIndex","splice","didChange","_updateFlags","addChild","sortableChildren","sortDirty","swapChildren","child2","index1","index2","structureDidChange","_didContainerChangeTick","removeFromParent","reparentChild","reparentChildAt","forEach","childMat","worldTransform","newMatrix","invert","prepend","setFromMatrix","replaceChild","oldChild","newChild","updateLocalTransform","localTransform","collectRenderablesMixin","collectRenderables","instructionSet","renderer","currentLayer","globalDisplayStatus","includeInBuild","sortChildren","isSimple","collectRenderablesSimple","renderPipes","addRenderGroup","collectRenderablesWithEffects","effects","effect","pipe","pop","effectsMixin","_maskEffect","_maskOptions","inverse","_filterEffect","_markStructureAsChanged","addEffect","sort","priority","_updateIsSimple","removeEffect","MaskEffectManager","returnMaskEffect","getMaskEffect","setMask","options","filters","Array","isArray","FilterEffect","hasFilters","slice","Object","freeze","filterArea","findMixin","label","name","getChildByName","deep","getChildByLabel","RegExp","test","found","getChildrenByLabel","out","matrixPool","BigPool","getPool","boundsPool","tempMatrix","getFastGlobalBoundsMixin","getFastGlobalBounds","factorRenderLayers","_getGlobalBoundsRecursive","localBounds","localDisplayStatus","measurable","manageEffects","get","boundsArea","renderPipeId","viewBounds","groupTransform","advanced","copyTo","return","relativeGroupTransform","getGlobalBounds","target","skipUpdateTransform","parentTransform","pooledMatrix","identity","updateTransformBackwards","IDENTITY","_getGlobalBounds","visible","appendFrom","parentBounds","preserveBounds","renderableBounds","append","multiplyHexColors","color1","color2","WHITE_BGR","multiplyColors","localBGRColor","parentBGRColor","bgr2rgb","color","getGlobalMixin","getGlobalAlpha","skipUpdate","worldAlpha","alpha","current","getGlobalTransform","getGlobalTint","worldColor","localColor","tint","getLocalBounds","relativeMatrix","_getLocalBounds","rootContainer","isRoot","relativeTransform","addLocalBounds","checkChildrenDidChange","container","previousData","uid","data","measureMixin","_localBoundsCacheId","_localBoundsCacheData","_setWidth","localWidth","sign","_setHeight","localHeight","localBoundsCacheData","getBounds","onRenderMixin","_onRender","onRender","func","removeOnRender","addOnRender","sortMixin","_zIndex","zIndex","depthOfChildModified","toLocalGlobalMixin","getGlobalPosition","point","Point","toGlobal","_position","position","globalMatrix","apply","toLocal","from","applyInverse","RenderGroup","root","canBundle","renderGroupParent","renderGroupChildren","worldColorAlpha","childrenToUpdate","create","updateTick","gcTick","childrenRenderablesToUpdate","list","InstructionSet","_onRenderContainers","textureNeedsUpdate","_matrixDirty","init","textureOptions","disableCacheAsTexture","texture","TexturePool","returnTexture","cachedParent","_parentCacheAsTextureRenderGroup","reset","childrenAtDepth","fill","addRenderGroupChild","renderGroupChild","_removeRenderGroupChild","relativeRenderGroupDepth","onChildUpdate","updateRenderable","renderable","didViewUpdate","onChildViewUpdate","isRenderable","runOnRender","destroy","getChildren","_getChildren","invalidateMatrices","inverseWorldTransform","_inverseWorldTransform","textureOffsetInverseTransform","_textureOffsetInverseTransform","translate","_textureBounds","inverseParentTextureTransform","_inverseParentTextureTransform","parentCacheAsTexture","cacheToLocalTransform","defaultSkew","ObservablePoint","defaultPivot","defaultScale","defaultOrigin","Container","EventEmitter","super","parentRenderGroupIndex","destroyed","_scale","_pivot","_origin","_skew","_cx","_sx","_cy","_sy","_rotation","localAlpha","groupAlpha","groupColor","groupColorAlpha","localBlendMode","groupBlendMode","_didLocalTransformChangeId","ignore","assignWithIgnore","mixin","source","extensions","_didChangeId","_onUpdate","_updateSkew","isRenderGroup","_worldTransform","rotation","angle","RAD_TO_DEG","DEG_TO_RAD","pivot","warn","skew","parseFloat","origin","abs","getSize","setSize","size","cos","_y","sin","_x","updateTransform","opts","scaleX","scaleY","skewX","skewY","pivotX","pivotY","originX","originY","decompose","localTransformChangeId","lt","sx","sy","px","py","ox","oy","bgr","Color","shared","setValue","toBgrNumber","blendMode","valueNumber","culled","oldChildren","removeAllListeners","cullingMixin","tempProjectionMatrix","getGlobalRenderableBounds","renderables","actualMatrix","CustomRenderPipe","_renderer","destroyRenderable","validateRenderable","addRenderable","batch","break","add","execute","render","executeInstructions","instructions","instructionSize","instruction","extension","type","ExtensionType","WebGLPipes","WebGPUPipes","CanvasPipes","RenderGroupPipe","_addRenderableCacheAsTexture","_addRenderableDirect","_executeCacheAsTexture","_executeDirect","_batchableRenderGroup","batchableRenderGroup","BatchableSprite","transform","pushBlendMode","addToBatch","popBlendMode","worldTransformMatrix","renderTarget","frame","globalUniforms","offset","finishRenderPass","_batcher","updateElement","geometry","buffers","update","clearList","j","tempContainer","updateRenderGroupTransforms","updateChildRenderGroups","updateRenderGroupTransform","renderGroupDepth","Number","updateTransformAndChildren","updateFlags","UPDATE_VISIBLE","updateColorBlendVisibility","RenderGroupSystem","originalLocalTransform","_updateCachedRenderGroups","_updateRenderGroups","start","uniformBatch","renderEnd","closestCacheAsTexture","lastTexture","resolution","view","antialias","scaleMode","getOptimalTexture","_source","style","TextureStyle","rebuildRequired","validateRenderables","_buildInstructions","_updateRenderables","upload","rendererOrPipes","buildStart","colorMask","buildEnd","WebGLSystem","WebGPUSystem","CanvasSystem","GlParticleContainerAdaptor","particleContainerPipe","state","shader","defaultShader","resources","uTexture","uniforms","localUniforms","gl","buffer","getBuffers","bind","glProgram","glType","indexBuffer","BYTES_PER_ELEMENT","UNSIGNED_SHORT","UNSIGNED_INT","drawElements","TRIANGLES","particleChildren","GpuParticleContainerAdaptor","groups","getUniformBindGroup","getTextureBindGroup","encoder","draw","createIndicesForQuads","outBuffer","totalIndices","Uint32Array","Uint16Array","generateUpdateFunction","properties","dynamic","funcFragments","property","code","getAttributeInfoFromFormat","format","stride","unshift","functionSource","join","Function","ParticleBuffer","_size","_generateParticleUpdateCache","staticVertexSize","dynamicVertexSize","attributeInfo","_dynamicStride","_staticStride","staticAttributeBuffer","ViewableBuffer","dynamicAttributeBuffer","Geometry","dynamicOffset","staticOffset","_staticBuffer","Buffer","Float32Array","shrinkToFit","usage","BufferUsage","VERTEX","COPY_DST","_dynamicBuffer","addAttribute","attributeName","addIndex","uploadFunction","getParticleUpdate","_dynamicUpload","dynamicUpdate","_staticUpload","staticUpdate","keyGen","getParticleSyncKey","generateParticleUpdate","generateParticleUpdateFunction","particles","uploadStatic","max","setDataWithSize","byteLength","float32View","uint32View","wgsl","ParticleShader","Shader","GlProgram","vertex","fragment","gpuProgram","GpuProgram","entryPoint","Texture","WHITE","uSampler","uTranslationMatrix","uColor","uRound","uResolution","ParticleContainerPipe","adaptor","State","for2d","UniformGroup","_renderable","_gpuData","_initBuffer","_properties","_childrenDirty","getAdjustedBlendModeBlend","transformationMatrix","globalUniformData","projectionMatrix","_roundPixels","color32BitToUniform","GlParticleContainerPipe","GpuParticleContainerPipe"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42]}