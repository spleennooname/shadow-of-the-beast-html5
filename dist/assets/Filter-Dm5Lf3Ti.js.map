{"version":3,"file":"Filter-Dm5Lf3Ti.js","sources":["../../node_modules/pixi.js/lib/rendering/renderers/shared/state/State.mjs","../../node_modules/pixi.js/lib/filters/Filter.mjs"],"sourcesContent":["\"use strict\";\nconst blendModeIds = {\n  normal: 0,\n  add: 1,\n  multiply: 2,\n  screen: 3,\n  overlay: 4,\n  erase: 5,\n  \"normal-npm\": 6,\n  \"add-npm\": 7,\n  \"screen-npm\": 8,\n  min: 9,\n  max: 10\n};\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\nconst DEPTH_MASK = 5;\nconst _State = class _State {\n  constructor() {\n    this.data = 0;\n    this.blendMode = \"normal\";\n    this.polygonOffset = 0;\n    this.blend = true;\n    this.depthMask = true;\n  }\n  /**\n   * Activates blending of the computed fragment color values.\n   * @default true\n   */\n  get blend() {\n    return !!(this.data & 1 << BLEND);\n  }\n  set blend(value) {\n    if (!!(this.data & 1 << BLEND) !== value) {\n      this.data ^= 1 << BLEND;\n    }\n  }\n  /**\n   * Activates adding an offset to depth values of polygon's fragments\n   * @default false\n   */\n  get offsets() {\n    return !!(this.data & 1 << OFFSET);\n  }\n  set offsets(value) {\n    if (!!(this.data & 1 << OFFSET) !== value) {\n      this.data ^= 1 << OFFSET;\n    }\n  }\n  /** The culling settings for this state none - No culling back - Back face culling front - Front face culling */\n  set cullMode(value) {\n    if (value === \"none\") {\n      this.culling = false;\n      return;\n    }\n    this.culling = true;\n    this.clockwiseFrontFace = value === \"front\";\n  }\n  get cullMode() {\n    if (!this.culling) {\n      return \"none\";\n    }\n    return this.clockwiseFrontFace ? \"front\" : \"back\";\n  }\n  /**\n   * Activates culling of polygons.\n   * @default false\n   */\n  get culling() {\n    return !!(this.data & 1 << CULLING);\n  }\n  set culling(value) {\n    if (!!(this.data & 1 << CULLING) !== value) {\n      this.data ^= 1 << CULLING;\n    }\n  }\n  /**\n   * Activates depth comparisons and updates to the depth buffer.\n   * @default false\n   */\n  get depthTest() {\n    return !!(this.data & 1 << DEPTH_TEST);\n  }\n  set depthTest(value) {\n    if (!!(this.data & 1 << DEPTH_TEST) !== value) {\n      this.data ^= 1 << DEPTH_TEST;\n    }\n  }\n  /**\n   * Enables or disables writing to the depth buffer.\n   * @default true\n   */\n  get depthMask() {\n    return !!(this.data & 1 << DEPTH_MASK);\n  }\n  set depthMask(value) {\n    if (!!(this.data & 1 << DEPTH_MASK) !== value) {\n      this.data ^= 1 << DEPTH_MASK;\n    }\n  }\n  /**\n   * Specifies whether or not front or back-facing polygons can be culled.\n   * @default false\n   */\n  get clockwiseFrontFace() {\n    return !!(this.data & 1 << WINDING);\n  }\n  set clockwiseFrontFace(value) {\n    if (!!(this.data & 1 << WINDING) !== value) {\n      this.data ^= 1 << WINDING;\n    }\n  }\n  /**\n   * The blend mode to be applied when this state is set. Apply a value of `normal` to reset the blend mode.\n   * Setting this mode to anything other than NO_BLEND will automatically switch blending on.\n   * @default 'normal'\n   */\n  get blendMode() {\n    return this._blendMode;\n  }\n  set blendMode(value) {\n    this.blend = value !== \"none\";\n    this._blendMode = value;\n    this._blendModeId = blendModeIds[value] || 0;\n  }\n  /**\n   * The polygon offset. Setting this property to anything other than 0 will automatically enable polygon offset fill.\n   * @default 0\n   */\n  get polygonOffset() {\n    return this._polygonOffset;\n  }\n  set polygonOffset(value) {\n    this.offsets = !!value;\n    this._polygonOffset = value;\n  }\n  toString() {\n    return `[pixi.js/core:State blendMode=${this.blendMode} clockwiseFrontFace=${this.clockwiseFrontFace} culling=${this.culling} depthMask=${this.depthMask} polygonOffset=${this.polygonOffset}]`;\n  }\n  /**\n   * A quickly getting an instance of a State that is configured for 2d rendering.\n   * @returns a new State with values set for 2d rendering\n   */\n  static for2d() {\n    const state = new _State();\n    state.depthTest = false;\n    state.blend = true;\n    return state;\n  }\n};\n_State.default2d = _State.for2d();\nlet State = _State;\n\nexport { State };\n//# sourceMappingURL=State.mjs.map\n","import { GlProgram } from '../rendering/renderers/gl/shader/GlProgram.mjs';\nimport { GpuProgram } from '../rendering/renderers/gpu/shader/GpuProgram.mjs';\nimport { Shader } from '../rendering/renderers/shared/shader/Shader.mjs';\nimport { State } from '../rendering/renderers/shared/state/State.mjs';\n\n\"use strict\";\nconst _Filter = class _Filter extends Shader {\n  /**\n   * @param options - The optional parameters of this filter.\n   */\n  constructor(options) {\n    options = { ..._Filter.defaultOptions, ...options };\n    super(options);\n    /** If enabled is true the filter is applied, if false it will not. */\n    this.enabled = true;\n    /**\n     * The gpu state the filter requires to render.\n     * @internal\n     */\n    this._state = State.for2d();\n    this.blendMode = options.blendMode;\n    this.padding = options.padding;\n    if (typeof options.antialias === \"boolean\") {\n      this.antialias = options.antialias ? \"on\" : \"off\";\n    } else {\n      this.antialias = options.antialias;\n    }\n    this.resolution = options.resolution;\n    this.blendRequired = options.blendRequired;\n    this.clipToViewport = options.clipToViewport;\n    this.addResource(\"uTexture\", 0, 1);\n  }\n  /**\n   * Applies the filter\n   * @param filterManager - The renderer to retrieve the filter from\n   * @param input - The input render target.\n   * @param output - The target to output to.\n   * @param clearMode - Should the output be cleared before rendering to it\n   */\n  apply(filterManager, input, output, clearMode) {\n    filterManager.applyFilter(this, input, output, clearMode);\n  }\n  /**\n   * Get the blend mode of the filter.\n   * @default \"normal\"\n   */\n  get blendMode() {\n    return this._state.blendMode;\n  }\n  /** Sets the blend mode of the filter. */\n  set blendMode(value) {\n    this._state.blendMode = value;\n  }\n  /**\n   * A short hand function to create a filter based of a vertex and fragment shader src.\n   * @param options\n   * @returns A shiny new PixiJS filter!\n   */\n  static from(options) {\n    const { gpu, gl, ...rest } = options;\n    let gpuProgram;\n    let glProgram;\n    if (gpu) {\n      gpuProgram = GpuProgram.from(gpu);\n    }\n    if (gl) {\n      glProgram = GlProgram.from(gl);\n    }\n    return new _Filter({\n      gpuProgram,\n      glProgram,\n      ...rest\n    });\n  }\n};\n/** The default filter settings */\n_Filter.defaultOptions = {\n  blendMode: \"normal\",\n  resolution: 1,\n  padding: 0,\n  antialias: \"off\",\n  blendRequired: false,\n  clipToViewport: true\n};\nlet Filter = _Filter;\n\nexport { Filter };\n//# sourceMappingURL=Filter.mjs.map\n"],"names":["blendModeIds","normal","add","multiply","screen","overlay","erase","min","max","_State","constructor","this","data","blendMode","polygonOffset","blend","depthMask","value","offsets","cullMode","culling","clockwiseFrontFace","depthTest","_blendMode","_blendModeId","_polygonOffset","toString","for2d","state","default2d","State","_Filter","Shader","options","super","defaultOptions","enabled","_state","padding","antialias","resolution","blendRequired","clipToViewport","addResource","apply","filterManager","input","output","clearMode","applyFilter","from","gpu","gl","rest","gpuProgram","glProgram","GpuProgram","GlProgram","Filter"],"mappings":"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","x_google_ignoreList":[0,1]}